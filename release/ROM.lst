   1:				;
   2:     -	0001          			SALLYBUILD	EQU	1
   3:     -	0000          			WD1772		EQU	0
   4:				;	
   5:					ASEG
   6:     -	0000          		ORG	0
   7:				;
   8:				;
   9:				;
  10:						INCLUDE	EQUS.MAC
**** ..\src\EQUS.MAC ****
   1:				;--------------------------------------------------
   2:				; Equates for Sally2 Hi-Speed-SIO code
   3:				;--------------------------------------------------
   4:     -	0000          	NOHIGHSPEEDSIO	EQU	0
   5:				;
   6:				;--------------------------------------------------
   7:				; Track-Buffer 26*256 bytes
   8:				;--------------------------------------------------
   9:     -	0800          	TRKBUFFER	EQU	00800h
  10:				
  11:     -	0028          	SIONORMAL	EQU	40
  12:     -	0008          	SIOFAST		EQU	8
  13:				;--------------------------------------------------
  14:				;
  15:				;--------------------------------------------------
  16:				;
  17:				;
  18:				;
  19:     -	0020          	PRINTER	EQU	20H		;PRINTER OUTPUT/INPUTS
  20:     -	0030          	LATCH	EQU	30H		;DRIVE CONTROL LATCH
  21:     -	0040          	WD179X	EQU	40H		;WD TYPE DISK CONTROLLER
  22:				;
  23:     -	0050          	SERIN	EQU	50H		;RS232 SERIAL INPUT
  24:				;
  25:     -	0050          	ATROUT	EQU	50H		;ATARI SERIAL OUTPUT
  26:     -	0051          	SEROUT	EQU	51H		;RS232 SERIAL OUTPUT
  27:     -	0052          	BANKSW	EQU	52H		;ROM BANKSWITCH BIT
  28:     -	0053          	STROBE	EQU	53H		;PRINTER STROBE
  29:     -	0054          	INDXCLR	EQU	54H		;INDEX CONTROL FLOP CLEAR
  30:     -	0055          	DTR		EQU	55H		;DTR OUTPUT CONTROL
  31:     -	0056          	INDXSET	EQU	56H		;INDEX CONTROL FLOP SET
  32:     -	0057          	CDMUX	EQU	57H		;ATARI CMD/DATA MUX CONTROL
  33:				;
  34:     -	0070          	ATARI	EQU	70H		;ATARI INPUT BITS PORT
  35:     -	0080          	CTC0	EQU	80H		;ZILOG COUNTER/TIMER 0
  36:     -	0081          	CTC1	EQU	81H		;ZILOG COUNTER/TIMER 1
  37:     -	0082          	CTC2	EQU	82H		;ZILOG COUNTER/TIMER 2
  38:     -	0083          	CTC3	EQU	83H		;ZILOG COUNTER/TIMER 3
  39:				;
  40:     -	0000          	CTC_D0_VECTOR:		EQU	00000000B	;Data is a Vector
  41:     -	0001          	CTC_D0_CONTROL:		EQU	00000001B	;Data is a Control Word
  42:     -	0002          	CTC_D1_SW_RST:		EQU	00000010B	;Perform a software reset
  43:     -	0004          	CTC_D2_TCNEXT:		EQU	00000100B	;Time Constant follows
  44:     -	0000          	CTC_D3_AUTOTRG:		EQU	00000000B	;Automatic trigger when Time Constant loaded
  45:     -	0008          	CTC_D3_CLKTRG:		EQU	00001000B	;CLK/TRIG pin pulse starts timer
  46:     -	0000          	CTC_D4_FALLEDGE:	EQU	00000000B	;CLK/TRIG edge selection - falling edge
  47:     -	0010          	CTC_D4_RISEEDGE:	EQU	00010000B	;CLK/TRIG edge selection - rising edge
  48:     -	0000          	CTC_D5_PRESC_16:	EQU	00000000B	;Timer prescaler value of 16
  49:     -	0020          	CTC_D5_PRESC256:	EQU	00100000B	;Timer prescaler value of 256
  50:     -	0000          	CTC_D6_MODE_TIM:	EQU	00000000B	;Selects Timer mode
  51:     -	0040          	CTC_D6_MODE_CNT:	EQU	01000000B	;Selects Counter mode
  52:     -	0000          	CTC_D7_INT_DIS:		EQU	00000000B	;Disables Interrupt
  53:     -	0080          	CTC_D7_INT_EN:		EQU	10000000B	;Enables Interrupt
  54:				;
  55:     -	0000          	NULL	EQU	00H
  56:     -	000D          	CR	EQU	0DH
  57:     -	000A          	LF	EQU	0AH
  58:				;
**** ..\src\ROM.MAC ****
  11:						INCLUDE	SYSINIT.MAC
**** ..\src\SYSINIT.MAC ****
   1:				;********************************************************
   2:				;*							*
   3:				;*							*
   4:				;********************************************************
   5:				;
   6:				;
   7:				;
   8:    0+4	0000  F3      	INIT:		DI
   9:    4+4	0001  AF      			XOR	A
  10:    8+4	0002  3D      	INIT1:		DEC	A
  11:   12+7+5	0003  20FD    			JR	NZ,INIT1				;DO NOTHING FOR 1 MILLISECOND
  12:				
  13:   19+10	0005  21C505  			LD	HL,INITAB
  14:   29+7	0008  060B    			LD	B,ITBLEN/2				;SEND INITIAL POOP TO PROGRAMABLE I/O'S
  15:   36+7	000A  4E      	INIT2:		LD	C,(HL)
  16:   43+6	000B  23      			INC	HL
  17:   49+16	000C  EDA3    			OUTI
  18:   65+7+5	000E  20FA    			JR	NZ,INIT2
  19:				;
  20:				;	PERFORM READ/WRITE TEST OF TOP 4K RAM
  21:				;
  22:   72+10	0010  2100F0  	RAMTST:		LD	HL,MONITOR
  23:   82+7	0013  3E01    			LD	A,1
  24:   89+7	0015  0610    	RTST1:		LD	B,16
  25:   96+7	0017  77      	RTST2:		LD	(HL),A					;WRITE TEST BYTE INTO MONITOR/GLOBALS
  26:  103+4	0018  07      			RLCA						;ROTATE BIT PATTERN IN A
  27:  107+4	0019  2C      			INC	L					;BUMP L TO DO INNER LOOP 256 TIMES
  28:  111+7+5	001A  20FB    			JR	NZ,RTST2
  29:  118+4	001C  24      			INC	H
  30:  122+8+5	001D  10F8    			DJNZ	RTST2					;REPEAT 16 TIMES FOR 4096 BYTES
  31:				
  32:  130+7	001F  0E10    			LD	C,16
  33:  137+6	0021  2B      	RTST3:		DEC	HL
  34:  143+4	0022  0F      			RRCA
  35:  147+7	0023  BE      			CP	(HL)					;VERIFY THAT TEST PATTERN IS WRITTEN
  36:  154+7+5	0024  20FE    			JR	NZ,$					;STICK FOREVER IF MONITOR RAM FAILURE
  37:  161+8+5	0026  10F9    			DJNZ	RTST3
  38:  169+4	0028  0D      			DEC	C
  39:  173+7+5	0029  20F6    			JR	NZ,RTST3
  40:				
  41:  180+4	002B  87      			ADD	A,A
  42:  184+7+5	002C  20E7    			JR	NZ,RTST1				;DO 8 PASSES OVER MEMORY
  43:				;
  44:				;	NOW COPY MONITOR AND VARIABLES TO HIGH RAM
  45:				;
  46:  191+10	002E  211B06  			LD	HL,MONCOPY
  47:  201+10	0031  1100F0  			LD	DE,MONITOR
  48:  211+10	0034  01FC0E  			LD	BC,MONSIZE
  49:  221+16+5	0037  EDB0    			LDIR						;COPY RESIDENT CODE INTO RAM
  50:				
  51:  237+10	0039  211715  			LD	HL,VARCOPY
  52:  247+10	003C  1120FF  			LD	DE,glbvars
  53:  257+10	003F  012F00  			LD	BC,glbsize
  54:  267+16+5	0042  EDB0    			LDIR						;INITIALIZE GLOBAL VARIABLES
  55:  283+4	0044  AF      			XOR	A
  56:  287+7	0045  12      	ZEROS:		LD	(DE),A
  57:  294+4	0046  1C      			INC	E
  58:  298+7+5	0047  20FC    			JR	NZ,ZEROS				;FILL REST OF SCRATCHPAD WITH ZEROS
  59:				;
  60:				;	ESTABLISH STACK AND INTERRUPT VECTOR BASE
  61:				;
  62:  305+10	0049  3110FF  			LD	SP,KEYBUF+16				;TEMP PLACE FOR STACK
  63:  315+7	004C  3EFF    			LD	A,HIGH RAM			
  64:  322+9	004E  ED47    			LD	I,A					;POINT I REGISTER TO VECTOR TABLE
  65:  331+8	0050  ED5E    			IM	2					;SELECT VECTORED INTERRUPTS
  66:				;			
  67:				;step 5 times in and then out to trk00.  
  68:				;set bit 6 for each online floppy in ff5eh percom block (16 bytes, byte 8 bit 6)
  69:				;
  70:  339+7	0052  3E4F    	REST:		LD	A, FBS+DRVSEL4+DRVSEL3+DRVSEL2+DRVSEL1	;INITIAL DRIVE PATTERN (ALL SELECTED) - select drive 1-4, Motor off, side 0, B/S=1, DD
  71:  346+11	0054  D330    			OUT	(LATCH), A
  72:  357+4	0056  57      			LD	D,A					;KEEP PATTERN IN D (d = 4fh)
  73:  361+7	0057  0605    			LD	B,5					;step 5 times
  74:  368+7	0059  3E4B    	REST1:		LD	A,STEPIN+NOWAITMTR+STEPRATE		;4b: 4 = step-in, b = NOWAITMTR+STEPRATE3
  75:				
  76:     -	0000          	IF WD1772
  78:				ELSE			
  79:  375+17	005B  CD6BF3  			CALL	TYP1CMD					;STEP IN 5 TIMES AS PRECAUTION FOR
  80:				ENDIF	;WD1772			
  81:							
  82:  392+8+5	005E  10F9    			DJNZ	REST1					; DRIVES THAT GET BEHIND TK0 SENSOR
  83:  400+7	0060  0664    			LD	B,100					;DO 100 STEPS TOWARD TRACK ZERO (support 100 track drives)
  84:  407+4	0062  7A      	REST2:		LD	A,D			
  85:  411+11	0063  D330    			OUT	(LATCH),A				;ISSUE SELECTS AND PAUSE A BIT
  86:  422+19	0065  E3      			EX	(SP),HL
  87:  441+19	0066  E3      			EX	(SP),HL
  88:  460+7	0067  3E6B    			LD	A,STEPOUT+NOWAITMTR+STEPRATE		;6b: 6 = step-out, b = NOWAITMTR+STEPRATE3
  89:				
  90:     -	0000          	IF WD1772
  92:				ELSE			
  93:  467+17	0069  CD6BF3  			CALL	TYP1CMD					;ISSUE STEP OUT COMMAND TO DRIVES
  94:				ENDIF	;WD1772			
  95:							
  96:  484+7	006C  1E01    			LD	E,DRVSEL1				;PREPARE TO TEST TK0 INDICATORS
  97:  491+4	006E  7B      	REST3:		LD	A,E			
  98:  495+7	006F  F640    			OR	FBS			
  99:  502+11	0071  D330    			OUT	(LATCH),A				;SELECT ONE DRIVE AT A TIME
 100:  513+19	0073  E3      			EX	(SP),HL					;Use this benign operation pair
 101:  532+19	0074  E3      			EX	(SP),HL					;to wait 38 T-states
 102:				
 103:     -	0000          	IF WD1772
 105:				ELSE
 106:  551+17	0075  CD91F3  			CALL	FORCE					;FORCE INTERRUPT TO SET TYPE 1 STATUS
 107:				ENDIF	;WD1772			
 108:							
 109:  568+8	0078  CB57    			BIT	2, A			
 110:  576+7+5	007A  2804    			JR	Z,REST3A				;JUMP IF TRACK ZERO NOT INDICATED
 111:  583+4	007C  7B      			LD	A,E			
 112:  587+4	007D  2F      			CPL			
 113:  591+4	007E  A2      			AND	D					;ELSE RESET SELECT BIT FOR DRIVE IN D
 114:  595+4	007F  57      			LD	D,A			
 115:  599+8	0080  CB23    	REST3A:		SLA	E					;ADVANCE SELECT BIT
 116:  607+8	0082  CB63    			BIT	4,E			
 117:  615+7+5	0084  28E8    			JR	Z,REST3					;DO SAME FOR ALL 4 DRIVES
 118:  622+8+5	0086  10DA    			DJNZ	REST2					;THEN REPEAT STEP OUT 100 TIMES
 119:							
 120:     -	0000          	IF WD1772			
 125:				ELSE			
 126:  630+17	0088  CD68F0  			call	shutdown				;unload the heads and deselect the drives
 127:				ENDIF	;WD1772
 128:				
 129:  647+10	008B  215EFF  			LD	HL,DMATRIX+DSKBITS
 130:  657+10	008E  011000  			LD	BC,16
 131:  667+7	0091  3E04    			LD	A,4					;PREP TO SET FLAGS FOR DRIVES PRESENT
 132:  674+8	0093  CB1A    	REST4:		RR	D			
 133:  682+7+5	0095  3802    			JR	C,REST4A				;JUMP IF DRIVE(N) NOT AT TRACK ZERO
 134:  689+15	0097  CBF6    			SET	PRESENT,(HL)				;ELSE SET BIT IN ARRAY(HL)
 135:  704+11	0099  09      	REST4A:		ADD	HL,BC			
 136:  715+4	009A  3D      			DEC	 A			
 137:  719+7+5	009B  20F6    			JR	NZ,REST4				;DO FOR ALL 4 DRIVES
 138:				;			
 139:     -	0001          	IF SALLYBUILD			
 140:  726+10	009D  210000  			LD	HL, 00000h				; source
 141:  736+10	00A0  110080  			LD	DE, 08000h				; dest
 142:  746+10	00A3  010020  			LD	BC, 02000h
 143:  756+16+5	00A6  EDB0    			LDIR
 144:  772+10	00A8  21AE00  			LD	HL, code8000
 145:  782+8	00AB  CBFC    			SET	7, H
 146:  790+4	00AD  E9      			JP	(HL)
 147:     -	00AE          	code8000:
 148:  794+7	00AE  3E01    			LD	A, 1
 149:  801+11	00B0  D352    			OUT	(BANKSW), A
 150:  812+10	00B2  210080  			LD	HL, 08000h
 151:  822+10	00B5  110000  			LD	DE, 00000h
 152:  832+10	00B8  010020  			LD	BC, 02000h
 153:  842+16+5	00BB  EDB0    			LDIR
 154:  858+10	00BD  C3C000  			JP	code0000
 155:     -	00C0          	code0000:
 156:				ENDIF	;SALLYBUILD
 157:				
 158:  868+10	00C0  3100C1  			LD	SP, IOBUFF				;NEW PLACE FOR STACK
 159:				
 160:     -	0001          	IF SALLYBUILD
 161:				;--------------------------------------------------
 162:				; firmware patch
 163:				;--------------------------------------------------
 164:  878+10	00C3  21FFFF  			LD	HL, 0ffffh				;reset drive / track buffer
 165:  888+16	00C6  220006  			LD	(drive), HL
 166:				
 167:  904+10	00C9  213FF8  			LD	HL, DISKTAB+2
 168:  914+10	00CC  11DE05  			LD	DE, dsktb+3
 169:  924+10	00CF  011500  			LD	BC, 3*7
 170:  934+16+5	00D2  EDB0    			LDIR
 171:				
 172:  950+10	00D4  210800  			LD	HL, 8
 173:  960+16	00D7  22DB05  			LD	(dsktb),HL
 174:  976+7	00DA  3E3F    			LD	A, '?'
 175:  983+13	00DC  32DD05  			LD	(dsktb+2), A
 176:  996+4	00DF  EB      			EX	DE, HL
 177:				
 178: 1000+7	00E0  3E0F    			LD	A, getspeed & 255
 179: 1007+7	00E2  77      			LD	(HL), A
 180: 1014+6	00E3  23      			INC	HL
 181: 1020+7	00E4  3E04    			LD	A, getspeed / 256
 182: 1027+7	00E6  77      			LD	(HL), A
 183: 1034+6	00E7  23      			INC	HL
 184:				
 185: 1040+10	00E8  21DB05  			LD	HL, dsktb
 186: 1050+16	00EB  222BF8  			LD	(SalyDISKID), HL
 187: 1066+16	00EE  222DF8  			LD	(SalyDISKID+2), HL
 188: 1082+16	00F1  222FF8  			LD	(SalyDISKID+4), HL
 189: 1098+16	00F4  2231F8  			LD	(SalyDISKID+6), HL
 190:				
 191: 1114+7	00F7  3E28    			LD	A, SIONORMAL
 192: 1121+13	00F9  32FE05  			LD	(pokeydiv), A
 193: 1134+4	00FC  AF      			XOR	A
 194: 1138+13	00FD  32FF05  			LD	(hispeed), A
 195: 1151+7	0100  3E02    			LD	A, 2
 196: 1158+13	0102  32FD05  			LD	(direct), A
 197: 1171+7	0105  3EC3    			LD	A, 0c3h					;'JP' instruction
 198: 1178+13	0107  3284F6  			LD	(XMITBUF), A
 199: 1191+13	010A  32D9F6  			LD	(RXBLOCK), A
 200: 1204+13	010D  32E2F7  			LD	(CMDWAIT), A
 201: 1217+13	0110  327EF7  			LD	(SalyLOGN1), A
 202: 1230+13	0113  3218F9  			LD	(SalyDISKWRT1), A
 203: 1243+13	0116  3293F9  			LD	(SalyDISKRD1), A
 204:				;		LD	(DISK4),A
 205:				
 206: 1256+10	0119  213E04  			LD	HL, xmitbuffn
 207: 1266+16	011C  2285F6  			LD	(XMITBUF+1), HL
 208: 1282+10	011F  218904  			LD	HL, rxblck
 209: 1292+16	0122  22DAF6  			LD	(RXBLOCK+1), HL
 210: 1308+10	0125  212504  			LD	HL, cmdwaitfn
 211: 1318+16	0128  22E3F7  			LD	(CMDWAIT+1), HL
 212: 1334+10	012B  212403  			LD	HL, dskreadfn
 213: 1344+16	012E  22D5F9  			LD	(SalyDISKRD3+1), HL
 214: 1360+10	0131  219A02  			LD	HL, dskwrite
 215: 1370+16	0134  2249F9  			LD	(SalyDISKWRT3+1), HL
 216: 1386+10	0137  214C01  			LD	HL, SalyLogon
 217: 1396+16	013A  227FF7  			LD	(SalyLOGN1+1), HL
 218: 1412+10	013D  213802  			LD	HL, dwrt
 219: 1422+16	0140  2219F9  			LD	(SalyDISKWRT1+1), HL
 220: 1438+10	0143  21AB01  			LD	HL, dskrd1
 221: 1448+16	0146  2294F9  			LD	(SalyDISKRD1+1), HL
 222:				;		LD	HL, diskiodebug
 223:				;		LD	(DISK4+1),HL
 224:				
 225:				;loop:		CALL	serinfn
 226:				;		
 227:				;		LD	A, 041h + 000h + 000h
 228:				;		OUT	(LATCH), A
 229:				;
 230:				;		XOR	A
 231:				;		OUT	(TRKREG), A
 232:				;		LD	A, 01
 233:				;		OUT	(SECREG), A
 234:				;		LD	A, RDCMD
 235:				;		out	(CMDREG), A
 236:				;
 237:				;loop1:		IN	A,(STSREG)
 238:				;		BIT	0,A
 239:				;		JR	NZ,loop1				;LOOP TILL 1797 BUSY BIT GOES AWAY
 240:				;		
 241:				;		CALL	serhex
 242:				;		CALL	sercr		
 243:				;;		CALL	serinfn
 244:				;		
 245:				;		LD	A, 040h
 246:				;		OUT	(LATCH), A
 247:				;		
 248:				;		JP	loop
 249:						
 250:				;--------------------------------------------------
 251:				; test code
 252:				;--------------------------------------------------
 253:				;		LD	A, 0c3h					;'JP' instruction
 254:				;		LD	(SEL4), A
 255:				;		LD	HL, SalySEL4
 256:				;		LD	(SEL4+1), HL
 257:				;
 258:				;		LD	A, 255
 259:				;		LD	(CTCVEC+2), A
 260:				;
 261:				;		LD	B, 3
 262:				;		LD	A, ' '
 263:				;stars:		CALL	seroutfn
 264:				;		DJNZ	stars
 265:				;
 266:				;		LD	IX, testdcb
 267:				;		CALL	sercr
 268:				;		CALL	DISKV
 269:				;		CALL	dumpdcb
 270:				;
 271:				;		LD	A, GETID
 272:				;		LD	(testdcb), A
 273:				;		CALL	DISKV
 274:				;		CALL	dumpdcb
 275:				;		CALL	dumprid
 276:				;
 277:				;		LD	HL, 512
 278:				;		LD	(testdcb+DSKAUX), HL
 279:				;		LD	A, GETSEC
 280:				;		LD	(testdcb), A
 281:				;
 282:				;		LD	A, '*'
 283:				;		CALL	seroutfn
 284:				;
 285:				;		LD	C, 1
 286:				;secloop1:	LD	B, 18
 287:				;		LD	HL, sectab
 288:				;secloop:	LD	A, (HL)
 289:				;		LD	(testdcb + DSKSEC), A
 290:				;		INC	HL
 291:				;		PUSH	BC
 292:				;		PUSH	HL
 293:				;		CALL	DISKV
 294:				;		POP	HL
 295:				;		POP	BC
 296:				;		DJNZ	secloop
 297:				;		DEC	C
 298:				;		JR	NZ, secloop1
 299:				;
 300:				;		LD	A, '-'
 301:				;		CALL	seroutfn
 302:				;
 303:				;loop:		JR	loop
 304:				;
 305:				;
 306:				
 307:				;
 308:				;dumprid:
 309:				;		LD	HL, (testdcb + DSKPTR)
 310:				;		CALL	sercr
 311:				;		LD	B, 6
 312:				;dumprid1:	LD	A, (HL)
 313:				;		INC	HL
 314:				;		CALL	serhex
 315:				;		CALL	serspace
 316:				;		DJNZ	dumprid1
 317:				;		RET
 318:				;
 319:				;dummy:		XOR	A
 320:				;		CALL	serhex
 321:				;		RET
 322:				;
 323:				;testdcb:	DB	TSTRDY					;DISK OPERATION CODE
 324:				;		DB	1					;DRIVE# (WITH SIDE# IN BIT 7)
 325:				;		DB	0					;TRACK#
 326:				;		DB	1					;SECTOR#
 327:				;		DW	08000h					;READ/WRITE POINTER
 328:				;		DW	0					;AUXILLIARY PARAMETERS (2 BYTES)
 329:				;		DB	0					;OPERATION COMPLETION STATUS
 330:				;
 331:				;sectab:
 332:				;		DB	1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18
 333:				;		DB	1, 3, 5, 7, 9, 11, 13, 15, 17, 2, 4, 6, 8, 10, 12, 14, 16, 18
 334:				;		DB	1, 4, 7, 10, 13, 16, 2, 5, 8, 11, 14, 17, 3, 6, 9, 12, 15, 18
 335:				;		DB	1, 5, 9, 13, 17, 3, 7, 11, 15, 2, 6, 10, 14, 18, 4, 8, 12, 16
 336:				;--------------------------------------------------
 337:				; end of test code
 338:				;--------------------------------------------------
 339:				ENDIF	;SALLYBUILD
 340:				
 341: 1464+10	0149  C362F7  			JP	EMULATOR				;GO INITIALIZE FOR ATARI OR CP/M
 342:				
 343:     -	0001          	IF SALLYBUILD
 344:     -	014C          	SalyLogon:
 345: 1474+13	014C  3233FF  			LD	(RWMAX),A				;DO LESS RETRIES IN ATARI MODE
 346:				
 347: 1487+7	014F  3EC3    			LD	A, 0c3h					;'JP' instruction
 348: 1494+13	0151  3267F1  			LD	(SEL4), A
 349: 1507+10	0154  215D01  			LD	HL, SalySEL4
 350: 1517+16	0157  2268F1  			LD	(SEL4+1), HL
 351:     -	0000          		IF WD1772
 354:					ENDIF
 355: 1533+10	015A  C381F7  			JP	SalyLOGN2
 356:				
 357:     -	0000          		IF WD1772
 366:					ENDIF
 367:				;
 368:				;
 369:				;
 370:     -	015D          	SalySEL4:
 371: 1543+8	015D  CB70    			BIT	6, B					;8" found?
 372: 1551+7+5	015F  2844    			JR	Z, SalySEL4ex				;yes, do nothing
 373:				
 374: 1558+11	0161  C5      			PUSH	BC					;save registers
 375: 1569+11	0162  D5      			PUSH	DE
 376: 1580+11	0163  E5      			PUSH	HL
 377: 1591+15	0164  DDE5    			PUSH	IX
 378:				
 379: 1606+4	0166  78      			LD	A, B					;switch HD on
 380: 1610+8	0167  CBB7    			RES	6, A
 381: 1618+11	0169  D330    			OUT	(LATCH), A
 382:				
 383: 1629+15	016B  DDE5    			PUSH	IX					;load HL with IX
 384: 1644+10	016D  E1      			POP	HL
 385: 1654+10	016E  110C06  			LD	DE, dcb
 386: 1664+10	0171  010900  			LD	BC, 9
 387: 1674+16+5	0174  EDB0    			LDIR						;copy dcb
 388:							
 389: 1690+14	0176  DD210C06			LD	IX, dcb
 390: 1704+10	017A  211506  			LD	HL, id
 391: 1714+16	017D  221006  			LD	(dcb + DSKPTR), HL
 392: 1730+7	0180  3EC0    			LD	A, RIDCMD
 393: 1737+13	0182  32C5FF  			LD	(CMDBYT), A
 394: 1750+7	0185  3E18    			LD	A, 018h					;substitute JR	Z,xx by JR xx
 395: 1757+13	0187  3200F1  			LD	(DISK3 + 031h), A
 396: 1770+7	018A  0606    			LD	B, 6
 397:     -	018C          	SalySEL4A:
 398: 1777+11	018C  C5      			PUSH	BC
 399: 1788+17	018D  CDD5F0  			CALL	SalyDISK3				;DISK3: READ 6 BYTE ID RECORD
 400: 1805+10	0190  C1      			POP	BC
 401: 1815+8+5	0191  10F9    			DJNZ	SalySEL4A
 402:				
 403: 1823+7	0193  3E28    			LD	A, 028h					;reset JR Z,xx
 404: 1830+13	0195  3200F1  			LD	(DISK3 + 031h), A
 405:							
 406: 1843+14	0198  DDE1    			POP	IX
 407: 1857+10	019A  E1      			POP	HL
 408: 1867+10	019B  D1      			POP	DE
 409: 1877+10	019C  C1      			POP	BC
 410: 1887+13	019D  3A1406  			LD	A, (dcb + DSKSTS)			;check disk status
 411: 1900+4	01A0  B7      			OR	A
 412: 1904+7+5	01A1  2002    			JR	NZ, SalySEL4ex				;not zero, no HD
 413: 1911+8	01A3  CBB0    			RES	6, B					;
 414:     -	01A5          	SalySEL4ex:             
 415: 1919+4	01A5  78      			LD	A, B
 416: 1923+7	01A6  1600    			LD	D, 0
 417: 1930+10	01A8  C36AF1  			JP	SEL5
 418:				
 419:				;--------------------------------------------------
 420:				; hook for read directSector if aux1/2 = 0
 421:				;--------------------------------------------------
 422:     -	01AB          	dskrd1:
 423: 1940+7	01AB  3E02    			LD	A, 2
 424: 1947+13	01AD  32FD05  			LD	(direct), A				;clear direct
 425:				
 426: 1960+16	01B0  2AFDC2  			LD	HL, (CFRAME + 2)			;load DAUX1/2, test if zero
 427: 1976+4	01B3  7D      			LD	A, L
 428: 1980+4	01B4  B4      			OR	H
 429: 1984+7+5	01B5  2806    			JR	Z, dskrd2				;if zero, use direct sector number
 430: 1991+17	01B7  CD10FA  			CALL	SECTRAN					;else use original code, call SECTRAN
 431: 2008+10	01BA  C396F9  			JP	SalyDISKRD2				;and procees
 432:				
 433:     -	01BD          	dskrd2:
 434: 2018+14	01BD  DD2198FF			LD	IX, DKIOCB
 435: 2032+19	01C1  DD360000			LD	(IX + DSKOP), TSTRDY
 436:				;		CALL	dumpdcb
 437: 2051+11	01C5  E5      			PUSH	HL
 438: 2062+17	01C6  CD0FF0  			CALL	DISKV
 439: 2079+10	01C9  E1      			POP	HL
 440:				
 441: 2089+17	01CA  CDE101  			CALL	sec2track				;compute sector, track, side from direct sector
 442: 2106+19	01CD  DD360001			LD	(IX + DSKOP), GETSEC
 443:				;		CALL	dumpdcb
 444: 2125+11	01D1  E5      			PUSH	HL
 445: 2136+17	01D2  CD2403  			CALL	dskreadfn				;CALL DISK I/O HANDLER
 446: 2153+10	01D5  E1      			POP	HL
 447:				
 448: 2163+13	01D6  3AA0FF  			LD	A, (DKIOCB+DSKSTS)
 449: 2176+17	01D9  CDE3F9  			CALL	SETSTAT					;call SETSTAT
 450: 2193+7	01DC  1600    			LD	D, 0					;no invert
 451: 2200+10	01DE  C36CF6  			JP	SENDBUFF				;jump SENDBUFF
 452:				
 453:				;--------------------------------------------------
 454:				;compute sector, track, side from direct sector
 455:				;--------------------------------------------------
 456:     -	01E1          	sec2track:
 457: 2210+4	01E1  AF      			XOR	A					;clear carry and a
 458: 2214+7	01E2  06FF    			LD	B, 0ffh					;also b
 459: 2221+16	01E4  2AFB05  			LD	HL, (dsector)				;compute track and side numer
 460: 2237+10	01E7  111200  			LD	DE, 18					;18 secs per track
 461:     -	01EA          	sec2track1:             
 462: 2247+4	01EA  04      			INC	B					;b holds track-number
 463: 2251+15	01EB  ED52    			sbc	HL, DE
 464: 2266+7+5	01ED  30FB    			JR	NC, sec2track1				;subtract 18 as long carry clear
 465: 2273+4	01EF  7D      			LD	A, L
 466: 2277+7	01F0  C613    			ADD	19					;add 19 to get sector number + 1
 467: 2284+13	01F2  329BFF  			LD	(DKIOCB+DSKSEC), A
 468: 2297+8	01F5  CB38    			SRL	B					;divide track by two, (we have two sides)
 469: 2305+4	01F7  78      			LD	A, B
 470: 2309+13	01F8  329AFF  			LD	(DKIOCB+DSKTRK), A
 471: 2322+4	01FB  1F      			RRA						;shift-in side-number from previously lowest-bit
 472: 2326+7	01FC  E680    			AND	080h					;mask out bit 0-6
 473: 2333+10	01FE  2199FF  			LD	HL, DKIOCB+DSKDRV
 474: 2343+15	0201  CBBE    			RES	7, (HL)
 475: 2358+7	0203  B6      			OR	(HL)
 476: 2365+7	0204  77      			LD	(HL), A
 477:							
 478: 2372+17	0205  CD6105  			CALL	serhex
 479: 2389+17	0208  CD4705  			CALL	serspace
 480: 2406+7	020B  3E53    			LD	A, 'S'
 481: 2413+17	020D  CD7A05  			CALL	seroutfn
 482: 2430+13	0210  3A9BFF  			LD	A, (DKIOCB+DSKSEC)
 483: 2443+17	0213  CD6105  			CALL	serhex
 484: 2460+17	0216  CD4705  			CALL	serspace
 485: 2477+7	0219  3E54    			LD	A, 'T'
 486: 2484+17	021B  CD7A05  			CALL	seroutfn
 487: 2501+13	021E  3A9AFF  			LD	A, (DKIOCB+DSKTRK)
 488: 2514+17	0221  CD6105  			CALL	serhex
 489: 2531+17	0224  CD4F05  			CALL	sercr
 490:							
 491: 2548+10	0227  210002  			LD	HL, 512
 492: 2558+16	022A  229EFF  			LD	(DKIOCB+DSKAUX), HL
 493: 2574+10	022D  2100C1  			LD	HL, IOBUFF
 494: 2584+16	0230  229CFF  			LD	(DKIOCB+DSKPTR), HL
 495: 2600+14	0233  DD2198FF			LD	IX, DKIOCB
 496: 2614+10	0237  C9      			RET     
 497:				
 498:				;--------------------------------------------------
 499:				; hook for setDirectSector if aux1/2 = 0
 500:				;--------------------------------------------------
 501: 2624+11	0238  E5      	dwrt:		PUSH	HL
 502: 2635+16	0239  22A9FF  			LD	(LOGSIZ),HL				;SAVE DATA BLOCK LENGTH
 503:				
 504: 2651+16	023C  2AFDC2  			LD	HL, (CFRAME + 2)			;load DAUX1/2
 505: 2667+4	023F  7D      			LD	A, L
 506: 2671+4	0240  B4      			OR	H
 507: 2675+7+5	0241  2804    			JR	Z, dwrta				;if zero, do special stuff
 508:				
 509: 2682+10	0243  E1      			POP	HL					;otherwise continue
 510: 2692+10	0244  C31BF9  			JP	SalyDISKWRT2				;normal
 511:				
 512: 2702+17	0247  CD4AFC  	dwrta:		CALL	SENDACK
 513:				
 514: 2719+10	024A  21FD05  			LD	HL, direct				;direct
 515:				;		LD	A, (HL)
 516:				;		CALL	serhex
 517: 2729+11	024D  35      			DEC	(HL)
 518: 2740+7+5	024E  2813    			JR	Z, dwrtd				;first sector
 519: 2747+10	0250  FA7002  			JP	M, dwrtb				;second sector
 520:				
 521: 2757+7	0253  0640    			LD	B, 64
 522: 2764+8+5	0255  10FE    			DJNZ	$					;wait some time
 523:				
 524: 2772+16	0257  2A00C1  			LD	HL, (IOBUFF)				;save 2-byte sector number (0-xxxx)
 525: 2788+16	025A  22FB05  			LD	(dsector), HL
 526:				
 527: 2804+10	025D  E1      	dwrtc:		POP	HL
 528: 2814+7	025E  3E43    			LD	A, 'C'
 529: 2821+10	0260  C356FC  			JP	SENDCHAR
 530:				
 531: 2831+10	0263  2100C1  	dwrtd:		LD	HL, IOBUFF
 532: 2841+10	0266  1102C3  			LD	DE, IOBUFF+LEN+2
 533: 2851+10	0269  010001  			LD	BC, 0100h				;rec first half
 534: 2861+16+5	026C  EDB0    			LDIR
 535: 2877+12	026E  18ED    			JR	dwrtc
 536:				
 537: 2889+10	0270  3602    	dwrtb:		LD	(HL), 2					;direct = 2
 538:				
 539: 2899+10	0272  210002  			LD	HL, 512					;LOGSIZ 512 bytes in this case
 540: 2909+16	0275  22A9FF  			LD	(LOGSIZ), HL
 541:							
 542: 2925+10	0278  2100C1  			LD	HL, IOBUFF
 543: 2935+10	027B  1100C2  			LD	DE, IOBUFF+0100h
 544: 2945+10	027E  010001  			LD	BC, 0100h
 545: 2955+16+5	0281  EDB0    			LDIR    
 546: 2971+10	0283  2102C3  			LD	HL, IOBUFF+LEN+2
 547: 2981+10	0286  1100C1  			LD	DE, IOBUFF
 548: 2991+10	0289  010001  			LD	BC, 0100h
 549: 3001+16+5	028C  EDB0    			LDIR
 550:				
 551: 3017+17	028E  CDE101  			CALL	sec2track
 552:				
 553: 3034+19	0291  DD360002			LD	(IX + DSKOP), PUTSEC
 554: 3053+17	0295  CD9A02  			CALL	dskwrite
 555:				
 556: 3070+12	0298  18C3    			JR	dwrtc
 557:				;--------------------------------------------------
 558:				; dskwrite: write through sector
 559:				;--------------------------------------------------
 560:     -	029A          	dskwrite:
 561:				;		LD	A, 'W';
 562:				;		CALL	seroutfn
 563:				
 564:				;		JP	DISKV
 565:				
 566: 3082+17	029A  CD0204  			CALL	checktrack
 567: 3099+7+5	029D  2010    			JR	NZ, dskwrite1
 568:				
 569:				;		LD	HL, (LOGSIZ)
 570:				;		CALL	seraddr
 571:				
 572: 3106+17	029F  CDE503  			CALL	compbufadr
 573:				;		CALL	seraddr
 574:				
 575: 3123+4	02A2  EB      			EX	DE, HL
 576: 3127+19	02A3  DD6605  			LD	H, (IX + DSKPTR+1)
 577: 3146+19	02A6  DD6E04  			LD	L, (IX + DSKPTR)
 578: 3165+20	02A9  ED4BA9FF			LD	BC, (LOGSIZ)
 579:				
 580: 3185+16+5	02AD  EDB0    			LDIR
 581:				
 582:     -	02AF          	dskwrite1:
 583: 3201+10	02AF  C30FF0  			JP	DISKV
 584:				
 585:				;--------------------------------------------------
 586:				; Debug routine
 587:				;--------------------------------------------------
 588: 3211+17	02B2  CD7A05  	debug:		CALL	seroutfn
 589: 3228+19	02B5  DD7E01  			LD	A, (IX + DSKDRV)
 590: 3247+17	02B8  CD6105  			CALL	serhex
 591: 3264+7	02BB  3E74    			LD	A, 't'
 592: 3271+17	02BD  CD7A05  			CALL	seroutfn
 593: 3288+19	02C0  DD7E02  			LD	A, (IX + DSKTRK)
 594: 3307+17	02C3  CD6105  			CALL	serhex
 595: 3324+7	02C6  3E73    			LD	A, 's'
 596: 3331+17	02C8  CD7A05  			CALL	seroutfn
 597: 3348+19	02CB  DD7E03  			LD	A, (IX + DSKSEC)
 598: 3367+17	02CE  CD6105  			CALL	serhex
 599: 3384+19	02D1  DD7E05  			LD	A, (IX + DSKPTR+1)
 600: 3403+17	02D4  CD6105  			CALL	serhex
 601: 3420+19	02D7  DD7E04  			LD	A, (IX + DSKPTR)
 602: 3439+17	02DA  CD6105  			CALL	serhex
 603: 3456+19	02DD  DD7E07  			LD	A, (IX + DSKAUX+1)
 604: 3475+17	02E0  CD6105  			CALL	serhex
 605: 3492+19	02E3  DD7E06  			LD	A, (IX + DSKAUX)
 606: 3511+17	02E6  CD6105  			CALL	serhex
 607:				
 608: 3528+17	02E9  CD4705  			CALL	serspace
 609: 3545+13	02EC  3AFEC2  			LD	A, (CFRAME+3)
 610: 3558+17	02EF  CD6105  			CALL	serhex
 611: 3575+13	02F2  3AFDC2  			LD	A, (CFRAME+2)
 612: 3588+17	02F5  CD6105  			CALL	serhex
 613: 3605+17	02F8  CD4705  			CALL	serspace
 614: 3622+19	02FB  FD7E03  			LD	A, (IY+NSECS+1)
 615: 3641+17	02FE  CD6105  			CALL	serhex
 616: 3658+19	0301  FD7E00  			LD	A, (IY+NTRKS)
 617: 3677+17	0304  CD6105  			CALL	serhex
 618:				
 619: 3694+17	0307  CD4F05  			CALL	sercr
 620: 3711+10	030A  C9      			RET
 621:				;
 622:     -	030B          	dumpdcb:
 623: 3721+11	030B  F5      			PUSH	AF
 624: 3732+11	030C  C5      			PUSH	BC
 625: 3743+11	030D  E5      			PUSH	HL
 626:				
 627: 3754+15	030E  DDE5    			PUSH	IX
 628: 3769+10	0310  E1      			POP	HL
 629:				;		CALL	sercr
 630: 3779+7	0311  0609    			LD	B, 9
 631:     -	0313          	dumpdcb1:
 632: 3786+7	0313  7E      			LD	A, (HL)
 633: 3793+6	0314  23      			INC	HL
 634: 3799+17	0315  CD6105  			CALL	serhex
 635: 3816+17	0318  CD4705  			CALL	serspace
 636: 3833+8+5	031B  10F6    			DJNZ	dumpdcb1
 637: 3841+17	031D  CD4F05  			CALL	sercr
 638:				
 639: 3858+10	0320  E1      			POP	HL
 640: 3868+10	0321  C1      			POP	BC
 641: 3878+10	0322  F1      			POP	AF
 642: 3888+10	0323  C9      			RET
 643:				;--------------------------------------------------
 644:				; dskreadfn: cache a track
 645:				;--------------------------------------------------
 646:     -	0324          	dskreadfn:
 647:				;		LD	A, 'R'
 648:				;		CALL	debug
 649:				
 650: 3898+17	0324  CD0204  			CALL	checktrack
 651: 3915+10	0327  CAA303  			JP	Z, match
 652:				;		ld	a, 'N'
 653:				;		CALL	seroutfn
 654: 3925+20	032A  ED530006			LD	(drive), DE				;save new drive and track
 655: 3945+15	032E  DDE5    			PUSH	IX					;save IX
 656:				
 657: 3960+15	0330  DDE5    			PUSH	IX					;load HL with IX
 658: 3975+10	0332  E1      			POP	HL
 659: 3985+10	0333  110C06  			LD	DE, dcb
 660: 3995+10	0336  010900  			LD	BC, 9
 661: 4005+16+5	0339  EDB0    			LDIR						;copy dcb
 662:							
 663: 4021+14	033B  DD210C06			LD	IX, dcb					;load IX with new dcb
 664:							
 665: 4035+13	033F  3A1306  			LD	A, (dcb + DSKAUX+1)			;get sector length high-byte
 666: 4048+7	0342  FE02    			CP	2
 667: 4055+7+5	0344  2020    			JR	NZ, readtrack2				;no MS-DOS disk
 668:				
 669:				
 670: 4062+10	0346  210008  			LD	HL, TRKBUFFER
 671: 4072+10	0349  010112  			LD	BC, 18 * 256 + 1			;b=18, c = 1
 672:				
 673:     -	034C          	readtrack3:
 674: 4082+16	034C  221006  			LD	(dcb + DSKPTR), HL
 675: 4098+19	034F  DD7103  			LD	(IX + DSKSEC),	C
 676:				
 677:				;		CALL	dumpdcb
 678:				
 679: 4117+11	0352  E5      			PUSH	HL
 680: 4128+11	0353  C5      			PUSH	BC
 681: 4139+17	0354  CD0FF0  			CALL	DISKV
 682: 4156+10	0357  C1      			POP	BC
 683: 4166+10	0358  E1      			POP	HL
 684:				;		CALL	dumpsec 
 685: 4176+13	0359  3A1406  			LD	A, (dcb + DSKSTS)			;error occured?
 686: 4189+4	035C  B7      			OR	A
 687: 4193+7+5	035D  2036    			JR	NZ, readtrack4				;yes
 688: 4200+4	035F  24      			INC	H
 689: 4204+4	0360  24      			INC	H
 690: 4208+4	0361  0C      			INC	C
 691: 4212+8+5	0362  10E8    			DJNZ	readtrack3
 692: 4220+12	0364  183B    			JR	readtrack5
 693:				
 694:     -	0366          	readtrack2:
 695: 4232+7	0366  0600    			LD	B, 0					;compute skew-list from media type
 696: 4239+19	0368  FD4E05  			LD	C, (IY + MEDIA)
 697: 4258+10	036B  210406  			LD	HL, skewtab
 698: 4268+11	036E  09      			ADD	HL, BC
 699: 4279+7	036F  7E      			LD	A, (HL)
 700: 4286+6	0370  23      			INC	HL
 701: 4292+7	0371  66      			LD	H, (HL)
 702: 4299+4	0372  6F      			LD	L, A
 703: 4303+19	0373  FD4603  			LD	B, (IY + NSECS+1)
 704:				
 705:     -	0376          	readtrack1:
 706: 4322+16	0376  220206  			LD	(secptr), HL
 707:				
 708:     -	0379          	readtrack:
 709: 4338+16	0379  2A0206  			LD	HL, (secptr)
 710: 4354+7	037C  7E      			LD	A, (HL)
 711: 4361+13	037D  320F06  			LD	(dcb + DSKSEC), A
 712: 4374+6	0380  23      			INC	HL
 713: 4380+16	0381  220206  			LD	(secptr), HL
 714:				
 715: 4396+11	0384  C5      			PUSH	BC
 716: 4407+17	0385  CDE503  			CALL	compbufadr
 717: 4424+16	0388  221006  			LD	(dcb + DSKPTR), HL
 718: 4440+17	038B  CD0FF0  			CALL	DISKV
 719: 4457+10	038E  C1      			POP	BC
 720:				
 721:				;		IN	A,(TRKREG)
 722:				;		CALL	serhex
 723:				;		IN	A,(SECREG)
 724:				;		CALL	serhex
 725: 4467+13	038F  3A1406  			LD	A, (dcb + DSKSTS)			;error occured?
 726:				;		CALL	serhex
 727: 4480+4	0392  B7      			OR	A
 728: 4484+7+5	0393  280A    			JR	Z, readtrack6				;no
 729:     -	0395          	readtrack4:             
 730: 4491+10	0395  21FFFF  			LD	HL, 0ffffh
 731: 4501+16	0398  220006  			LD	(drive), HL
 732: 4517+14	039B  DDE1    			POP	IX					;yes, store in original dcb
 733: 4531+12	039D  181E    			JR	match2
 734:     -	039F          	readtrack6:             
 735: 4543+8+5	039F  10D8    			DJNZ	readtrack
 736:     -	03A1          	readtrack5:
 737: 4551+14	03A1  DDE1    			POP	IX
 738:				
 739:     -	03A3          	match:
 740:				;		ld	a, 'M'
 741:				;		CALL	seroutfn
 742:						
 743: 4565+17	03A3  CDE503  			CALL	compbufadr
 744: 4582+19	03A6  DD5605  			LD	D, (IX + DSKPTR+1)
 745: 4601+19	03A9  DD5E04  			LD	E, (IX + DSKPTR)
 746: 4620+20	03AC  ED4BA9FF			LD	BC, (LOGSIZ)
 747: 4640+13	03B0  3A1306  			LD	A, (dcb + DSKAUX+1)			;get sector length high-byte
 748: 4653+7	03B3  FE02    			CP	2
 749: 4660+7+5	03B5  2003    			JR	NZ, match1
 750: 4667+10	03B7  010002  			LD	BC, 512
 751:     -	03BA          	match1:
 752: 4677+16+5	03BA  EDB0    			LDIR
 753:				
 754: 4693+4	03BC  AF      			XOR	A
 755:     -	03BD          	match2:
 756: 4697+19	03BD  DD7708  			LD	(IX + DSKSTS), A
 757:				
 758:     -	0000          		IF	WD1772
 761:					ENDIF
 762: 4716+10	03C0  C33CF0  			JP	ACTIVON
 763:				
 764:				
 765:				;--------------------------------------------------
 766:				; dump 512 bytes at HL
 767:				;--------------------------------------------------
 768:     -	03C3          	dumpsec:
 769: 4726+11	03C3  C5      			PUSH	BC
 770: 4737+11	03C4  E5      			PUSH	HL
 771: 4748+17	03C5  CD5705  			CALL	seraddr
 772: 4765+17	03C8  CD4F05  			CALL	sercr
 773: 4782+10	03CB  010002  			LD	BC, 512
 774:     -	03CE          	match3a:
 775: 4792+7	03CE  7E      			LD	A, (HL)
 776: 4799+17	03CF  CD6105  			CALL	serhex
 777: 4816+4	03D2  78      			LD	A, B
 778: 4820+7	03D3  E60F    			AND	15
 779: 4827+7+5	03D5  2003    			JR	NZ, match3
 780: 4834+17	03D7  CD4F05  			CALL	sercr
 781:     -	03DA          	match3:
 782: 4851+6	03DA  23      			INC	HL
 783: 4857+4	03DB  0D      			DEC	C
 784: 4861+7+5	03DC  20F0    			JR	NZ, match3a
 785: 4868+8+5	03DE  10EE    			DJNZ	match3a
 786: 4876+10	03E0  E1      			POP	HL
 787: 4886+10	03E1  C1      			POP	BC
 788: 4896+10	03E2  C34F05  			JP	sercr
 789:				
 790:				;--------------------------------------------------
 791:				; HL = TRKBUF + DSKSEC * (128/256/512)
 792:				;--------------------------------------------------
 793:     -	03E5          	compbufadr:
 794: 4906+10	03E5  210008  			LD	HL, TRKBUFFER
 795: 4916+19	03E8  DD4603  			LD	B, (IX + DSKSEC)
 796: 4935+4	03EB  05      			DEC	B
 797: 4939+7	03EC  0E00    			LD	C, 0
 798: 4946+13	03EE  3A1306  			LD	A, (dcb + DSKAUX + 1)			;load seclen highbyte
 799: 4959+4	03F1  B7      			OR	A
 800: 4963+7+5	03F2  2808    			JR	Z, compbufadr2				;if zero, assume 128 bytes length
 801: 4970+7	03F4  FE01    			CP	1
 802: 4977+7+5	03F6  2808    			JR	Z, compbufadr1				;if 1, assume 256 bytes
 803: 4984+8	03F8  CB20    			SLA	B					;512 bytes
 804: 4992+12	03FA  1804    			JR	compbufadr1
 805:     -	03FC          	compbufadr2:
 806: 5004+8	03FC  CB38    			SRL	B					;128 bytes
 807: 5012+8	03FE  CB19    			RR	C
 808:     -	0400          	compbufadr1:
 809: 5020+11	0400  09      			ADD	HL, BC
 810: 5031+10	0401  C9      			RET
 811:				
 812:     -	0402          	checktrack:
 813: 5041+16	0402  2A0006  			LD	HL, (drive)				;load
 814: 5057+19	0405  DD5602  			LD	D, (IX + DSKTRK)			;high
 815: 5076+19	0408  DD5E01  			LD	E, (IX + DSKDRV)			;low
 816: 5095+4	040B  B7      			OR	A					;clear carry
 817: 5099+15	040C  ED52    			sbc	HL, DE
 818: 5114+10	040E  C9      			RET
 819:				
 820:				;--------------------------------------------------
 821:				; get Pokeydivisor command '?'
 822:				;--------------------------------------------------
 823:     -	040F          	getspeed:
 824:				;		LD	A, '?'
 825:				;		CALL	seroutfn
 826:				
 827: 5124+17	040F  CD28FC  			CALL	DRVINDEX				;POINT IY TO DRIVE'S DATA AREA
 828: 5141+5+6	0412  D8      			RET	C					;EXIT IF NOT A DRIVE IN OUR BOX
 829:				
 830:				;		CALL	HASPARMS
 831:				;		RET	Z					;EXIT IF DISK PARAMS NOT KNOWN
 832:				
 833: 5146+17	0413  CD4AFC  			CALL	SENDACK					;SEND 'ACK' FOR COMMAND FRAME
 834:				
 835: 5163+10	0416  21FFC2  			LD	HL, IOBUFF+LEN-1
 836:				
 837:     -	0001          		IF NOHIGHSPEEDSIO <> 1
 838: 5173+7	0419  3E08    			LD	A, SIOFAST
 839: 5180+7	041B  77      			LD	(HL), A
 840: 5187+13	041C  32FF05  			LD	(hispeed), A
 841:					ELSE
 843:					ENDIF	; HIGHSPEEDSIO
 844:				
 845: 5200+10	041F  114300  			LD	DE, 'C'
 846: 5210+10	0422  C36CF6  			JP	SENDBUFF				;SEND 'C' AND PARAMS DATA FRAME
 847:				
 848:				
 849:				;--------------------------------------------------
 850:				; cmdwaitfn
 851:				;--------------------------------------------------
 852:     -	0425          	cmdwaitfn:
 853: 5220+13	0425  3A55FF  			LD	A, (CMDFLG)
 854: 5233+4	0428  B7      			OR	A					;SEE IF COMMAND FRAME HAS ARRIVED
 855: 5237+5+6	0429  C8      			RET	Z					;EXIT IF NOTHING HAS HAPPENED
 856:				
 857:				;		CALL	sercmd					;5-byte command frame
 858:				
 859: 5242+13	042A  3A55FF  			LD	A, (CMDFLG)
 860: 5255+7	042D  FE01    			CP	1
 861:				
 862: 5262+4	042F  F3      			DI						;ELSE RESET INTERRUPT AND START AGAIN
 863: 5266+7	0430  3E03    			LD	A, CTC_D1_SW_RST + CTC_D0_CONTROL	;SOFTWARE RESET CTC0
 864: 5273+11	0432  D380    			OUT	(CTC0),A				;PERFORM THE RESET
 865: 5284+4	0434  FB      			EI
 866:				
 867: 5288+10	0435  CAF3F7  			JP	Z, CMDL4				;good cmd-frame
 868:				
 869: 5298+17	0438  CDA004  			CALL	togglebaud
 870: 5315+10	043B  C309F8  			JP	CMDL5
 871:				
 872:				
 873:				
 874:				;--------------------------------------------------
 875:				; xmitbuffn
 876:				;--------------------------------------------------
 877:     -	043E          	xmitbuffn:
 878: 5325+4	043E  F3      			DI
 879: 5329+13	043F  3AFE05  			LD	A, (pokeydiv)				;is fast?
 880: 5342+7	0442  FE28    			CP	SIONORMAL
 881: 5349+7+5	0444  2006    			JR	NZ, xmitfast				;yes, jump
 882: 5356+10	0446  0119F7  			LD	BC, STARBIT
 883: 5366+10	0449  C388F6  			JP	SalyXMITBUF
 884:				
 885:				
 886:     -	044C          	xmitfast:
 887: 5376+7	044C  3E07    			LD	A, CTC_D6_MODE_TIM + CTC_D2_TCNEXT + CTC_D1_SW_RST + CTC_D0_CONTROL
 888: 5383+11	044E  D381    			OUT	(CTC1), A				;SOFWARE RESET CTC1
 889: 5394+7	0450  3E01    			LD	A, 1					;TIME CONSTANT OF 1 - 4uS pulses (1/4Mhz)*16
 890: 5401+11	0452  D381    			OUT	(CTC1), A
 891:				
 892:     -	0454          	xmitfast1:
 893: 5412+7	0454  7E      			LD	A, (HL)					;7
 894: 5419+6	0455  23      			INC	HL					;6
 895: 5425+4	0456  AA      			XOR	D					;4
 896: 5429+4	0457  4F      			LD	C, A					;4
 897: 5433+4	0458  83      			ADD	A, E					;4
 898: 5437+7	0459  CE00    			ADC	0					;7
 899: 5444+4	045B  5F      			LD	E, A					;4
 900: 5448+17	045C  CD6A04  			CALL	fastsend				;17 send byte in c
 901: 5465+4	045F  7C      			LD	A, H					;4
 902: 5469+7	0460  FEC3    			CP	HIGH (IOBUFF+LEN)			;7
 903: 5476+7+5	0462  38F0    			JR	C, xmitfast1				;12/7 loop if buffer end not reached
 904:				
 905: 5483+7	0464  3E03    			LD	A, CTC_D1_SW_RST + CTC_D0_CONTROL
 906: 5490+11	0466  D381    			OUT	(CTC1), A				;SOFWARE RESET CTC1
 907: 5501+4	0468  FB      			EI
 908: 5505+10	0469  C9      			RET
 909:				
 910:     -	046A          	fastsend:
 911: 5515+4	046A  AF      			XOR	A
 912: 5519+11	046B  D350    			OUT	(ATROUT), A
 913:				
 914: 5530+15	046D  DDE5    			PUSH	IX					;15
 915: 5545+14	046F  DDE1    			POP	IX					;14
 916: 5559+4	0471  79      			LD	A,	C				;4
 917: 5563+7	0472  0608    			LD	B, 8					;7
 918: 5570+6	0474  03      			INC	BC					;6
 919: 5576+4	0475  00      			NOP						;4
 920:				
 921:     -	0476          	fastsend1:
 922: 5580+4	0476  00      			NOP						;4
 923: 5584+7	0477  FE01    			CP	1					;7
 924: 5591+11	0479  D350    			OUT	(ATROUT), A				;11
 925: 5602+4	047B  0F      			RRCA						;4
 926: 5606+15	047C  DDE5    			PUSH	IX					;15
 927: 5621+14	047E  DDE1    			POP	IX					;14
 928: 5635+8+5	0480  10F4    			DJNZ	fastsend1				;13 / 8
 929:				
 930: 5643+9	0482  ED5F    			LD	A, r					;9
 931: 5652+7	0484  3E01    			LD	A, 1					;7
 932: 5659+11	0486  D350    			OUT	(ATROUT), A				;11
 933: 5670+10	0488  C9      			RET						;10
 934:				
 935:				;--------------------------------------------------
 936:				; rxblck
 937:				;--------------------------------------------------
 938:     -	0489          	rxblck:
 939: 5680+13	0489  3AFE05  			LD	A, (pokeydiv)				;is fast?
 940: 5693+7	048C  FE28    			CP	SIONORMAL
 941: 5700+10	048E  CA9A04  			JP	Z, rxblck1
 942:				
 943: 5710+17	0491  CDB404  			CALL	fastrecv				;yes, fast speed
 944: 5727+7	0494  3E03    			LD	A, CTC_D1_SW_RST + CTC_D0_CONTROL
 945: 5734+11	0496  D383    			OUT	(CTC3), A				;SOFWARE RESET CTC3
 946: 5745+4	0498  4A      			LD	C, D					;checksum in c
 947: 5749+10	0499  C9      			RET
 948:				
 949:     -	049A          	rxblck1:
 950: 5759+10	049A  010000  			LD	BC, 0					;no, normal speed
 951: 5769+10	049D  C3DCF6  			JP	SalyRXBLOCK
 952:				
 953:				;--------------------------------------------------
 954:				; togglebaud
 955:				;--------------------------------------------------
 956:     -	04A0          	togglebaud:
 957:				;		LD	A, (hispeed)
 958:				;		OR	A
 959:				;		RET	Z
 960:				
 961: 5779+13	04A0  3AFE05  			LD	A, (pokeydiv)
 962: 5792+7	04A3  FE28    			CP	SIONORMAL
 963: 5799+7	04A5  3E08    			LD	A, SIOFAST
 964: 5806+7+5	04A7  2802    			JR	Z, togglebaud1
 965: 5813+7	04A9  3E28    			LD	A, SIONORMAL
 966:     -	04AB          	togglebaud1:
 967: 5820+13	04AB  32FE05  			LD	(pokeydiv), A
 968: 5833+10	04AE  C9      			RET
 969:				
 970:				;--------------------------------------------------
 971:				; set 4ms watchdog
 972:				;--------------------------------------------------
 973:     -	04AF          	irq4ms:
 974: 5843+10	04AF  F1      			POP	AF					;pop irq-addr
 975: 5853+4	04B0  B7      			OR	A					;clear carry
 976:     -	04B1          	irq4ms1:
 977: 5857+4	04B1  FB      			EI
 978: 5861+14	04B2  ED4D    			RETI
 979:				
 980:				;--------------------------------------------------
 981:				; SIO receive 57600 baud
 982:				;--------------------------------------------------
 983:     -	04B4          	fastrecv:
 984: 5875+4	04B4  F3      			DI
 985: 5879+10	04B5  01AF04  			LD	BC, irq4ms
 986: 5889+20	04B8  ED4316FF			LD	(CTCVEC+6),bc				;SET VECTOR TO irq4ms ROUTINE
 987: 5909+10	04BC  018300  			LD	BC, CTC3				;CLEAR B, LOAD C WITH ADDRESS OF CTC3
 988: 5919+10	04BF  11A700  			LD	DE, CTC_D7_INT_EN + CTC_D6_MODE_TIM + CTC_D5_PRESC256 + CTC_D2_TCNEXT + CTC_D1_SW_RST + CTC_D0_CONTROL
 989: 5929+12	04C2  ED59    			OUT	(C), E					;12 PUT CTC3 IN TIMER MODE, PRESCALE 256
 990: 5941+12	04C4  ED49    			OUT	(C), C					;TIME CONSTANT OF 131 (CTC3 ADDRESS WHICH IS 083h)? 8.38ms? MAYBE MEANT , B
 991: 5953+4	04C6  FB      			EI
 992:				
 993:     -	04C7          	fastrecv1:              
 994: 5957+11	04C7  DB70    			IN	A, (ATARI)				;11
 995: 5968+4	04C9  17      			RLA						;4
 996: 5972+10	04CA  DAC704  			JP	C, fastrecv1				;10	NEW BYTE IS COMING IF START BIT LOW
 997:												;14-25 / 7
 998: 5982+4	04CD  7A      			LD	A, D					;4
 999: 5986+4	04CE  80      			ADD	A, B					;4
1000: 5990+7	04CF  CE00    			ADC	A, 0					;7 ACCUMULATE CHECKSUM ATARI STYLE
1001: 5997+4	04D1  57      			LD	D, A					;4
1002:								
1003: 6001+7	04D2  067F    			LD	B, 07fh					;7
1004: 6008+10	04D4  C3D904  			JP	fastrecv2a				;10 = 50
1005:				;
1006:				; SERIAL->PARALLEL CONVERSION AT 17,36 MICROSECONDS PER BIT
1007:				;
1008:     -	04D7          	fastrecv2:
1009: 6018+11	04D7  F5      			PUSH	AF					;11
1010: 6029+10	04D8  F1      			POP	AF					;10
1011:     -	04D9          	fastrecv2a:
1012: 6039+7	04D9  7E      			LD	A, (HL)					;7
1013: 6046+7	04DA  7E      			LD	A, (HL)					;7
1014:				
1015: 6053+11	04DB  DB70    			IN	A, (ATARI)				;11 CYCLES
1016: 6064+4	04DD  17      			RLA						; 4 CYCLES
1017: 6068+8	04DE  CB18    			RR	B					; 8 CYCLES
1018: 6076+7+5	04E0  38F5    			JR	C, fastrecv2				;12/7 = 70 / 65 cycles
1019:				
1020: 6083+7	04E2  70      			LD	(HL), B					;7 THEN STORE IN MEMORY BUFFER @HL
1021: 6090+6	04E3  23      			INC	HL					;6
1022: 6096+4	04E4  7C      			LD	A, H					;4
1023: 6100+7	04E5  FEC3    			CP	HIGH (IOBUFF+LEN)			;7
1024: 6107+4	04E7  3F      			CCF						;4
1025: 6111+5+6	04E8  D8      			RET	C					;5 RETURN WITH CARRY SET IF BUFFER FILLED
1026:				
1027: 6116+12	04E9  ED59    			OUT	(C), E					;12 PUT CTC3 IN TIMER MODE, PRESCALE 256
1028: 6128+12	04EB  ED49    			OUT	(C), C					;12 COUNT MOD 256 - ACTUALLY C = 131 (CTC3 ADDRESS WHICH IS 083h)? 8.38ms? MAYBE MEANT , B
1029:				
1030: 6140+10	04ED  C3C704  			JP	fastrecv1				;10
1031:				
1032:				
1033:				;serdumpcpl:
1034:				;		PUSH	HL
1035:				;		PUSH	AF
1036:				;		PUSH	BC
1037:				;		PUSH	DE
1038:				;		LD	D, 255
1039:				;		JR	serdump1
1040:				
1041: 6150+13	04F0  3AC5FF  	diskiodebug:	LD	a, (CMDBYT)
1042: 6163+7	04F3  FE80    			CP	080h
1043: 6170+7+5	04F5  2028    			JR	NZ, diskiodebug1
1044:				
1045: 6177+17	04F7  CD4F05  			CALL	sercr
1046:						
1047: 6194+19	04FA  DD7E03  			LD	A,(IX+DSKSEC)	
1048: 6213+11	04FD  D342    			OUT	(SECREG),A	
1049: 6224+19	04FF  DD7E02  			LD	A,(IX+DSKTRK)	
1050: 6243+11	0502  D341    			OUT	(TRKREG),A	
1051:				
1052: 6254+11	0504  DB41    			in	a, (TRKREG)
1053: 6265+17	0506  CD6105  			CALL	serhex
1054: 6282+11	0509  DB42    			in	a, (SECREG)
1055: 6293+17	050B  CD6105  			CALL	serhex		
1056: 6310+13	050E  3AC5FF  			LD	A,(CMDBYT)				
1057: 6323+11	0511  D340    			OUT	(CMDREG),A				;START 1791 WORKING ON W/R COMMAND
1058:				
1059: 6334+11	0513  DB40    	dbgRWBUSY:	IN	A,(STSREG)
1060: 6345+8	0515  CB47    			BIT	0,A
1061: 6353+7+5	0517  20FA    			JR	NZ,dbgRWBUSY				;LOOP TILL 1797 BUSY BIT GOES AWAY
1062: 6360+17	0519  CD6105  			CALL	serhex
1063: 6377+17	051C  CD4F05  			CALL	sercr
1064:					
1065: 6394+19	051F  DD7E03  	diskiodebug1:	LD	A,(IX+DSKSEC)
1066: 6413+10	0522  C3F1F0  			JP	DISK4+3
1067:						
1068:				;--------------------------------------------------
1069:				; RS232 sercmd
1070:				;--------------------------------------------------
1071:     -	0525          	sercmd:
1072: 6423+11	0525  E5      			PUSH	HL
1073: 6434+10	0526  21FBC2  			LD	HL, CFRAME
1074: 6444+17	0529  CD4F05  			CALL	sercr
1075: 6461+12	052C  1801    			JR	serdump2
1076:				
1077:				;--------------------------------------------------
1078:				; RS232 dump
1079:				;--------------------------------------------------
1080:     -	052E          	serdump:
1081: 6473+11	052E  E5      			PUSH	HL
1082:     -	052F          	serdump2:
1083: 6484+11	052F  F5      			PUSH	AF
1084: 6495+11	0530  C5      			PUSH	BC
1085: 6506+11	0531  D5      			PUSH	DE
1086:				
1087: 6517+7	0532  1600    			LD	D, 0
1088:				
1089:     -	0534          	serdump1:
1090: 6524+7	0534  7E      			LD	A, (HL)
1091: 6531+4	0535  AA      			XOR	D
1092: 6535+17	0536  CD6105  			CALL	serhex
1093: 6552+17	0539  CD4705  			CALL	serspace
1094: 6569+6	053C  23      			INC	HL
1095: 6575+4	053D  7C      			LD	A, H
1096: 6579+7	053E  FEC3    			CP	A, 0c3h
1097: 6586+7+5	0540  38F2    			JR	C, serdump1
1098:				
1099: 6593+10	0542  D1      			POP	DE
1100: 6603+10	0543  C1      			POP	BC
1101: 6613+10	0544  F1      			POP	AF
1102: 6623+10	0545  E1      			POP	HL
1103: 6633+10	0546  C9      			RET
1104:				
1105:				;--------------------------------------------------
1106:				; RS232 <space>
1107:				;--------------------------------------------------
1108:     -	0547          	serspace:
1109: 6643+11	0547  F5      			PUSH	AF
1110: 6654+7	0548  3E20    			LD	A, ' '
1111: 6661+17	054A  CD7A05  			CALL	seroutfn
1112: 6678+10	054D  F1      			POP	AF
1113: 6688+10	054E  C9      			RET
1114:				
1115:				;--------------------------------------------------
1116:				; RS232 <CR>
1117:				;--------------------------------------------------
1118:     -	054F          	sercr:
1119: 6698+11	054F  F5      			PUSH	AF
1120: 6709+7	0550  3E0D    			LD	A, CR
1121: 6716+17	0552  CD7A05  			CALL	seroutfn
1122: 6733+10	0555  F1      			POP	AF
1123: 6743+10	0556  C9      			RET
1124:				
1125:				;--------------------------------------------------
1126:				; RS232 output HL in hex
1127:				;--------------------------------------------------
1128:     -	0557          	seraddr:
1129: 6753+4	0557  7C      			LD	A, H
1130: 6757+17	0558  CD6105  			CALL	serhex
1131: 6774+4	055B  7D      			LD	A, L
1132: 6778+17	055C  CD6105  			CALL	serhex
1133: 6795+12	055F  18E6    			JR	serspace
1134:				;--------------------------------------------------
1135:				; RS232 output A in hex
1136:				;--------------------------------------------------
1137:     -	0561          	serhex:
1138: 6807+11	0561  F5      			PUSH	AF
1139: 6818+11	0562  F5      			PUSH	AF
1140: 6829+4	0563  0F      			RRCA
1141: 6833+4	0564  0F      			RRCA
1142: 6837+4	0565  0F      			RRCA
1143: 6841+4	0566  0F      			RRCA
1144: 6845+17	0567  CD7005  			CALL	sernib
1145: 6862+10	056A  F1      			POP	AF
1146: 6872+17	056B  CD7005  			CALL	sernib
1147: 6889+10	056E  F1      			POP	AF
1148: 6899+10	056F  C9      			RET
1149:				
1150:     -	0570          	sernib:
1151: 6909+7	0570  E60F    			AND	0fh
1152: 6916+7	0572  C630    			ADD	'0'
1153: 6923+7	0574  FE3A    			CP	'9' + 1
1154: 6930+7+5	0576  3802    			JR	C, sernib1
1155: 6937+7	0578  C607    			ADD	7
1156:     -	057A          	sernib1:
1157:				;--------------------------------------------------
1158:				; RS232 out	208 T-States
1159:				;--------------------------------------------------
1160:     -	057A          	seroutfn:
1161: 6944+11	057A  F5      			PUSH	AF
1162: 6955+11	057B  C5      			PUSH	BC
1163: 6966+4	057C  47      			LD	B, A
1164: 6970+4	057D  AF      			XOR	A
1165: 6974+4	057E  F3      			DI
1166: 6978+11	057F  D351    			OUT	(SEROUT), A				;startbit
1167: 6989+17	0581  CDB105  			CALL	time19600				;17
1168:					
1169: 7006+4	0584  78      			LD	A, B	
1170: 7010+7	0585  0608    			LD	B, 8					;7
1171:     -	0587          	serout1:	
1172: 7017+11	0587  D351    			OUT	(SEROUT), A				;11
1173: 7028+17	0589  CDB105  			CALL	time19600				;17
1174: 7045+4	058C  0F      			RRCA						;4
1175: 7049+8+5	058D  10F8    			DJNZ	serout1					;8
1176: 7057+4	058F  FB      			EI	
1177: 7061+7	0590  3E01    			LD	A, 1					;7
1178: 7068+11	0592  D351    			OUT	(SEROUT), A				;11
1179: 7079+17	0594  CDB105  			CALL	time19600				;17
1180:				
1181: 7096+10	0597  C1      			POP	BC
1182: 7106+10	0598  F1      			POP	AF
1183: 7116+10	0599  C9      			RET
1184:				
1185:				
1186:				;--------------------------------------------------
1187:				; RS232 in	208 T-States
1188:				;--------------------------------------------------
1189:     -	059A          	serinfn:
1190: 7126+11	059A  C5      			PUSH	BC
1191:     -	059B          	serin2:
1192: 7137+11	059B  DB50    			IN	A, (SERIN)
1193: 7148+4	059D  07      			RLCA
1194: 7152+7+5	059E  38FB    			JR	C, serin2
1195:				
1196: 7159+19	05A0  E3      			EX	(SP), HL				;19, 4.75uS
1197: 7178+19	05A1  E3      			EX	(SP), HL				;19  9uS
1198:				
1199: 7197+7	05A2  0680    			LD	B, 80h
1200:     -	05A4          	serin1:
1201: 7204+17	05A4  CDB105  			CALL	time19600
1202: 7221+11	05A7  DB50    			IN	A, (SERIN)
1203: 7232+4	05A9  07      			RLCA
1204: 7236+8	05AA  CB18    			RR	B
1205: 7244+7+5	05AC  30F6    			JR	NC, serin1
1206:				
1207: 7251+4	05AE  78      			LD	A, B
1208: 7255+10	05AF  C1      			POP	BC
1209: 7265+10	05B0  C9      			RET
1210:				
1211:     -	05B1          	time19600:
1212: 7275+7	05B1  0E09    			LD	C, 9					;4
1213:     -	05B3          	time19600a:
1214: 7282+4	05B3  0D      			DEC	C					;4
1215: 7286+7+5	05B4  20FD    			JR	NZ, time19600a				;12/7
1216: 7293+10	05B6  C9      			RET						;10
1217:				
1218:     -	05B7          	SalyCMDOUT:
1219: 7303+11	05B7  D340    			OUT	(CMDREG),A				;OUTPUT DISK CONTROLLER COMMAND BYTE
1220:     -	05B9          	slyCMDT1:
1221: 7314+7	05B9  3E0E    			LD	A,14
1222:     -	05BB          	slyCMDT2:
1223: 7321+4	05BB  3D      			DEC	A
1224: 7325+7+5	05BC  20FD    			JR	NZ,slyCMDT2				;DELAY 56 MICROSECONDS
1225:     -	05BE          	CMDT3:
1226: 7332+11	05BE  DB40    			IN	A, (STSREG)
1227: 7343+8	05C0  CB47    			BIT	0, A
1228: 7351+7+5	05C2  20F5    			JR	NZ, slyCMDT1
1229: 7358+10	05C4  C9      			RET
1230:						ENDIF	; SALLYBUILD
1231:				
1232:				;--------------------------------------------------
1233:				; 11 times port:value
1234:				;--------------------------------------------------
1235:     -	05C5  5001    	INITAB:		DEFB	ATROUT,1				;SET ATART OUTPUT TO MARK STATE
1236:     -	05C7  5101    			DEFB	SEROUT,1				;SET RS232 OUTPUT TO MARK STATE
1237:     -	05C9  8003    			DEFB	CTC0, CTC_D1_SW_RST + CTC_D0_CONTROL	;SOFTWARE RESET CTC0
1238:     -	05CB  8010    			DEFB	CTC0, low ctcvec			;SET CTC0 BASE INTERRUPT VECTOR
1239:     -	05CD  8107    			DEFB	CTC1, CTC_D6_MODE_TIM + CTC_D2_TCNEXT + CTC_D1_SW_RST + CTC_D0_CONTROL	;PUT CTC1 IN TIMER MODE + SET TIME CONSTANT
1240:     -	05CF  8101    			DEFB	CTC1, 1					;CTC1 TIME CONSTANT (DIVIDE BY 1 - 6.5us)
1241:     -	05D1  8203    			DEFB	CTC2, CTC_D1_SW_RST + CTC_D0_CONTROL	;SOFTWARE RESET CTC2
1242:     -	05D3  8303    			DEFB	CTC3, CTC_D1_SW_RST + CTC_D0_CONTROL	;SOFTWARE RESET CTC3
1243:     -	05D5  5701    			DEFB	CDMUX, 1				;SET MUX TO PASS ATARI DATA
1244:     -	0000          		IF WD1772
1247:					ELSE
1248:     -	05D7  3000    			DEFB	LATCH,00000000B				;ZEROS TO DRIVE SELECT LATCH
1249:     -	05D9  40D0    			DEFB	CMDREG,FINCMD				;FORCE DISK CONTROLLER INTERRUPT
1250:					ENDIF	;WD1772
1251:     -	0016          	ITBLEN		EQU	$-INITAB
1252:				;
1253:				;
1254:				;
1255:				;
1256:				;
1257:				;
1258:				
1259:     -	0001          	IF SALLYBUILD
1260:				;--------------------------------------------------
1261:				; variables and data structure
1262:				;--------------------------------------------------
1263:				;
1264:				; 32 bytes for dsktb
1265:				; 7 commands copied in from DISKTAB, 3x7=21
1266:				; 2 commands added '?' and 0xDD (setDirectSector)
1267:				;
1268:     -	05DB  00000000	dsktb:		DW	0, 0, 0, 0, 0, 0, 0, 0
	              00000000
	              00000000
	              00000000
1269:     -	05EB  00000000			DW	0, 0, 0, 0, 0, 0, 0, 0
	              00000000
	              00000000
	              00000000
1270:				
1271:				;
1272:				; direct MSDOS sector for each drive
1273:				;
1274:     -	05FB  0000    	dsector:	DB	0, 0
1275:     -	05FD  00      	direct:		DB	0
1276:				
1277:     -	05FE  28      	pokeydiv:	DB	SIONORMAL
1278:     -	05FF  00      	hispeed:	DB	0
1279:				
1280:     -	0600  FF      	drive:		DB	255
1281:     -	0601  FF      	thetrack:	DB	255
1282:     -	0602  0000    	secptr:		DW	0
1283:				
1284:     -	0604  56FE    	skewtab:	DW	SKEWSD
1285:     -	0606  C8FE    			DW	SKEW13
1286:     -	0608  68FE    			DW	SKEWDD
1287:     -	060A  E2FE    			DW	SKEW17
1288:				
1289:     -	060C  00      	dcb:		DB	0					;DISK OPERATION CODE
1290:     -	060D  00      			DB	0					;DRIVE# (WITH SIDE# IN BIT 7)
1291:     -	060E  00      			DB	0					;TRACK#
1292:     -	060F  00      			DB	0					;SECTOR#
1293:     -	0610  0000    			DW	0					;READ/WRITE POINTER
1294:     -	0612  0000    			DW	0					;AUXILLIARY PARAMETERS (2 BYTES)
1295:     -	0614  00      			DB	0					;OPERATION COMPLETION STATUS
1296:				
1297:     -	0615  00000000	id:		DW	0, 0, 0
	              0000
1298:				
1299:				ENDIF	;SALLYBUILD
1300:				;
1301:				;
**** ..\src\ROM.MAC ****
  12:				;
  13:				;	PHASE TO RAM-RESIDENT PART OF PROGRAM
  14:				;
  15:     -	061B          	MONCOPY	EQU	$
  16:     -	F000          		.PHASE	0F000H
  17:				;
  18:				;
  19:     -	F000          	MONITOR	EQU	$
  20: 7368+10	F000  C31BF0  			JP	RESTART
  21: 7378+10	F003  C3DEF3  			JP	MINIMON		;MONITOR WARM ENTRY POINT
  22: 7388+10	F006  C335F6  	CSV:	JP	CONST		;CONSOLE STATUS
  23: 7398+10	F009  C340F6  	CIV:	JP	CONIN		;CONSOLE INPUT
  24: 7408+10	F00C  C350F6  	COV:	JP	CONOUT		;CONSOLE OUTPUT
  25: 7418+10	F00F  C322F0  	DISKV:	JP	DISKDVR		;DISK HANDLER
  26: 7428+10	F012  C3DCF4  	LISTV:	JP	CENTOUT		;PARALLEL PRINTER OUT
  27: 7438+10	F015  C3EBF4  			JP	CENTRDY		;PARALLEL PRINTER STATUS
  28: 7448+10	F018  C315F6  	RENEW:	JP	CINIT2		;CONSOLE PORT INITAILZATION
  29:				;
  30:     -	F01B          	RESTART:
  31: 7458+4	F01B  F3      			DI
  32: 7462+4	F01C  AF      			XOR	A
  33: 7466+11	F01D  D352    			OUT	(BANKSW),A
  34: 7477+10	F01F  C30000  			JP	0			;JUMP TO ROM
  35:				;
  36:				;
  37:				;
  38:					INCLUDE	DISKIO.MAC
**** ..\src\DISKIO.MAC ****
   1:				;********************************************************
   2:				;*							*
   3:				;*	DISK I/O DRIVER FOR ATARI BOX.	18-FEB-82	*
   4:				;*							*
   5:				;********************************************************
   6:				;
   7:				;
   8:				;	EQUATES FOR DISK CONTROLLER PORTS AND COMMAND CODES
   9:				;
  10:     -	0040          	STSREG	EQU	WD179X+0	;STATUS REGISTER
  11:     -	0040          	CMDREG	EQU	WD179X+0	;COMMAND REGISTER
  12:     -	0041          	TRKREG	EQU	WD179X+1	;TRACK REGISTER
  13:     -	0042          	SECREG	EQU	WD179X+2	;SECTOR REGISTER
  14:     -	0043          	DATREG	EQU	WD179X+3	;DATA REGISTER
  15:				;
  16:				;	TYPE I COMMANDS LOW NIBBLE
  17:				;
  18:     -	0000          	STEPRATE0	EQU 0		;6ms,  3 ms if 179x and 2 MHz
  19:     -	0001          	STEPRATE1	EQU 1		;12ms, 6 ms if 179x and 2 MHz
  20:     -	0002          	STEPRATE2	EQU 2		;20ms, 10ms if 179x and 2 MHz, 2ms if WD1772
  21:     -	0003          	STEPRATE3	EQU 3		;30ms, 15ms if 179x and 2 MHz, 3ms if WD1772
  22:				;
  23:				;	TYPE I AND TYPE II COMMANDS LOW NIBBLE
  24:				;	1770/1772 only
  25:     -	0000          	SPINWAIT	EQU 00000000B	;1770/1772: Enable spin up sequence
  26:     -	0008          	NOWAITMTR	EQU 00001000B	;1770/1772: Disable spin up sequence
  27:				;
  28:				;	TYPE II COMMANDS LOW NIBBLE
  29:				;	(F1)
  30:     -	0002          	SIDECMP	EQU	00000010B	;1791/1793: Side Select Compare Enabled \ 1795/1797: Update SSO to 1 \ 1773: Enable Side Compare
  31:				;
  32:				;	(F2) - Read Sector and Write Sector commands only
  33:     -	0008          	SIDESEL	EQU	00001000B	;1791/1793/1773: Side Select Compare for Side 1 \ 1795/1797: Interpret Sector Len Field 00=128, 01=256, 10=512,  11=1024
  34:				;		EQU	00000000B	;1791/1793/1773: Side Select Compare for Side 0 \ 1795/1797: Interpret Sector Len Field 00=256, 01=512, 10=1024, 11=128
  35:				;
  36:				;	TYPE II AND TYPE III COMMANDS LOW NIBBLE
  37:				;
  38:     -	0004          	SETTLE	EQU	00000100B	;179x: Add 15ms delay (2MHz)
  39:     -	0002          	WRPCOMP	EQU	00000010B	;1770/1772/1773 Write Sector and Write Track commands only: Enable Write Precompensation
  40:				;
  41:				;
  42:     -	0000          			IF WD1772
  45:						ELSE
  46:     -	0008          	HLOAD		EQU	00001000B	; ATR 8000 original
  47:     -	0003          	STEPRATE	EQU	STEPRATE3	; ATR 8000 original - 15ms step rate
  48:						ENDIF
  49:				;
  50:				;
  51:     -	00C0          	RIDCMD	EQU	11000000B	;READ ID COMMAND
  52:     -	0000          	IF WD1772
  55:				ELSE
  56:     -	0088          	RDCMD	EQU	10000000B+HLOAD	;READ COMMAND
  57:     -	00A8          	WRTCMD	EQU	10100000B+HLOAD	;WRITE COMMAND
  58:				ENDIF
  59:     -	00D0          	FINCMD	EQU	11010000B	;FORCE INTERRUPT COMMAND
  60:     -	0010          	SKCMD	EQU	00010000B	;SEEK COMMAND
  61:     -	0000          	RSTCMD	EQU	00000000B	;RESTORE COMMAND
  62:     -	0060          	STEPOUT	EQU	01100000B	;STEP OUT COMMAND
  63:     -	0040          	STEPIN	EQU	01000000B	;STEP IN COMMAND
  64:     -	00E0          	RDTRK	EQU	11100000B	;READ TRACK COMMAND
  65:     -	00F0          	WRTRK	EQU	11110000B	;WRITE TRACK COMMAND
  66:     -	00E4          	RDTKDLY	EQU	RDTRK+100B	;WRITE TRACK COMMAND with 15ms settling delay (179x/1773: 30ms if 1MHz)
  67:     -	00F4          	WRTKDLY	EQU	WRTRK+100B	;READ TRACK COMMAND with 15ms settling delay (179x/1773: 30ms if 1MHz)
  68:				;
  69:				;
  70:				; Drive control LATCH (U24)
  71:				;
  72:     -	0001          	DRVSEL1		EQU 00000001B	; 1 = select drive 1
  73:     -	0002          	DRVSEL2		EQU 00000010B	; 1 = select drive 2
  74:     -	0004          	DRVSEL3		EQU 00000100B	; 1 = select drive 3
  75:     -	0008          	DRVSEL4		EQU 00001000B	; 1 = select drive 4
  76:     -	0010          	FDCRESET	EQU 00010000B	; 1 = Put FDC chip in reset, 0 = Release FDC chip from reset
  77:     -	0020          	FDCSIDE		EQU 00100000B	; Side select pin on floppy connector
  78:     -	0040          	FBS			EQU 01000000B	; 0 = B, 1 = S
  79:     -	0080          	FDENSITY	EQU 10000000B	; 0 = Double, 1 = Single
  80:				;
  81:				;
  82:				;
  83:     -	0066          	NMIVEC	EQU	0066H
  84:				;
  85:				;
  86:				;
  87:				;
  88:				;	... DATA STRUCTURE FOR DISK I/O CONTROL BLOCK ...
  89:				;
  90:     -	0000          	DSKOP	EQU	0		;DISK OPERATION CODE
  91:     -	0001          	DSKDRV	EQU	1		;DRIVE# (WITH SIDE# IN BIT 7)
  92:     -	0002          	DSKTRK	EQU	2		;TRACK#
  93:     -	0003          	DSKSEC	EQU	3		;SECTOR#
  94:     -	0004          	DSKPTR	EQU	4		;READ/WRITE POINTER
  95:     -	0006          	DSKAUX	EQU	6		;AUXILLIARY PARAMETERS (2 BYTES)
  96:     -	0008          	DSKSTS	EQU	8		;OPERATION COMPLETION STATUS
  97:				;
  98:				;
  99:				;	... DISK DRIVER OPERATION CODE DEFINITIONS ...
 100:				;
 101:     -	0000          	TSTRDY	EQU	0		;SELECT DRIVE AND TEST READY
 102:     -	0001          	GETSEC	EQU	1		;READ SECTOR
 103:     -	0002          	PUTSEC	EQU	2		;WRITE SECTOR
 104:     -	0003          	GETID	EQU	3		;READ ID MARK
 105:				;
 106:				;
 107:				;
 108:     -	F022          	DISKDVR:
 109: 7487+17	F022  CDCBF3  		CALL	STOPTMR		;KILL DISK TIMER INTERRUPT FROM CTC3
 110: 7504+19	F025  DD7E00  		LD	A,(IX+DSKOP)
 111: 7523+4	F028  B7      		OR	A
 112: 7527+7+5	F029  284D    		JR	Z,TESTDRV	;JUMP IF TEST READY OPERATION
 113: 7534+7	F02B  0688    		LD	B,RDCMD
 114: 7541+4	F02D  3D      		DEC	A
 115: 7545+7+5	F02E  287B    		JR	Z,SETSSO	;JUMP IF DISK READ OPERATION
 116: 7552+7	F030  06A8    		LD	B,WRTCMD
 117: 7559+4	F032  3D      		DEC	A
 118: 7563+7+5	F033  2876    		JR	Z,SETSSO	;JUMP IF DISK WRITE OPERATION
 119: 7570+4	F035  3D      		DEC	A
 120: 7574+7+5	F036  285F    		JR	Z,READID	;JUMP IF DISK ID READ OPERATION
 121: 7581+19	F038  DD3608FF		LD	(IX+DSKSTS),255	;ELSE SET ALL ERROR BITS AND RETURN
 122:				
 123:     -	F03C          	ACTIVON:
 124: 7600+4	F03C  F3      		DI
 125: 7604+7	F03D  3EA7    		LD	A, CTC_D7_INT_EN + CTC_D6_MODE_TIM + CTC_D5_PRESC256 + CTC_D2_TCNEXT + CTC_D1_SW_RST + CTC_D0_CONTROL
 126: 7611+11	F03F  D383    		OUT	(CTC3),A	;PUT CTC3 IN TIMER MODE, PRESCALE 256
 127: 7622+4	F041  AF      		XOR	A			;TIME CONSTANT OF 0 WHICH MEANS 256
 128: 7626+11	F042  D383    		OUT	(CTC3),A	;COUNT MOD 256
 129: 7637+4	F044  3D      		DEC	A
 130: 7641+13	F045  32C9FF  		LD	(DRVTMR),A	;STOP DRIVES AFTER 255 INTERRUPTS
 131: 7654+10	F048  2150F0  		LD	HL,ACTIVTY
 132: 7664+16	F04B  2216FF  		LD	(CTCVEC+6),HL	;SET VECTOR TO ACTIVITY-CHECK ROUTINE
 133: 7680+4	F04E  FB      		EI
 134: 7684+10	F04F  C9      		RET
 135:				;
 136:				;
 137:				;
 138:     -	F050          	ACTIVTY:
 139: 7694+11	F050  F5      		PUSH	AF
 140: 7705+13	F051  3AC9FF  		LD	A,(DRVTMR)
 141: 7718+4	F054  3D      		DEC	A
 142: 7722+13	F055  32C9FF  		LD	(DRVTMR),A
 143: 7735+7+5	F058  200A    		JR	NZ,ACTV2	;EXIT IF 4 SECONDS NOT ELAPSED
 144:				
 145: 7742+17	F05A  CD68F0  		call	shutdown
 146: 7759+7	F05D  3E21    		LD	A, CTC_D7_INT_DIS + CTC_D6_MODE_TIM + CTC_D5_PRESC256 + CTC_D0_CONTROL
 147: 7766+11	F05F  D383    		OUT	(CTC3),A	;RESET INTERRUPT BUT KEEP COUNTER GOING
 148: 7777+13	F061  322EFF  		LD	(DRVOFF),A	;SET 'DRVOFF' FLAG TO NON-ZERO VALUE
 149:				
 150: 7790+10	F064  F1      	ACTV2:	POP	AF
 151: 7800+4	F065  FB      		EI
 152: 7804+14	F066  ED4D    		RETI
 153:				;
 154:				;
 155:				;
 156:     -	F068          	shutdown:
 157:     -	0000          	IF WD1772
 160:				ELSE
 161: 7818+11	F068  DB41    		IN	A,(TRKREG)
 162: 7829+11	F06A  D343    		OUT	(DATREG),A
 163: 7840+7	F06C  3E10    		LD	A,SKCMD
 164: 7847+11	F06E  D340    		OUT	(CMDREG),A	;DUMMY SEEK TO UNLOAD THE HEADS
 165: 7858+13	F070  3A2FFF  		LD	A,(OUTCPY)
 166: 7871+7	F073  E6F0    		AND	11110000B	;DESELECT ALL 4 DRIVES
 167:				ENDIF
 168: 7878+11	F075  D330    		OUT	(LATCH),A
 169: 7889+10	F077  C9      		ret
 170:					
 171:				;
 172:				;
 173:				;
 174:				;
 175:				;
 176:				;	... DRIVE READY/STATUS TEST FUNCTION ...
 177:				;
 178:				;
 179:     -	F078          	TESTDRV:
 180: 7899+17	F078  CD1AF1  		CALL	SELECT		;SELECT DRIVE FOR SPIN/STATUS CHECK	
 181: 7916+8	F07B  CB7F    		BIT	7,A
 182: 7924+7+5	F07D  2805    		JR	Z,TDRV2		;JUMP IF DRIVE READY INDICATED
 183:				
 184: 7931+10	F07F  2130FF  		LD	HL,PERIOD	;ELSE SET PERIOD TO ZERO
 185: 7941+10	F082  3600    		LD	(HL),0
 186:				
 187: 7951+19	F084  DD7708  	TDRV2:	LD	(IX+DSKSTS),A	;RETURN TYPE 1 STATUS IN 'DSKSTS'
 188: 7970+13	F087  3A2FFF  		LD	A,(OUTCPY)
 189: 7983+19	F08A  DD7706  		LD	(IX+DSKAUX),A	;RETURN CONTROL BITS IN AUX BYTE #1
 190: 8002+13	F08D  3A30FF  		LD	A,(PERIOD)
 191: 8015+19	F090  DD7707  		LD	(IX+DSKAUX+1),A	;RETURN PERIOD IN AUX BYTE #2
 192: 8034+17	F093  CD3CF0  		CALL	ACTIVON		;START DISK ACTIVITY MONITOR AGAIN
 193: 8051+10	F096  C9      		RET
 194:				;
 195:				;
 196:				;
 197:				;	... READ ID MARK FUNCTION ...
 198:				;
 199:     -	F097          	READID:
 200: 8061+19	F097  DD360606		LD	(IX+DSKAUX),6
 201: 8080+19	F09B  DD360700		LD	(IX+DSKAUX+1),0
 202: 8099+7	F09F  06C0    		LD	B,RIDCMD
 203: 8106+17	F0A1  CDB3F0  		CALL	DISK		;READ 6 BYTE ID RECORD
 204: 8123+13	F0A4  3A2FFF  		LD	A,(OUTCPY)
 205: 8136+19	F0A7  DD7706  		LD	(IX+DSKAUX),A	;RETURN DRIVE CONTROL LATCH BYTE
 206: 8155+10	F0AA  C9      		RET
 207:				;
 208:				;
 209:				;
 210:				;	... SECTOR READ/WRITE FUNCTION ...
 211:				;
 212:     -	F0AB          	SETSSO:
 213:     -	0001          	IF WD1772 <> 1
 214: 8165+20	F0AB  DDCB017E		BIT	7,(IX+DSKDRV)	;TEST SIDE# BIT IN DRIVE PARAM
 215: 8185+7+5	F0AF  2802    		JR	Z,DISK
 216: 8192+8	F0B1  CBC8    		SET	1,B		;SET 'SSO' CONTROL BIT IN 1797 CMD
 217:				ENDIF
 218:     -	F0B3          	DISK:
 219: 8200+4	F0B3  78      		LD	A, B
 220: 8204+13	F0B4  32C5FF  		LD	(CMDBYT),A					;STORE 1797 COMMAND PASSED IN B
 221: 8217+17	F0B7  CD1AF1  		CALL	SELECT						;SELECT DRIVE/SIDE FOR DISK OPERATION
 222: 8234+8	F0BA  CB7F    		BIT	7,A
 223: 8242+7+5	F0BC  2052    		JR	NZ,DISKX					;EXIT IF NOT READY
 224: 8249+13	F0BE  3A2DFF  		LD	A,(TRACK)				
 225: 8262+7	F0C1  FEFF    		CP	255				
 226: 8269+7+5	F0C3  2805    		JR	Z,DISK2				
 227: 8276+19	F0C5  DDBE02  		CP	(IX+DSKTRK)					;TEST IF ALREADY AT DESIRED TRACK
 228: 8295+7+5	F0C8  2805    		JR	Z,DISK3						;SKIP SEEK PART IF SO
 229:								
 230: 8302+17	F0CA  CDF8F1  	DISK2:	CALL	SEEKTRK						;GO LOOKING FOR TRACK# IN IOCB
 231: 8319+7+5	F0CD  2041    		JR	NZ,DISKX					;EXIT IF HEAD POSITIONING ERROR
 232:				
 233: 8326+13	F0CF  3A12FF  	DISK3:	LD	A,(CTCVEC+2)
 234: 8339+4	F0D2  3C      		INC	A						;LOOP TILL TX CTC TURNS ITSELF OFF
 235: 8343+7+5	F0D3  20FA    		JR	NZ,DISK3					;(INTERRUPT VECTOR LSB SET=FFH)
 236:     -	F0D5          	SalyDISK3:
 237: 8350+4	F0D5  F3      		DI
 238: 8354+7	F0D6  3E03    		LD	A, CTC_D1_SW_RST + CTC_D0_CONTROL		; SOFTWARE RESET CTC0
 239: 8361+11	F0D8  D380    		OUT	(CTC0),A					;DISABLE RX INTERRUPT FROM CTC0
 240: 8372+7	F0DA  3E27    		LD	A, CTC_D6_MODE_TIM + CTC_D5_PRESC256 + CTC_D2_TCNEXT + CTC_D1_SW_RST + CTC_D0_CONTROL	; SET PRESCALER TO 256 AND SOFTWARE RESET
 241: 8379+11	F0DC  D382    		OUT	(CTC2),A					;DISABLE CTC2 AND ALSO INIT FOR CLOCK SOURCE FOR WATCHDOG TIMER
 242: 8390+7	F0DE  3E3D    		LD	A,61						;SET TIME COUNTER TO 61, about 3.9ms
 243: 8397+11	F0E0  D382    		OUT	(CTC2),A				
 244: 8408+10	F0E2  21A8F3  		LD	HL,WATCHDOG					;STORE NEW CTC3 VECTOR FOR SAFETY
 245: 8418+16	F0E5  2216FF  		LD	(CTCVEC+6),HL				
 246:								
 247: 8434+13	F0E8  3A33FF  		LD	A,(RWMAX)				
 248: 8447+13	F0EB  32C6FF  		LD	(RWTRY),A					;SET READ/WRITE RETRY COUNT
 249: 8460+19	F0EE  DD7E03  	DISK4:	LD	A,(IX+DSKSEC)					;OUTPUT SECTOR NUMBER FOR READ/WRITE
 250: 8479+11	F0F1  D342    		OUT	(SECREG),A				
 251: 8490+19	F0F3  DD7E02  		LD	A,(IX+DSKTRK)				
 252: 8509+11	F0F6  D341    		OUT	(TRKREG),A					;DITTO FOR TRACK NUMBER
 253: 8520+13	F0F8  3AC5FF  		LD	A,(CMDBYT)				
 254: 8533+11	F0FB  D340    		OUT	(CMDREG),A					;START 1791 WORKING ON W/R COMMAND
 255: 8544+17	F0FD  CDB5F2  		CALL	RWDISK						;DO HALT/NMI DISK DATA TRANSFER
 256:     -	F100          	DISK4a:
 257: 8561+7+5	F100  280E    		JR	Z,DISKX						;EXIT IF NO DISK ERRORS
 258: 8568+11	F102  F5      		PUSH	AF				
 259: 8579+17	F103  CD0EF3  		CALL	RECOVER						;DO READ/WRITE ERROR RECOVERY ROUTINE
 260: 8596+10	F106  C1      		POP	BC				
 261: 8606+7+5	F107  2006    		JR	NZ,DISK5					;SKIP RETRY IF IRRECOVERABLE ERROR
 262: 8613+10	F109  21C6FF  		LD	HL,RWTRY				
 263: 8623+11	F10C  35      		DEC	(HL)				
 264: 8634+7+5	F10D  20DF    		JR	NZ,DISK4					;ELSE DECREMENT RETRY COUNT TILL=0
 265: 8641+4	F10F  78      	DISK5:	LD	A,B						;THEN LOAD A WITH ERROR STATUS
 266: 8645+19	F110  DD7708  	DISKX:	LD	(IX+DSKSTS),A					;SAVE COMPLETION STATUS CARRIED IN ACC
 267: 8664+17	F113  CD18F0  		CALL	RENEW						;RESTART ATARI AND RS232 INTERRUPTS
 268: 8681+17	F116  CD3CF0  		CALL	ACTIVON						;START DISK ACTIVITY TIMER
 269: 8698+10	F119  C9      		RET
 270:				;
 271:				;
 272:				;
 273:				;	... SELECT DRIVE# PASSED @IX AND RETURN TYPE 1 STATUS ...
 274:				;
 275:     -	F11A          	SELECT:
 276: 8708+19	F11A  DD7E01  		LD	A,(IX+DSKDRV)
 277: 8727+8	F11D  CBBF    		RES	7,A		;CLEAR SIDE SELECT BIT FROM DRIVE#
 278: 8735+7	F11F  FE04    		CP	4
 279: 8742+7+5	F121  306B    		JR	NC,SELX		;EXIT IF INVALID DRIVE NUMBER
 280:				
 281: 8749+7	F123  0600    		LD	B,0
 282: 8756+4	F125  4F      		LD	C,A		;LOAD BC WITH NEW DRIVE# TO BE SELECTED
 283: 8760+10	F126  212CFF  		LD	HL,UNIT
 284: 8770+7	F129  96      		SUB	(HL)		;COMPARE NEW AND OLD SELECT CODES AND
 285: 8777+11	F12A  F5      		PUSH	AF		; SAVE RESULT STATUS ON STACK
 286: 8788+4	F12B  50      		LD	D,B
 287: 8792+7	F12C  5E      		LD	E,(HL)		;LOAD DE WITH LAST SELECTED DRIVE#
 288: 8799+7	F12D  71      		LD	(HL),C		;THEN STORE NEW UNIT# FROM C
 289:				
 290: 8806+10	F12E  2120FF  		LD	HL,DRVTAB
 291: 8816+11	F131  19      		ADD	HL,DE		;INDEX INTO TABLE BY CURRENT DRIVE#
 292: 8827+13	F132  3A2DFF  		LD	A,(TRACK)
 293: 8840+7	F135  77      		LD	(HL),A		;REMEMBER CURENT TRACK NUMBER
 294: 8847+7	F136  1E04    		LD	E,4
 295: 8854+11	F138  19      		ADD	HL,DE		;NOW INDEX TO CONTROL BYTE FOR UNIT
 296: 8865+13	F139  3A2FFF  		LD	A,(OUTCPY)
 297: 8878+7	F13C  77      		LD	(HL),A		;REMEMBER CURRENT DENSITY/TYPE
 298:				
 299: 8885+10	F13D  2120FF  		LD	HL,DRVTAB
 300: 8895+11	F140  09      		ADD	HL,BC		;INDEX INTO TABLE BY NEW DRIVE#
 301: 8906+7	F141  7E      		LD	A,(HL)
 302: 8913+13	F142  322DFF  		LD	(TRACK),A	;STORE CURRENT (ASSUMED) HEAD POSITION
 303: 8926+11	F145  19      		ADD	HL,DE
 304: 8937+10	F146  D1      		POP	DE		;POP UNIT# COMPARE RESULT INTO D
 305: 8947+7	F147  7E      		LD	A,(HL)		;GET CURRENT SELECT/TYPE BITS FOR DRIVE
 306: 8954+4	F148  B7      		OR	A
 307: 8958+7+5	F149  201F    		JR	NZ,SEL5		;JUMP IF NOT AN INITIAL DRIVE SELECT
 308:				;
 309:				;	ARRIVE HERE ON INITIAL DRIVE SELECT
 310:				;
 311: 8965+10	F14B  2198F1  		LD	HL,SELTAB
 312: 8975+11	F14E  09      		ADD	HL,BC		;ELSE INDEX INTO TABLE OF SELECT BITS
 313: 8986+7	F14F  7E      		LD	A,(HL)
 314: 8993+11	F150  D330    		OUT	(LATCH),A	;OUTPUT NEW DRIVE SELECTS
 315: 9004+11	F152  F5      		PUSH	AF
 316: 9015+17	F153  CD9CF1  		CALL	SPIN		;NOW SPIN UP TO TEST READY
 317: 9032+10	F156  C1      		POP	BC
 318: 9042+7	F157  FEDE    		CP	222		;ERROR IF SLOWER THAN 222 MS
 319: 9049+7+5	F159  3033    		JR	NC,SELX
 320:				
 321: 9056+8	F15B  CBF0    		SET	6,B
 322: 9064+7	F15D  FEB5    		CP	181		;MINI FLOPPY IF BETWEEN 222 AND 181 MS
 323: 9071+7+5	F15F  3006    		JR	NC,SEL4
 324:				
 325: 9078+8	F161  CBB0    		RES	6,B
 326: 9086+7	F163  FE99    		CP	153		;BIG FLOPPY IF BETWEEN 181 AND 153 MS
 327: 9093+7+5	F165  3827    		JR	C,SELX
 328:				
 329: 9100+4	F167  78      	SEL4:	LD	A,B		;GET CONTROL BITS INTO A
 330: 9104+7	F168  1600    		LD	D,0		;SET D=0 TO DISABLE HEAD LOAD DELAY
 331:				;
 332:				;	ARRIVE HERE WITH DENSITY/TYPE/SELECT BITS IN ACC
 333:				;	
 334: 9111+8	F16A  CBAF    	SEL5:	RES	5,A		;RESET SIDE SELECT BIT UNCONDITIONALLY
 335: 9119+20	F16C  DDCB017E		BIT	7,(IX+DSKDRV)
 336: 9139+7+5	F170  2802    		JR	Z,SEL5A		;JUMP IF SELECTING SIDE# ZERO
 337: 9146+8	F172  CBEF    		SET	5,A		;ELSE SET SIDE SELECT BIT IN ACC
 338: 9154+11	F174  D330    	SEL5A:	OUT	(LATCH),A
 339: 9165+13	F176  322FFF  		LD	(OUTCPY),A	;OUTPUT AND SAVE NEW PATTERN
 340: 9178+4	F179  14      		INC	D
 341: 9182+4	F17A  15      		DEC	D
 342: 9186+10+7	F17B  C499F3  		CALL	NZ,HLDWAIT	;DO HEAD LOAD DELAY IF NEW DRIVE SELECT
 343:     -	0000          	IF WD1772
 348:				ENDIF
 349: 9196+17	F17E  CD91F3  		CALL	FORCE
 350: 9213+8	F181  CB6F    		BIT	5,A		;TEST 1797 HEAD-LOAD STATUS
 351: 9221+5+6	F183  C0      		RET	NZ		;EXIT IF LOADED AND MOTORS ON
 352:					
 353: 9226+17	F184  CD9CF1  		CALL	SPIN		;ELSE LET THINGS SPIN A BIT
 354: 9243+4	F187  B7      		OR	A		;TEST PERIOD AFTER RE-SPINUP
 355: 9247+7+5	F188  2804    	KLUDGE:	JR	Z,SELX		;ERROR IF DISK REFUSES TO TURN
 356:					
 357:     -	0000          	IF WD1772
 359:				ELSE
 360: 9254+17	F18A  CD91F3  		CALL	FORCE		;ELSE RETURN TYPE 1 STATUS THIS TIME
 361: 9271+10	F18D  C9      		RET
 362:				ENDIF
 363:				;
 364:				;	ARRIVE HERE IF DRIVE CANNOT BE SELECTED AT ALL
 365:				;
 366: 9281+4	F18E  AF      	SELX:	XOR	A		;TURN OFF EVERYTHING
 367:     -	0000          	IF WD1772
 372:				ELSE
 373: 9285+11	F18F  D330    		OUT	(LATCH),A
 374: 9296+13	F191  322FFF  		LD	(OUTCPY),A
 375: 9309+7	F194  3E80    		LD	A,10000000B
 376:				ENDIF
 377: 9316+4	F196  B7      		OR	A		;RETURN WITH NOT-READY ERROR
 378: 9320+10	F197  C9      		RET
 379:				;
 380:				;
 381:				;
 382:				;
 383:				;
 384:     -	F198  01      	SELTAB:	DEFB	00000001B
 385:     -	F199  02      		DEFB	00000010B
 386:     -	F19A  04      		DEFB	00000100B
 387:     -	F19B  08      		DEFB	00001000B
 388:				;
 389:				;
 390:				;
 391:     -	F19C          	SPIN:
 392:     -	0000          	IF WD1772
 396:				ELSE
 397: 9330+4	F19C  AF      		XOR	A
 398: 9334+11	F19D  D356    		OUT	(INDXSET),A
 399: 9345+4	F19F  3C      		INC	A
 400: 9349+11	F1A0  D354    		OUT	(INDXCLR),A	;SET TO ENABLE NORMAL INDEX PULSES
 401: 9360+11	F1A2  DB41    		IN	A,(TRKREG)
 402: 9371+11	F1A4  D343    		OUT	(DATREG),A
 403: 9382+7	F1A6  3E18    		LD	A,SKCMD+HLOAD
 404: 9389+11	F1A8  D340    		OUT	(CMDREG),A	;DO DUMMY SEEK TO START THE MOTORS
 405: 9400+17	F1AA  CDBAF3  		CALL	STARTMR		;THEN RE-PROGRAM CTC1 FOR TIMER
 406: 9417+17	F1AD  CD91F3  		CALL	FORCE
 407:				ENDIF
 408: 9434+4	F1B0  4F      		LD	C,A		;SAVE CURRENT TYPE 1 DISK STATUS
 409: 9438+7	F1B1  0606    		LD	B,6		;SET FOR 6 DISK REVOLUTIONS
 410: 9445+10	F1B3  210000  		LD	HL,0
 411: 9455+16	F1B6  22C7FF  		LD	(TICKS),HL	;RESET MILLISECOND COUNTER FOR IRQ
 412: 9471+20	F1B9  ED5BC7FF	SPIN2:	LD	DE,(TICKS)
 413: 9491+17	F1BD  CDE3F1  		CALL	EDGE		;WAIT FOR INDEX INPUT TO CHANGE
 414: 9508+7+5	F1C0  380D    		JR	C,SPIN3		;ABORT IF TIMEOUT
 415: 9515+17	F1C2  CDE3F1  		CALL	EDGE		;WAIT FOR CHANGE BACK AGAIN
 416: 9532+7+5	F1C5  3808    		JR	C,SPIN3
 417: 9539+8+5	F1C7  10F0    		DJNZ	SPIN2		;LET 6 REVOLUTIONS PASS
 418:				
 419: 9547+16	F1C9  2AC7FF  		LD	HL,(TICKS)	;READ TIME AT END OF REVOLUTION
 420: 9563+4	F1CC  B7      		OR	A
 421: 9567+15	F1CD  ED52    		SBC	HL,DE		;COMPUTE INDEX PERIOD IN MILLISECONDS
 422:				
 423:     -	0000          	IF WD1772
 430:				ELSE
 431:				
 432: 9582+17	F1CF  CDCBF3  	SPIN3:	CALL	STOPTMR		;KILL INTERRUPT FROM CTC3
 433: 9599+4	F1D2  AF      		XOR	A
 434: 9603+11	F1D3  D354    		OUT	(INDXCLR),A
 435: 9614+4	F1D5  3C      		INC	A
 436: 9618+11	F1D6  D356    		OUT	(INDXSET),A	;DISABLE INDEX PULSES AFTER THIS
 437:				ENDIF
 438:				
 439: 9629+4	F1D8  7D      		LD	A,L
 440: 9633+4	F1D9  24      		INC	H
 441: 9637+4	F1DA  25      		DEC	H
 442: 9641+7+5	F1DB  2802    		JR	Z,SPIN4		;A HOLDS VALID PERIOD IF H=0
 443: 9648+7	F1DD  3EFF    		LD	A,255
 444: 9655+13	F1DF  3230FF  	SPIN4:	LD	(PERIOD),A
 445: 9668+10	F1E2  C9      		RET
 446:				
 447:     -	0000          	IF WD1772
 450:				ENDIF
 451:				;
 452:				;
 453:				;
 454:     -	F1E3          	EDGE:
 455:     -	0000          	IF WD1772
 457:				ELSE
 458: 9678+17	F1E3  CD91F3  		CALL	FORCE		;GET 1797 TYPE 1 STATUS
 459:				ENDIF
 460: 9695+4	F1E6  A9      		XOR	C
 461: 9699+7	F1E7  E602    		AND	00000010B	;CHECK FOR CHANGE IN INDEX BIT
 462: 9706+7+5	F1E9  2009    		JR	NZ,EDGE2	;EXIT IF BIT CHANGES
 463:				
 464: 9713+13	F1EB  3AC8FF  		LD	A,(TICKS+1)
 465: 9726+7	F1EE  FE08    		CP	HIGH 2048	;ELSE CHECK TIME ACCUMULATED IN 'TICKS'
 466: 9733+7+5	F1F0  38F1    		JR	C,EDGE		;KEEP LOOPING TILL 2 SECONDS PASS
 467:				
 468: 9740+4	F1F2  37      		SCF
 469: 9744+10	F1F3  C9      		RET			;THEN RETURN WITH CARRY=1
 470:				;
 471: 9754+4	F1F4  79      	EDGE2:	LD	A,C
 472: 9758+4	F1F5  2F      		CPL			;FLIP INDEX STATE HELD IN C
 473: 9762+4	F1F6  4F      		LD	C,A
 474: 9766+10	F1F7  C9      		RET			;RETURN WITH CARRY=0
 475:				;
 476:				;
 477:				;
 478:				;
 479:				;	... SEEK TRACK# IN (IX+DSKTRK) FROM TRACK# IN (TRACK) ...
 480:				;
 481:     -	F1F8          	SEEKTRK:
 482: 9776+13	F1F8  3A2DFF  		LD	A,(TRACK)
 483: 9789+7	F1FB  FEFF    		CP	255
 484: 9796+7+5	F1FD  2005    		JR	NZ,SEEK1	;JUMP IF HEAD POSITION IS KNOWN
 485:				
 486: 9803+17	F1FF  CD37F2  		CALL	RESTORE		;ELSE DO SLOW RESTORE TO RECALIBRATE
 487: 9820+7+5	F202  202A    		JR	NZ,SEEKX	;EXIT WITH PERMANENT ERROR IF FAILURE
 488:				
 489: 9827+7	F204  0601    	SEEK1:	LD	B,1
 490: 9834+17	F206  CD57F2  		CALL	SEEK		;FIRST SEEK (IX+DSKTRK) WITH NO RETRIES
 491: 9851+5+6	F209  C8      		RET	Z		;EXIT IF WE GOT TO THE DESIRED TRACK
 492: 9856+7+5	F20A  3005    		JR	NC,SEEK2	;JUMP IF WE LANDED ON SOME OTHER TRACK
 493:				
 494: 9863+17	F20C  CD37F2  		CALL	RESTORE		;ELSE RECALIBRATE BEFORE TRYING AGAIN
 495: 9880+7+5	F20F  201D    		JR	NZ,SEEKX	;EXIT IF TRACK ZERO NOT FOUND
 496:				
 497: 9887+7	F211  0602    	SEEK2:	LD	B,2
 498: 9894+17	F213  CD57F2  		CALL	SEEK		;NOW SEEK WITH TWO TRIES
 499: 9911+5+6	F216  C8      		RET	Z		;EXIT IF SUCCESSFUL THIS TIME
 500: 9916+7+5	F217  3815    		JR	C,SEEKX		;EXIT IF NO ID MARK COULD BE FOUND
 501:				
 502: 9923+10	F219  216400  		LD	HL,100
 503: 9933+17	F21C  CD9EF3  		CALL	WAIT		;DELAY TO LET THE STEPPER RELAX ITSELF
 504: 9950+10	F21F  2128FF  		LD	HL,RATES
 505: 9960+13	F222  3A2CFF  		LD	A,(UNIT)
 506: 9973+4	F225  85      		ADD	A,L
 507: 9977+4	F226  6F      		LD	L,A		;INDEX INTO TABLE TO DRIVE'S STEP RATE
 508: 9981+11	F227  34      		INC	(HL)		; AND MAKE STEP RATE ONE NOTCH SLOWER
 509: 9992+7	F228  7E      		LD	A,(HL)
 510: 9999+7	F229  E603    		AND	00000011B	;CHECK FOR ROLL AROUND IN LOWER 2 BITS
 511:10006+7+5	F22B  20E4    		JR	NZ,SEEK2	;REPEAT IF STEP RATE BITS WERE NOT=3
 512:				
 513:10013+11	F22D  35      		DEC	(HL)		;ELSE RESTORE FROM ROLL AROUND
 514:10024+7	F22E  3EFF    	SEEKX:	LD	A,255
 515:10031+13	F230  322DFF  		LD	(TRACK),A	;FLAG TRACK POSITION AS UNKNOWN
 516:10044+7	F233  3E10    		LD	A,00010000B	;SET SEEK ERROR BIT IN STATUS WORD
 517:10051+4	F235  B7      		OR	A
 518:10055+10	F236  C9      		RET			;RETURN WITH RNF ERROR STATUS IN A
 519:				;
 520:				;
 521:				;
 522:				;
 523:     -	0000          			IF WD1772
 525:						ELSE
 526:     -	F237          	SalyResetFDC:
 527:     -	F237          	RESTORE:
 528:						ENDIF
 529:10065+13	F237  3A2FFF  		LD	A,(OUTCPY)
 530:10078+8	F23A  CBE7    		SET	4,A
 531:10086+11	F23C  D330    		OUT	(LATCH),A	;TWANG THE DISK CONTROLLER RESET PIN
 532:10097+7	F23E  060F    		LD	B,15
 533:10104+8+5	F240  10FE    		DJNZ	$		;HOLD RESET 50 MICROSECONDS
 534:10112+8	F242  CBA7    		RES	4,A
 535:10120+11	F244  D330    		OUT	(LATCH),A
 536:				
 537:     -	0000          	IF WD1772
 544:				ELSE
 545:10131+7	F246  0600    		LD	B,0
 546:10138+8+5	F248  10FE    		DJNZ	$
 547:10146+17	F24A  CD91F3  		CALL	FORCE		;THEN FORCE CLEAR THE BEAST
 548:				ENDIF
 549:				
 550:10163+7	F24D  3E0B    		LD	A,RSTCMD+HLOAD+STEPRATE
 551:10170+17	F24F  CD6BF3  		CALL	TYP1CMD		;DO RESTORE AT SLOWEST STEP RATE
 552:10187+7	F252  EE04    		XOR	00000100B
 553:     -	0000          	IF WD1772
 555:				ELSE
 556:10194+7	F254  E684    		AND	10000100B
 557:				ENDIF
 558:10201+10	F256  C9      		RET			;RETURN WITH ACC=0 IF HOME
 559:				;
 560:				;
 561:				;
 562:     -	F257          	SEEK:
 563:10211+11	F257  C5      		PUSH	BC		;SAVE LOOPCOUNT IN B
 564:10222+13	F258  3A2DFF  		LD	A,(TRACK)
 565:10235+4	F25B  47      		LD	B,A		;LOAD B WITH CURRENT TRACK POSITION
 566:10239+19	F25C  DD4E02  		LD	C,(IX+DSKTRK)	;LOAD C WITH DESTINATION TRACK#
 567:10258+17	F25F  CD75F2  		CALL	STEP		;HAVE A GO AT STEPPING
 568:10275+17	F262  CD95F2  		CALL	VERIFY		;VERIFY HEAD POSITION WITH READ-ID
 569:10292+10	F265  C1      		POP	BC
 570:10302+4	F266  37      		SCF
 571:10306+5+6	F267  C0      		RET	NZ		;EXIT WITH CARRY SET IF READ-ID FAILS
 572:				
 573:10311+11	F268  DB42    		IN	A,(SECREG)
 574:10322+13	F26A  322DFF  		LD	(TRACK),A	;STORE ACTUAL TRACK# FROM ID MARK
 575:10335+19	F26D  DD9602  		SUB	(IX+DSKTRK)	;COMPARE IF WE GOT THERE THIS TIME
 576:10354+5+6	F270  C8      		RET	Z		;EXIT WITH ACC=0 IF TRACK# VERIFIED
 577:				
 578:10359+8+5	F271  10E4    		DJNZ	SEEK		;DO PRESCRIBED NUMBER OF SEEK RETRIES
 579:				
 580:10367+4	F273  B7      		OR	A
 581:10371+10	F274  C9      		RET			;RETURN WITH CARRY AND ZERO FLAGS CLEAR
 582:				;
 583:				;
 584:				;
 585:				;	STEP FROM TRACK# IN B TOWARDS TRACK# IN C
 586:				;
 587:     -	F275          	STEP:
 588:10381+4	F275  78      		LD	A,B
 589:10385+11	F276  D341    		OUT	(TRKREG),A	;STARTING TRACK# TO TRACK REGISTER
 590:10396+4	F278  79      		LD	A,C
 591:10400+11	F279  D343    		OUT	(DATREG),A	;DESTINATION TRACK# TO DATA REGISTER
 592:10411+10	F27B  2128FF  		LD	HL,RATES
 593:10421+13	F27E  3A2CFF  		LD	A,(UNIT)
 594:10434+4	F281  85      		ADD	A,L
 595:10438+4	F282  6F      		LD	L,A		;INDEX INTO STEP RATE TABLE FOR DRIVE
 596:10442+7	F283  7E      		LD	A,(HL)
 597:     -	0000          	IF WD1772
 599:				ELSE
 600:10449+7	F284  E603    		AND	00000011B	;EXTRACT LOWER 2 BITS FOR STEP RATE
 601:10456+7	F286  F618    		OR	SKCMD+HLOAD	;MERGE WITH SEEK COMAND
 602:				ENDIF
 603:10463+17	F288  CD6BF3  		CALL	TYP1CMD		;DO SEEK WITH SPECIFIED STEP RATE
 604:10480+7	F28B  7E      		LD	A,(HL)
 605:10487+7	F28C  E6FC    		AND	11111100B	;EXTRACT UPPER 6 BITS FOR SETTLE TIME
 606:10494+7	F28E  2600    		LD	H,0
 607:10501+4	F290  6F      		LD	L,A
 608:10505+17	F291  CD9EF3  		CALL	WAIT		;4..256 MILLISECOND HEAD SETTLING DELAY
 609:10522+10	F294  C9      		RET
 610:				;
 611:				;
 612:				;
 613:				;
 614:     -	F295          	VERIFY:
 615:10532+7	F295  3EC0    		LD	A,RIDCMD
 616:10539+17	F297  CD62F3  		CALL	TYP2CMD		;READ NEXT ID MARK TO VERIFY SEEK
 617:     -	0000          	IF WD1772
 619:				ELSE
 620:10556+7	F29A  E698    		AND	10011000B
 621:				ENDIF
 622:10563+5+6	F29C  C8      		RET	Z		;EXIT IF ID MARK READ OK
 623:				
 624:10568+13	F29D  3A2FFF  		LD	A,(OUTCPY)
 625:10581+7	F2A0  EE80    		XOR	10000000B	;COMPLIMENT DENSITY BIT OF DRIVE TYPE
 626:10588+13	F2A2  322FFF  		LD	(OUTCPY),A
 627:10601+11	F2A5  D330    		OUT	(LATCH),A
 628:10612+10	F2A7  213200  		LD	HL,50
 629:10622+17	F2AA  CD9EF3  		CALL	WAIT		;ALLOW 50 MS DELAY AFTER CLOCK SWITCH
 630:10639+7	F2AD  3EC0    		LD	A,RIDCMD
 631:10646+17	F2AF  CD62F3  		CALL	TYP2CMD		;TRY AGAIN IN NEW DENSITY
 632:     -	0000          	IF WD1772
 634:				ELSE
 635:10663+7	F2B2  E698    		AND	10011000B
 636:				ENDIF
 637:10670+10	F2B4  C9      		RET			;A=0 IF AN ID MARK WAS FOUND
 638:				;
 639:				;
 640:				;
 641:				;
 642:				;
 643:				;
 644:     -	F2B5          	RWDISK:				;A=1797 TYPE 2 COMMAND BYTE
 645:10680+16	F2B5  2A6600  		LD	HL,(NMIVEC)
 646:10696+11	F2B8  E5      		PUSH	HL
 647:10707+16	F2B9  2A6800  		LD	HL,(NMIVEC+2)
 648:10723+11	F2BC  E5      		PUSH	HL		;SAVE 4 BYTES AT NMI VECTOR
 649:10734+10	F2BD  21EDA2  		LD	HL,0A2EDH	;LOAD HL WITH 'INI' OPCODE
 650:10744+8	F2C0  CB6F    		BIT	5,A		;TEST IF READ OR WRITE BEING DONE
 651:10752+7+5	F2C2  2801    		JR	Z,RW2		;JUMP IF COMMAND IS A READ
 652:10759+4	F2C4  24      		INC	H		;ELSE TRANSFORM 'INI' INTO 'OUTI'
 653:10763+16	F2C5  226600  	RW2:	LD	(NMIVEC),HL
 654:10779+10	F2C8  216800  		LD	HL,NMIVEC+2
 655:10789+10	F2CB  36C9    		LD	(HL),0C9H	;STORE 'RET' OPCODE AFTER INI/OUTI
 656:10799+4	F2CD  F3      		DI
 657:10803+7	F2CE  3EC7    		LD	A,CTC_D7_INT_EN + CTC_D6_MODE_CNT + CTC_D2_TCNEXT + CTC_D1_SW_RST + CTC_D0_CONTROL
 658:10810+11	F2D0  D383    		OUT	(CTC3),A	;ARM CTC3 FOR COUNTER MODE INTERRUPT
 659:10821+4	F2D2  AF      		XOR	A		;TIME CONSTANT OF 0 WHICH MEANS 256
 660:10825+11	F2D3  D383    		OUT	(CTC3),A	;COUNT 256 PULSES FROM CTC3
 661:10836+4	F2D5  FB      		EI
 662:10840+19	F2D6  DD6E04  		LD	L,(IX+DSKPTR)	;HL=DISK READ/WRITE DATA POINTER
 663:10859+19	F2D9  DD6605  		LD	H,(IX+DSKPTR+1)
 664:10878+19	F2DC  DD4606  		LD	B,(IX+DSKAUX)	;B=SECTOR LENGTH COUNT (LSB)
 665:10897+7	F2DF  0E43    		LD	C,DATREG	;C=DISK DATA PORT#
 666:10904+19	F2E1  DD7E07  		LD	A,(IX+DSKAUX+1)
 667:10923+8	F2E4  CB3F    		SRL	A
 668:10931+7+5	F2E6  280D    		JR	Z,RW256		;JUMP IF BLOCKSIZE <= 256 BYTES
 669:10938+8	F2E8  CB3F    		SRL	A
 670:10946+7+5	F2EA  2806    		JR	Z,RW512		;JUMP IF BLOCKSIZE <= 512 BYTES
 671:10953+4	F2EC  76      	RW1024:	HALT
 672:10957+7+5	F2ED  20FD    		JR	NZ,$-1
 673:10964+4	F2EF  76      		HALT
 674:10968+7+5	F2F0  20FD    		JR	NZ,$-1
 675:10975+4	F2F2  76      	RW512:	HALT
 676:10979+7+5	F2F3  20FD    		JR	NZ,$-1
 677:10986+4	F2F5  76      	RW256:	HALT
 678:10990+7+5	F2F6  20FD    		JR	NZ,$-1
 679:10997+11	F2F8  DB40    	RWBUSY:	IN	A,(STSREG)
 680:11008+8	F2FA  CB47    		BIT	0,A
 681:11016+7+5	F2FC  20FA    		JR	NZ,RWBUSY	;LOOP TILL 1797 BUSY BIT GOES AWAY
 682:11023+4	F2FE  47      		ld	b,a
 683:11027+17	F2FF  CDCBF3  		call	stoptmr
 684:11044+4	F302  78      		ld	a,b
 685:11048+10	F303  E1      	RWEXIT:	POP	HL
 686:11058+16	F304  226800  		LD	(NMIVEC+2),HL
 687:11074+10	F307  E1      		POP	HL
 688:11084+16	F308  226600  		LD	(NMIVEC),HL	;RESTORE CODE AT NMI
 689:     -	0000          	IF WD1772
 691:				ELSE
 692:11100+7	F30B  E6FD    		AND	11111101B	;MASK FOR DISK ERRORS
 693:				ENDIF
 694:11107+10	F30D  C9      		RET			;RETURN WITH DISK ERROR FLAGS SET
 695:				;
 696:				;
 697:				;
 698:				;
 699:     -	F30E          	RECOVER:
 700:11117+4	F30E  47      		LD	B,A
 701:11121+7	F30F  E6E7    		AND	11100111B	;MASK OFF ALL BUT RNF/CRC ERROR BITS
 702:11128+7+5	F311  2808    		JR	Z,RECOV1	;JUMP IF ONE OF THOSE TWO WERE SET
 703:				
 704:11135+11	F313  F5      		PUSH	AF
 705:11146+17	F314  CD91F3  		CALL	FORCE		;RESET ERROR FLAGS IN 179X STATUS REG
 706:11163+10	F317  F1      		POP	AF
 707:     -	0000          	IF WD1772
 709:				ELSE
 710:11173+7	F318  E6E1    		AND	11100001B	;CLEAR BITS ASSOCIATED WITH LOST DATA
 711:				ENDIF
 712:11180+10	F31A  C9      		RET			;RETURN WITH ACC=0 IF RETRY TO BE DONE
 713:				;
 714:11190+8	F31B  CB60    	RECOV1:	BIT	4,B
 715:11198+7+5	F31D  2023    		JR	NZ,RECOV3	;JUMP IF RECORD-NOT-FOUND ERROR
 716:				;
 717:				;	ARRIVE HERE IF BAD CRC ERROR
 718:				;
 719:11205+13	F31F  3A33FF  	RECOV2:	LD	A,(RWMAX)
 720:11218+10	F322  21C6FF  		LD	HL,RWTRY
 721:11228+7	F325  96      		SUB	(HL)		;COMPUTE HOW MANY RETRYS HAVE BEEN DONE
 722:11235+5+6	F326  C8      		RET	Z		;EXIT IF FIRST RETRY
 723:				
 724:11240+13	F327  3A2DFF  		LD	A,(TRACK)	;ELSE PREPARE TO WIGGLE BACK AND FORTH
 725:11253+4	F32A  47      		LD	B,A		; TO AN ADJACENT TRACK TO RE-CALIBRATE
 726:11257+4	F32B  B7      		OR	A		; AND REMOVE POSSIBLE MEDIA CONTAMINANT
 727:11261+7+5	F32C  2004    		JR	NZ,RCOV2A
 728:11268+7	F32E  0E01    		LD	C, 1		;STEP TO TRACK#1 IF ON TRACK# 0
 729:11275+12	F330  1802    		JR	RCOV2B
 730:				;
 731:11287+4	F332  3D      	RCOV2A:	DEC	A		;STEP TO NEXT OUTER TRACK
 732:11291+4	F333  4F      		LD	C,A
 733:11295+11	F334  C5      	RCOV2B:	PUSH	BC
 734:11306+17	F335  CD75F2  		CALL	STEP		;STEP HEAD TO ADJACENT TRACK
 735:11323+10	F338  D1      		POP	DE
 736:11333+4	F339  43      		LD	B,E		;EXCHANGE CONTENTS OF B AND C
 737:11337+4	F33A  4A      		LD	C,D
 738:11341+17	F33B  CD75F2  		CALL	STEP		;STEP BACK TO ORIGINAL TRACK
 739:11358+17	F33E  CD95F2  		call	verify
 740:11375+10	F341  C9      		ret			;allow retry successful read id
 741:				;
 742:				;	ARRIVE HERE IF RECORD-NOT-FOUND ERROR
 743:				;
 744:11385+17	F342  CD95F2  	recov3:	call	verify		;read an id mark to verify position
 745:11402+7+5	F345  2012    		JR	NZ,RCOV4A	;RECALIBRATE IF VERIFY FAILS
 746:				
 747:11409+11	F347  DB41    		IN	A,(TRKREG)	;LOAD A WITH CURENT TRACK# UNDER HEAD
 748:11420+19	F349  DDBE02  		CP	(IX+DSKTRK)
 749:11439+7+5	F34C  200D    		JR	NZ,RCOV4B	;JUMP IF NOT ON CORRECT TRACK
 750:				;
 751:				;	ARRIVE HERE IF ON CORRECT TRACK
 752:				;
 753:11446+13	F34E  3A33FF  		ld	a,(rwmax)
 754:11459+10	F351  21C6FF  		ld	hl,rwtry
 755:11469+7	F354  96      		sub	(hl)		;test if this is first retry after rnf error
 756:11476+5+6	F355  C8      		ret	z
 757:				
 758:11481+7	F356  3E10    		ld	a,00010000b
 759:11488+10	F358  C9      		ret			;indicate permanent rnf error
 760:				;
 761:				;	ARRIVE HERE IF HEAD POSITION IS INCORRECT
 762:				;
 763:11498+7	F359  3EFF    	RCOV4A:	LD	A,255		;SET A TO FORCE RESTORE BEFORE SEEK
 764:11505+13	F35B  322DFF  	RCOV4B:	LD	(TRACK),A
 765:11518+17	F35E  CDF8F1  		CALL	SEEKTRK		;SEEK TRACK# SPECIFIED IN IOCB
 766:11535+10	F361  C9      		RET
 767:				;
 768:				;
 769:				;
 770:				;
 771:				;	EXECUTE TYPE 2 COMMAND (READ/WRITE/READ ID) WITH TIMEOUT
 772:				;
 773:     -	F362          	TYP2CMD:
 774:11545+17	F362  CD89F3  		CALL	CMDOUT		;ISSUE COMMAND
 775:11562+11	F365  C5      		PUSH	BC
 776:11573+10	F366  016A18  		LD	BC,6250		;500,000/80 FOR ONE HALF SECOND DELAY
 777:11583+12	F369  1807    		JR	TPCMD2
 778:				;
 779:				;
 780:				;	EXECUTE TYPE 1 COMMAND (SEEK/STEP/RESTORE)
 781:				;
 782:     -	F36B          	TYP1CMD:
 783:11595+17	F36B  CD89F3  		CALL	CMDOUT
 784:11612+11	F36E  C5      		PUSH	BC
 785:11623+10	F36F  017C92  		LD	BC,37500	;3,000,000/80 FOR 3 SECONDS DELAY
 786:11633+11	F372  DB40    	TPCMD2:	IN	A,(STSREG)
 787:11644+8	F374  CB47    		BIT	0,A
 788:11652+7+5	F376  280A    		JR	Z,TPCMD3	;EXIT IF BUSY BIT GOES AWAY
 789:				
 790:11659+17	F378  CD8BF3  		CALL	CMDT1		;DELAY 56 MICROSECONDS
 791:11676+6	F37B  0B      		DEC	BC
 792:11682+4	F37C  78      		LD	A,B
 793:11686+4	F37D  B1      		OR	C
 794:11690+7+5	F37E  20F2    		JR	NZ,TPCMD2	;LOOP TAKES 80 MICROSECONDS
 795:				
 796:11697+7	F380  3E10    		LD	A,00010000B
 797:				
 798:     -	F382          	TPCMD3:
 799:     -	0000          	IF WD1772
 801:				ELSE
 802:11704+4	F382  47      		LD	B,A
 803:11708+17	F383  CD91F3  		CALL	FORCE
 804:11725+4	F386  78      		LD	A,B
 805:				ENDIF
 806:11729+10	F387  C1      		POP	BC
 807:11739+10	F388  C9      		RET
 808:				;
 809:				;
 810:				;
 811:     -	F389          	CMDOUT:
 812:11749+11	F389  D340    		OUT	(CMDREG),A	;OUTPUT DISK CONTROLLER COMMAND BYTE
 813:11760+7	F38B  3E0E    	CMDT1:	LD	A,14	
 814:11767+4	F38D  3D      	CMDT2:	DEC	A
 815:11771+7+5	F38E  20FD    		JR	NZ,CMDT2	;DELAY 56 MICROSECONDS
 816:11778+10	F390  C9      		RET
 817:				;
 818:				;
 819:				;
 820:				;
 821:     -	F391          	FORCE:
 822:     -	0000          	IF WD1772
 827:				ELSE
 828:11788+7	F391  3ED0    		LD	A,FINCMD	;LOAD FORCE-INTERRUPT-IMMEDIATE CMD
 829:11795+17	F393  CD89F3  		CALL	CMDOUT		;CLEAR 179X AND LATCH READY/HLD/TK0 ETC
 830:11812+11	F396  DB40    		IN	A,(STSREG)	;READ STATUS REGISTER CONTENTS
 831:11823+10	F398  C9      		RET
 832:				ENDIF
 833:				;
 834:				;
 835:				;
 836:				;
 837:				;
 838:     -	F399          	HLDWAIT:
 839:11833+16	F399  2A32FF  		LD	HL,(HLDTIM)	;LOAD HL WITH HEAD LOAD DELAY
 840:11849+7	F39C  2600    		LD	H,0		;RANGE 1..256 MILLISECONDS
 841:				
 842:11856+4	F39E  AF      	WAIT:	XOR	A
 843:11860+4	F39F  3D      	WAIT2:	DEC	A
 844:11864+7+5	F3A0  20FD    		JR	NZ,WAIT2	;DELAY 1 MILLISECOND
 845:11871+6	F3A2  2B      		DEC	HL
 846:11877+4	F3A3  7C      		LD	A,H
 847:11881+4	F3A4  B5      		OR	L
 848:11885+7+5	F3A5  20F7    		JR	NZ,WAIT		;LOOP UNTIL HL=0
 849:11892+10	F3A7  C9      		RET
 850:				;
 851:				;
 852:				;
 853:				;	... CTC INTERRUPT CONTROL ROUTINES FOR DISK HANDLER ...
 854:				;
 855:				;
 856:				;
 857:     -	F3A8          	WATCHDOG:
 858:11902+7	F3A8  3ED0    		LD	A,FINCMD
 859:11909+11	F3AA  D340    		OUT	(CMDREG),A	;ABORT DISK CONTROLLER OPERATION
 860:11920+7	F3AC  3E01    		LD	A,00000001B
 861:11927+11	F3AE  D383    		OUT	(CTC3),A	;RESET INTERRUPT FROM CTC3
 862:11938+10	F3B0  2103F3  		LD	HL,RWEXIT
 863:11948+19	F3B3  E3      		EX	(SP),HL		;TOSS RETURN ADDRESS AND PLANT FAKE ONE
 864:11967+7	F3B4  3E10    		LD	A,00010000B
 865:11974+4	F3B6  B7      		OR	A		;INDICATE RECORD-NOT-FOUND ERROR
 866:11978+4	F3B7  FB      		EI
 867:11982+14	F3B8  ED4D    		RETI			;INSURE CTC IRQ LOGIC GETS RESTORED
 868:				;
 869:				;
 870:				;
 871:				;
 872:				;
 873:				;	... MILLISECOND TIMER INTERRUPT ROUTINES ...
 874:				;
 875:				;
 876:     -	F3BA          	STARTMR:
 877:11996+4	F3BA  F3      		DI
 878:12000+7	F3BB  3E87    		LD	A,10000111B
 879:12007+11	F3BD  D383    		OUT	(CTC3),A
 880:12018+7	F3BF  3EFA    		LD	A,250
 881:12025+11	F3C1  D383    		OUT	(CTC3),A
 882:12036+10	F3C3  21D2F3  		LD	HL,TMRIRQ
 883:12046+16	F3C6  2216FF  		LD	(CTCVEC+6),HL
 884:12062+4	F3C9  FB      		EI
 885:12066+10	F3CA  C9      		RET
 886:				;
 887:				;
 888:				;
 889:     -	F3CB          	STOPTMR:
 890:12076+4	F3CB  F3      		DI
 891:12080+7	F3CC  3E01    		LD	A,00000001B
 892:12087+11	F3CE  D383    		OUT	(CTC3),A
 893:12098+4	F3D0  FB      		EI
 894:12102+10	F3D1  C9      		RET
 895:				;
 896:				;
 897:				;
 898:     -	F3D2          	TMRIRQ:
 899:12112+11	F3D2  E5      		PUSH	HL
 900:12123+4	F3D3  FB      		EI
 901:12127+16	F3D4  2AC7FF  		LD	HL,(TICKS)
 902:12143+6	F3D7  23      		INC	HL		;BUMP FREE RUNING MILLISECOND COUNTER
 903:12149+16	F3D8  22C7FF  		LD	(TICKS),HL
 904:12165+10	F3DB  E1      		POP	HL
 905:12175+14	F3DC  ED4D    		RETI
 906:				;
 907:				;
 908:     -	0000          	IF WD1772
 930:				ENDIF
**** ..\src\ROM.MAC ****
  39:					INCLUDE	MINIMON.MAC
**** ..\src\MINIMON.MAC ****
   1:				;
   2:				;
   3:				;
   4:     -	F3DE          	MINIMON:
   5:12189+7	F3DE  3E01    		LD	A,1
   6:12196+11	F3E0  D352    		OUT	(BANKSW),A	;SWITCH TO ALL-RAM CONFIGURATION
   7:12207+17	F3E2  CDFCF5  		CALL	CONINIT		;INITIALIZE SERIAL CONSOLE PORT
   8:12224+17	F3E5  CDC9F4  		CALL	PNEXT
   9:     -	F3E8  0D0A    		DEFB	CR,LF
  10:     -	0001          	IF SALLYBUILD
  11:     -	F3EA  53616C6C		DEFB	"Sally2"
	              7932
  12:				ELSE
  14:				ENDIF
  15:     -	F3F0  00      		DEFB	NULL
  16:12241+10	F3F1  21F1F3  	PROMPT:	LD	HL,PROMPT
  17:12251+11	F3F4  E5      		PUSH	HL		;PUT RETURN ADDRESS ON STACK
  18:12262+17	F3F5  CDC9F4  		CALL	PNEXT
  19:     -	F3F8  0D0A2320		DEFB	CR,LF,'# ',NULL
	              00
  20:12279+17	F3FD  CDB2F4  		CALL	ECHO
  21:12296+7	F400  FE20    		CP	' '
  22:12303+5+6	F402  D8      		RET	C		;IGNORE NON-PRINTABLE CHATACTERS
  23:				
  24:12308+4	F403  4F      		LD	C,A		;SAVE COMMAND CHARACTER IN C
  25:12312+4	F404  AF      		XOR	A
  26:12316+4	F405  67      		LD	H,A
  27:12320+4	F406  6F      		LD	L,A
  28:12324+11	F407  29      	PROM1:	ADD	HL,HL		;MULTIPLY RESULT BY 16
  29:12335+11	F408  29      		ADD	HL,HL
  30:12346+11	F409  29      		ADD	HL,HL
  31:12357+11	F40A  29      		ADD	HL,HL
  32:12368+4	F40B  B5      		OR	L		;APPEND NEW LOW ORDER DIGIT
  33:12372+4	F40C  6F      		LD	L,A
  34:12376+17	F40D  CDB2F4  		CALL	ECHO		;GET A CHARACTER FROM LINE INPUT
  35:12393+7	F410  FE0D    		CP	CR
  36:12400+7+5	F412  280C    		JR	Z,PROM3		;EXIT LOOP IF RETURN TYPED
  37:12407+17	F414  CD83F4  		CALL	ASCHEX		;CONVERT ASCII TO NUMERIC
  38:12424+7+5	F417  30EE    		JR	NC,PROM1	;KEEP SHIFTING IF VALID HEX
  39:				
  40:12431+17	F419  CDC9F4  	PROM2:	CALL	PNEXT
  41:     -	F41C  203F00  		DEFB	' ?',NULL
  42:12448+10	F41F  C9      		RET
  43:				;
  44:12458+17	F420  CDD5F4  	PROM3:	CALL	CRLF
  45:12475+4	F423  79      		LD	A,C
  46:12479+7	F424  FE47    		CP	'G'
  47:12486+7+5	F426  2836    		JR	Z,GOTO		;DO GOTO IF 'G'
  48:12493+7	F428  FE42    		CP	'B'
  49:12500+7+5	F42A  2833    		JR	Z,BOOT		;DO BOOT LOADER IF 'B'
  50:12507+7	F42C  FE4D    		CP	'M'
  51:12514+7+5	F42E  20E9    		JR	NZ,PROM2	;***TEMP***
  52:				
  53:				;  **** This code section does not exist on production ROM ****
  54:				;	.COMMENT %
  55:				;	JR	Z,VIEW		;DO MEMORY EXAMINE/CHANGE IF 'M'
  56:				;	CP	'D'
  57:				;	JR	NZ,PROM2	;FALL INTO MEMORY DUMP IF 'D'
  58:				;
  59:				;
  60:				;
  61:				;	-- TABULAR MEMORY DUMP COMMAND --
  62:				;
  63:				;DUMP:
  64:				;	LD	C,16
  65:				;DUMP1:	PUSH	HL		;SAVE STARTING ADDRESS
  66:				;	CALL	PUT4HS		;PRINT STARTING ADDRESS IN HEX
  67:				;	LD	B,8
  68:				;DUMP2:	LD	A,(HL)		;GET A DATA BYTE @ HL
  69:				;	INC	HL
  70:				;	CALL	PUT2HS		;PRINT THE DATA IN HEX
  71:				;	DJNZ	DUMP2		;REPEAT 16 TIMES
  72:				;	POP	HL		;RESTORE STARTING ADDRESS
  73:				;	LD	B,8
  74:				;DUMP3:	LD	A,(HL)		;GET BACK DATA BYTE @ HL
  75:				;	INC	HL
  76:				;	RES	7,A
  77:				;	CP	20H
  78:				;	JR	C,DUMP4
  79:				;	CP	7FH
  80:				;	JR	C,DUMP5
  81:				;DUMP4:	LD	A,'.'		;PRINT A DOT IF DATA < 20 OR > 7F
  82:				;DUMP5:	CALL	OUTPUT		;PRINT ASCII CHARACTER IN A
  83:				;	DJNZ	DUMP3
  84:				;	CALL	CRLF
  85:				;	DEC	C
  86:				;	JR	NZ,DUMP1
  87:				;	RET
  88:				;
  89:				;
  90:				;	-- MEMORY EXAMINE COMMAND --
  91:				;
  92:     -	F430          	VIEW:
  93:12521+17	F430  CD93F4  		CALL	PUT4HS
  94:12538+7	F433  7E      		LD	A,(HL)
  95:12545+17	F434  CD98F4  		CALL	PUT2HS
  96:12562+17	F437  CDB2F4  		CALL	ECHO
  97:12579+7	F43A  FE0D    		CP	CR
  98:12586+7+5	F43C  2818    		JR	Z,VIEW4
  99:12593+7	F43E  FE2D    		CP	'-'
 100:12600+7+5	F440  2816    		JR	Z,VIEW5
 101:12607+17	F442  CD83F4  		CALL	ASCHEX
 102:12624+4	F445  3F      		CCF	
 103:12628+5+6	F446  D0      		RET	NC
 104:12633+4	F447  07      		RLCA	
 105:12637+4	F448  07      		RLCA	
 106:12641+4	F449  07      		RLCA	
 107:12645+4	F44A  07      		RLCA	
 108:12649+4	F44B  4F      		LD	C,A
 109:12653+17	F44C  CDB2F4  		CALL	ECHO
 110:12670+17	F44F  CD83F4  		CALL	ASCHEX
 111:12687+4	F452  3F      		CCF	
 112:12691+5+6	F453  D0      		RET	NC
 113:12696+4	F454  B1      		OR	C
 114:12700+7	F455  77      		LD	(HL),A
 115:12707+6	F456  23      	VIEW4:	INC	HL
 116:12713+6	F457  23      		INC	HL
 117:12719+6	F458  2B      	VIEW5:	DEC	HL
 118:12725+17	F459  CDD5F4  		CALL	CRLF
 119:12742+12	F45C  18D2    		JR	VIEW
 120:				;
 121:				;
 122:				;
 123:				;	-- JUMP TO MEMORY LOCATION COMMAND --
 124:				;
 125:     -	F45E          	GOTO:
 126:12754+4	F45E  E9      		JP	(HL)
 127:				;
 128:				;
 129:				;
 130:				;	-- DISK BOOT LOADER --
 131:				;
 132:     -	F45F          	BOOT:
 133:12758+14	F45F  DD217AF4		LD	IX,BOOTCB
 134:12772+17	F463  CD22F0  		CALL	DISKDVR		;ATTEMPT TO READ BOOT SECTOR
 135:12789+19	F466  DD7E08  		LD	A,(IX+DSKSTS)
 136:12808+4	F469  B7      		OR	A
 137:12812+10+7	F46A  CC8000  		CALL	Z,0080H		;EXECUTE BOOT IF NO ERRORS
 138:12822+11	F46D  F5      		PUSH	AF
 139:12833+17	F46E  CDC9F4  		CALL	PNEXT
 140:     -	F471  20455252		DEFB	' ERR ',NULL
	              2000
 141:12850+10	F477  F1      		POP	AF
 142:12860+12	F478  1825    		JR	PUT2HX
 143:				;
 144:				;
 145:     -	F47A  01      	BOOTCB:	DEFB	GETSEC
 146:     -	F47B  00      		DEFB	0
 147:     -	F47C  00      		DEFB	0
 148:     -	F47D  01      		DEFB	1
 149:     -	F47E  8000    		DEFW	0080H
 150:     -	F480  8000    		DEFW	128
 151:     -	F482  00      		DEFB	0
 152:				;
 153:				;
 154:				;
 155:     -	F483          	ASCHEX:
 156:12872+7	F483  D630    		SUB	'0'
 157:12879+5+6	F485  D8      		RET	C
 158:12884+7	F486  FE0A    		CP	10
 159:12891+4	F488  3F      		CCF
 160:12895+5+6	F489  D0      		RET	NC
 161:12900+7	F48A  D607    		SUB	7
 162:12907+7	F48C  FE0A    		CP	10
 163:12914+5+6	F48E  D8      		RET	C
 164:12919+7	F48F  FE10    		CP	16
 165:12926+4	F491  3F      		CCF
 166:12930+10	F492  C9      		RET
 167:				;
 168:				;
 169:				;
 170:     -	F493          	PUT4HS:
 171:12940+4	F493  7C      		LD	A,H
 172:12944+17	F494  CD9FF4  		CALL	PUT2HX
 173:12961+4	F497  7D      		LD	A,L
 174:     -	F498          	PUT2HS:
 175:12965+17	F498  CD9FF4  		CALL	PUT2HX
 176:12982+7	F49B  3E20    		LD	A,' '
 177:12989+12	F49D  181F    		JR	OUTPUT
 178:				;
 179:				;
 180:     -	F49F          	PUT2HX:
 181:13001+11	F49F  F5      		PUSH	AF
 182:13012+4	F4A0  1F      		RRA	
 183:13016+4	F4A1  1F      		RRA	
 184:13020+4	F4A2  1F      		RRA	
 185:13024+4	F4A3  1F      		RRA	
 186:13028+17	F4A4  CDA8F4  		CALL	PUTNIB
 187:13045+10	F4A7  F1      		POP	AF
 188:13055+7	F4A8  E60F    	PUTNIB:	AND	00001111B
 189:13062+7	F4AA  C690    		ADD	A,90H
 190:13069+4	F4AC  27      		DAA
 191:13073+7	F4AD  CE40    		ADC	A,40H
 192:13080+4	F4AF  27      		DAA
 193:13084+12	F4B0  180C    		JR	OUTPUT
 194:				;
 195:				;
 196:				;
 197:				;
 198:     -	F4B2          	ECHO:
 199:13096+11	F4B2  E5      		PUSH	HL
 200:13107+11	F4B3  C5      		PUSH	BC
 201:13118+17	F4B4  CD09F0  		CALL	CIV		;CALL CONSOLE INPUT VECTOR
 202:13135+10	F4B7  C1      		POP	BC
 203:13145+10	F4B8  E1      		POP	HL
 204:13155+8	F4B9  CBBF    		RES	7,A
 205:13163+7	F4BB  FE20    		CP	' '
 206:13170+5+6	F4BD  D8      		RET	C		;DO NOT ECHO CONTROL CHARACTERS
 207:				
 208:     -	F4BE          	OUTPUT:
 209:13175+11	F4BE  E5      		PUSH	HL
 210:13186+11	F4BF  C5      		PUSH	BC
 211:13197+11	F4C0  F5      		PUSH	AF
 212:13208+4	F4C1  4F      		LD	C,A
 213:13212+17	F4C2  CD0CF0  		CALL	COV		;CALL CONSOLE OUTPUT VECTOR
 214:13229+10	F4C5  F1      		POP	AF
 215:13239+10	F4C6  C1      		POP	BC
 216:13249+10	F4C7  E1      		POP	HL
 217:13259+10	F4C8  C9      		RET
 218:				;
 219:				;
 220:				;
 221:     -	F4C9          	PNEXT:
 222:13269+19	F4C9  E3      		EX	(SP),HL
 223:13288+7	F4CA  7E      	PNXT1:	LD	A,(HL)
 224:13295+17	F4CB  CDBEF4  		CALL	OUTPUT
 225:13312+7	F4CE  7E      		LD	A,(HL)
 226:13319+6	F4CF  23      		INC	HL
 227:13325+4	F4D0  B7      		OR	A
 228:13329+7+5	F4D1  20F7    		JR	NZ,PNXT1
 229:13336+19	F4D3  E3      		EX	(SP),HL
 230:13355+10	F4D4  C9      		RET
 231:				;
 232:				;
 233:				;
 234:13365+17	F4D5  CDC9F4  	CRLF:	CALL	PNEXT
 235:     -	F4D8  0D0A00  		DEFB	CR,LF,NULL
 236:13382+10	F4DB  C9      		RET
 237:				;
 238:				;
 239:				;
**** ..\src\ROM.MAC ****
  40:					INCLUDE	PRINTER.MAC
**** ..\src\PRINTER.MAC ****
   1:				;
   2:				;
   3:				;	... PARALLEL PRINTER OUTPUT ROUTINE ...
   4:				;
   5:     -	F4DC          	CENTOUT:
   6:				
   7:13392+4	F4DC  79      		LD	A,C
   8:13396+11	F4DD  D320    		OUT	(PRINTER),A	;OUTPUT DATA BYTE TO PRINTER
   9:13407+19	F4DF  E3      		EX	(SP),HL
  10:13426+19	F4E0  E3      		EX	(SP),HL
  11:13445+7	F4E1  3E19    		LD	A,25
  12:13452+11	F4E3  D353    		OUT	(STROBE),A
  13:13463+4	F4E5  3D      	CENT2:	DEC	A
  14:13467+7+5	F4E6  20FD    		JR	NZ,CENT2
  15:13474+11	F4E8  D353    		OUT	(STROBE),A	;TWANG THE STROBE
  16:13485+10	F4EA  C9      		RET
  17:				;
  18:				;
  19:				;
  20:     -	F4EB          	CENTRDY:
  21:13495+16	F4EB  2A47FF  		LD	HL,(PMASKS)
  22:13511+11	F4EE  DB20    		IN	A,(PRINTER)
  23:13522+4	F4F0  A5      		AND	L		;MASK BITS WITH 'AND'
  24:13526+4	F4F1  AC      		XOR	H		;COMPARE WITH 'XOR'
  25:13530+10	F4F2  C9      		RET			;ACC=0 IF PRINTER IS READY
  26:				;
  27:				;
  28:				;
  29:				;
**** ..\src\ROM.MAC ****
  41:     -	F4F3  95      	        DEFB 95h                ; **** Exists on original ROM? ****
  42:     -	F4F4 ..F4FF 00		defs	(($ and 0ff00h)+100h)-$
  43:					INCLUDE	SERIAL.MAC
**** ..\src\SERIAL.MAC ****
   1:				;
   2:				;
   3:				;
   4:				;	... BAUDRATE AND TIMING CONSIDERATIONS ...
   5:				;
   6:				;	THE FOLLOWING TABLE DETAILS THE BIT TIMES FOR THE BAUDRATES
   7:				;    SUPPORTED BY THE ATR-8000 AND THE CTC PROGRAMMING PARAMETERS
   8:				;    REQUIRED TO GENERATE THEM USING THE CTC IN THE TIMER MODE.
   9:				;    (IE. BY DIVIDING DOWN THE 4MHZ CLOCK WITH 16 OR 256 PRESCALE.)
  10:				;
  11:				;	BAUD      PERIOD    MODULUS   PRESCALE
  12:				;	----      ------    -------   --------
  13:				;      19200        52 us      13        16
  14:				;	9600       104 us      26        16
  15:				;	4800       208 us      52        16
  16:				;	2400       416 us     104        16
  17:				;	1200       832 us     208        16
  18:				;	 600      1664 us      26       256
  19:				;	 300      3328 us      52       256
  20:				;	 150      6656 us     104       256
  21:				;	  75     13312 us     208       256
  22:				;
  23:				;
  24:				;
  25:				;
  26:				;	... INTERRUPT SERVICE ROUTINES FOR SERIAL CONSOLE INPUT ...
  27:				;
  28:				;	AVERAGE EXECUTION TIME = 24.55 us FOR INTERRUPT SERVICE
  29:				;				  4.75 us FOR INTERRUPT ACKNOWLEDGE
  30:				;				 ------
  31:				;				 29.30 us PER BIT
  32:				;
  33:				;
  34:				;	*** START BAGE BOUNDARY RESTRICTIONS ***
  35:				;
  36:     -	F500          	CONPAGE	EQU	$
  37:				;
  38:				;
  39:     -	F500          	RXSTART:
  40:13540+11	F500  F5      		PUSH	AF
  41:13551+7	F501  3E87    		LD	A, CTC_D7_INT_EN + CTC_D6_MODE_TIM + CTC_D2_TCNEXT + CTC_D1_SW_RST + CTC_D0_CONTROL
  42:13558+11	F503  D380    		OUT	(CTC0),A		;RESET CTC AND PROGRAM FOR TIMER MODE
  43:13569+7	F505  3E1A    		LD	A,26			;TIME CONSTANT OF 26 - exactly 104us WHICH IS 9600 BAUD
  44:     -	F506          	RXBAUD	EQU	$-1			;BAUDRATE PARAM IS STORED HERE
  45:13576+11	F507  D380    		OUT	(CTC0),A		;PROGRAM THE TIME CONSTANT
  46:13587+7	F509  3E17    		LD	A,LOW RXDATA
  47:13594+13	F50B  3210FF  		LD	(CTCVEC),A
  48:13607+7	F50E  3E7F    		LD	A,01111111B		;7 DATA BITS
  49:13614+13	F510  321CF5  	RXDAT2:	LD	(RXTEMP),A	;SET DATA SHIFTER TO ALL ONES
  50:13627+10	F513  F1      		POP	AF
  51:13637+4	F514  FB      		EI
  52:13641+14	F515  ED4D    		RETI				;EXECUTION TIME = 115 CLOCK CYCLES
  53:				;
  54:				;
  55:				;
  56:     -	F517          	RXDATA:
  57:13655+11	F517  F5      		PUSH	AF
  58:13666+11	F518  DB70    		IN	A,(ATARI)		;READ SERIAL INPUT BIT STREAM
  59:13677+4	F51A  17      		RLA					;SHIFT DATA BIT (=MSB) INTO CARRY
  60:13681+7	F51B  3E00    		LD	A,NULL			;LOAD A WITH PARTIAL DATA BYTE - NOTE THAT THIS VALUE RESETS AT LABEL RXDAT2
  61:     -	F51C          	RXTEMP	EQU	$-1
  62:13688+4	F51D  1F      		RRA					;SHIFT NEW BIT IN AND ONES OUT
  63:13692+7+5	F51E  38F0    		JR	C,RXDAT2
  64:				
  65:13699+13	F520  3200FF  		LD	(KEYBUF),A		;STORE CHARACTER IN CIRCULAR BUFFER
  66:     -	F521          	RXINP	EQU	$-2
  67:13712+7	F523  3E2C    		LD	A,LOW RXSTOP
  68:13719+13	F525  3210FF  		LD	(CTCVEC),A		;ADVANCE TO STOP BIT STATE
  69:13732+10	F528  F1      		POP	AF
  70:13742+4	F529  FB      		EI
  71:13746+14	F52A  ED4D    		RETI				;EXECUTION TIME = 105 CYCLES
  72:				;
  73:				;
  74:				;
  75:     -	F52C          	RXSTOP:
  76:13760+11	F52C  F5      		PUSH	AF
  77:13771+7	F52D  3EC7    		LD	A, CTC_D7_INT_EN + CTC_D6_MODE_CNT + CTC_D2_TCNEXT + CTC_D1_SW_RST + CTC_D0_CONTROL
  78:13778+11	F52F  D380    		OUT	(CTC0),A		;ENABLE INTERRUPT FROM START BIT
  79:13789+7	F531  3E01    		LD	A,1				;SET TIME CONSTANT TO 1 - 6.5us
  80:13796+11	F533  D380    		OUT	(CTC0),A		;PROGRAM THE TIME CONSTANT
  81:13807+13	F535  3A21F5  		LD	A,(RXINP)
  82:13820+4	F538  3C      		INC	A
  83:13824+7	F539  E60F    		AND	00001111B		;BUMP BUFFER POINTER MODULO 16
  84:13831+13	F53B  3221F5  		LD	(RXINP),A
  85:13844+7	F53E  3E00    		LD	A,LOW RXSTART
  86:13851+13	F540  3210FF  		LD	(CTCVEC),A		;SET VECTOR BACK TO START BIT CODE
  87:13864+10	F543  F1      		POP	AF
  88:13874+4	F544  FB      		EI
  89:13878+14	F545  ED4D    		RETI				;EXECUTION TIME = 132 CYCLES
  90:				;
  91:				;
  92:				;
  93:				;
  94:				;	... INTERRUPT ROUTINES FOR SERIAL DATA OUTPUT ...
  95:				;
  96:     -	F547          	TXSTART:
  97:13892+11	F547  F5      		PUSH	AF
  98:13903+4	F548  AF      		XOR	A
  99:13907+11	F549  D350    		OUT	(ATROUT),A	;SEND COMPLIMENT OF MARK AS START BIT
 100:13918+7	F54B  3E54    		LD	A,LOW TXDAT0
 101:13925+13	F54D  3212FF  		LD	(CTCVEC+2),A	;SET INTERRUPT VECTOR FOR DATA BIT 0
 102:13938+10	F550  F1      		POP	AF
 103:13948+4	F551  FB      		EI
 104:13952+14	F552  ED4D    		RETI
 105:				;
 106:				;
 107:				;
 108:				;
 109:				;
 110:     -	F554          	TXDAT0:
 111:13966+11	F554  F5      		PUSH	AF
 112:13977+7	F555  3E00    		LD	A,NULL
 113:     -	F556          	TXTMP0	EQU	$-1
 114:13984+11	F557  D350    		OUT	(ATROUT),A	;OUTPUT LSB OF SERIAL DATA TO CONSOLE
 115:13995+4	F559  1F      		RRA
 116:13999+13	F55A  3268F5  		LD	(TXTMP1),A	;SHIFT RIGHT TO PREPARE FOR NEXT BIT
 117:14012+7	F55D  3E66    		LD	A,LOW TXDAT1
 118:14019+13	F55F  3212FF  		LD	(CTCVEC+2),A	;DINK WITH VECTOR FOR NEXT TIME
 119:14032+10	F562  F1      		POP	AF
 120:14042+4	F563  FB      		EI
 121:14046+14	F564  ED4D    		RETI			;EXECUTION TIME = 94 CYCLES
 122:				;
 123:				;
 124:     -	F566          	TXDAT1:
 125:14060+11	F566  F5      		PUSH	AF
 126:14071+7	F567  3E00    		LD	A,NULL
 127:     -	F568          	TXTMP1	EQU	$-1
 128:14078+11	F569  D350    		OUT	(ATROUT),A
 129:14089+4	F56B  1F      		RRA
 130:14093+13	F56C  327AF5  		LD	(TXTMP2),A
 131:14106+7	F56F  3E78    		LD	A,LOW TXDAT2
 132:14113+13	F571  3212FF  		LD	(CTCVEC+2),A
 133:14126+10	F574  F1      		POP	AF
 134:14136+4	F575  FB      		EI
 135:14140+14	F576  ED4D    		RETI
 136:				;
 137:				;
 138:     -	F578          	TXDAT2:
 139:14154+11	F578  F5      		PUSH	AF
 140:14165+7	F579  3E00    		LD	A,NULL
 141:     -	F57A          	TXTMP2	EQU	$-1
 142:14172+11	F57B  D350    		OUT	(ATROUT),A
 143:14183+4	F57D  1F      		RRA
 144:14187+13	F57E  328CF5  		LD	(TXTMP3),A
 145:14200+7	F581  3E8A    		LD	A,LOW TXDAT3
 146:14207+13	F583  3212FF  		LD	(CTCVEC+2),A
 147:14220+10	F586  F1      		POP	AF
 148:14230+4	F587  FB      		EI
 149:14234+14	F588  ED4D    		RETI
 150:				;
 151:				;
 152:     -	F58A          	TXDAT3:
 153:14248+11	F58A  F5      		PUSH	AF
 154:14259+7	F58B  3E00    		LD	A,NULL
 155:     -	F58C          	TXTMP3	EQU	$-1
 156:14266+11	F58D  D350    		OUT	(ATROUT),A
 157:14277+4	F58F  1F      		RRA
 158:14281+13	F590  329EF5  		LD	(TXTMP4),A
 159:14294+7	F593  3E9C    		LD	A,LOW TXDAT4
 160:14301+13	F595  3212FF  		LD	(CTCVEC+2),A
 161:14314+10	F598  F1      		POP	AF
 162:14324+4	F599  FB      		EI
 163:14328+14	F59A  ED4D    		RETI
 164:				;
 165:				;
 166:     -	F59C          	TXDAT4:
 167:14342+11	F59C  F5      		PUSH	AF
 168:14353+7	F59D  3E00    		LD	A,NULL
 169:     -	F59E          	TXTMP4	EQU	$-1
 170:14360+11	F59F  D350    		OUT	(ATROUT),A
 171:14371+4	F5A1  1F      		RRA
 172:14375+13	F5A2  32B0F5  		LD	(TXTMP5),A
 173:14388+7	F5A5  3EAE    		LD	A,LOW TXDAT5
 174:14395+13	F5A7  3212FF  		LD	(CTCVEC+2),A
 175:14408+10	F5AA  F1      		POP	AF
 176:14418+4	F5AB  FB      		EI
 177:14422+14	F5AC  ED4D    		RETI
 178:				;
 179:				;
 180:     -	F5AE          	TXDAT5:
 181:14436+11	F5AE  F5      		PUSH	AF
 182:14447+7	F5AF  3E00    		LD	A,NULL
 183:     -	F5B0          	TXTMP5	EQU	$-1
 184:14454+11	F5B1  D350    		OUT	(ATROUT),A
 185:14465+4	F5B3  1F      		RRA
 186:14469+13	F5B4  32C2F5  		LD	(TXTMP6),A
 187:14482+7	F5B7  3EC0    		LD	A,LOW TXDAT6
 188:14489+13	F5B9  3212FF  		LD	(CTCVEC+2),A
 189:14502+10	F5BC  F1      		POP	AF
 190:14512+4	F5BD  FB      		EI
 191:14516+14	F5BE  ED4D    		RETI
 192:				;
 193:				;
 194:     -	F5C0          	TXDAT6:
 195:14530+11	F5C0  F5      		PUSH	AF
 196:14541+7	F5C1  3E00    		LD	A,NULL
 197:     -	F5C2          	TXTMP6	EQU	$-1
 198:14548+11	F5C3  D350    		OUT	(ATROUT),A
 199:14559+4	F5C5  1F      		RRA
 200:14563+13	F5C6  32D4F5  		LD	(TXTMP7),A
 201:14576+7	F5C9  3ED2    		LD	A,LOW TXDAT7
 202:14583+13	F5CB  3212FF  		LD	(CTCVEC+2),A
 203:14596+10	F5CE  F1      		POP	AF
 204:14606+4	F5CF  FB      		EI
 205:14610+14	F5D0  ED4D    		RETI
 206:				;
 207:				;
 208:				;
 209:     -	F5D2          	TXDAT7:
 210:14624+11	F5D2  F5      		PUSH	AF
 211:14635+7	F5D3  3E00    		LD	A,NULL
 212:     -	F5D4          	TXTMP7	EQU	$-1
 213:14642+11	F5D5  D350    		OUT	(ATROUT),A	;SEND LAST BIT WITHOUT SHIFTING AFTER
 214:14653+7	F5D7  3EE0    		LD	A,LOW TXSTOP
 215:14660+13	F5D9  3212FF  		LD	(CTCVEC+2),A	;SET VECTOR FOR STOP BIT NEXT TIME
 216:14673+10	F5DC  F1      		POP	AF
 217:14683+4	F5DD  FB      		EI
 218:14687+14	F5DE  ED4D    		RETI
 219:				;
 220:				;
 221:				;
 222:     -	F5E0          	TXSTOP:
 223:14701+11	F5E0  F5      		PUSH	AF
 224:14712+7	F5E1  3E01    		LD	A,1
 225:14719+11	F5E3  D350    		OUT	(ATROUT),A
 226:14730+7	F5E5  3EEE    		LD	A,LOW TXEXIT
 227:14737+13	F5E7  3212FF  		LD	(CTCVEC+2),A	;SET VECTOR TO CLEAR TX BUSY FLAG
 228:14750+10	F5EA  F1      		POP	AF
 229:14760+4	F5EB  FB      		EI
 230:14764+14	F5EC  ED4D    		RETI
 231:				;
 232:				;
 233:     -	F5EE          	TXEXIT:
 234:14778+11	F5EE  F5      		PUSH	AF
 235:14789+7	F5EF  3E01    		LD	A,00000001B
 236:14796+11	F5F1  D381    		OUT	(CTC1),A	;DISABLE INTERRUPT FROM XMIT BAUDRATE
 237:14807+7	F5F3  3EFF    		LD	A,255
 238:14814+13	F5F5  3212FF  		LD	(CTCVEC+2),A	;SET VECTOR SO BACKGROUND MONITOR IRQ
 239:14827+10	F5F8  F1      		POP	AF
 240:14837+4	F5F9  FB      	RETI1:	EI
 241:14841+14	F5FA  ED4D    		RETI
 242:				;
 243:				;
 244:     -	0000          		IF	(HIGH CONPAGE) NE (HIGH $)
 246:					ENDIF
 247:				;
 248:				;
 249:				;
 250:				;	*** END PAGE BOUNDARY RESTRICTIONS ***
 251:				;
 252:				;
 253:				;
 254:     -	F5FC          	CONINIT:
 255:14855+4	F5FC  F3      		DI
 256:14859+10	F5FD  21EEF5  		LD	HL,TXEXIT
 257:14869+16	F600  2212FF  		LD	(CTCVEC+2),HL
 258:14885+7	F603  3E07    		LD	A,00000111B
 259:14892+11	F605  D381    		OUT	(CTC1),A	;PROGRAM TX CTC IN TIMER MODE
 260:14903+13	F607  3A06F5  		LD	A,(RXBAUD)
 261:14916+11	F60A  D381    		OUT	(CTC1),A	;DIVIDE BY 26 GIVES 9600 BAUD
 262:				
 263:14927+10	F60C  2100FF  		LD	HL,KEYBUF
 264:14937+16	F60F  2221F5  		LD	(RXINP),HL	;RESET RX FIFO IN/OUT POINTERS
 265:14953+16	F612  2233F6  		LD	(RXOUT),HL
 266:     -	F615          	CINIT2:
 267:14969+4	F615  F3      		DI			;ALTERNATE ENTRY FROM 'DISKIO'
 268:14973+7	F616  3E01    		LD	A,1
 269:14980+11	F618  D357    		OUT	(CDMUX),A	;SET MUX TO ENABLE DATA TO CTC0
 270:14991+7	F61A  067E    	CINIT3:	LD	B,126
 271:14998+11	F61C  DB70    	CINIT4:	IN	A,(ATARI)
 272:15009+4	F61E  17      		RLA
 273:15013+7+5	F61F  30F9    		JR	NC,CINIT3		;RE-LOAD COUNT IN B IF INPUT LOW
 274:15020+8+5	F621  10F9    		DJNZ	CINIT4		;ELSE LOOP FOR ONE 9600 BAUD CHAR TIME
 275:				
 276:15028+7	F623  3EC7    		LD	A, CTC_D7_INT_EN + CTC_D6_MODE_CNT + CTC_D2_TCNEXT + CTC_D1_SW_RST + CTC_D0_CONTROL
 277:15035+11	F625  D380    		OUT	(CTC0),A		;PROGRAM RX CTC IN COUNTER MODE
 278:15046+7	F627  3E01    		LD	A,1				;SET TIME CONSTANT TO 1 - 6.5us
 279:15053+11	F629  D380    		OUT	(CTC0),A		;PROGRAM THE TIME CONSTANT AND INTERRUPT ON NEXT START BIT
 280:15064+10	F62B  2100F5  		LD	HL,RXSTART
 281:15074+16	F62E  2210FF  		LD	(CTCVEC),HL
 282:15090+4	F631  FB      		EI
 283:15094+10	F632  C9      		RET
 284:				;
 285:				;
 286:     -	F633  00FF    	RXOUT:	DEFW	KEYBUF		;KEYBOARD BUFFER OUTPUT POINTER
 287:				;
 288:				;
 289:     -	F635          	CONST:
 290:15104+10	F635  2133F6  		LD	HL,RXOUT
 291:15114+13	F638  3A21F5  		LD	A,(RXINP)
 292:15127+7	F63B  96      		SUB	(HL)
 293:15134+5+6	F63C  C8      		RET	Z		;A=0 IF NO DATA AVAILABLE
 294:				
 295:15139+7	F63D  3EFF    		LD	A,255
 296:15146+10	F63F  C9      		RET
 297:				;
 298:				;
 299:				;
 300:     -	F640          	CONIN:
 301:15156+17	F640  CD35F6  		CALL	CONST
 302:15173+7+5	F643  28FB    		JR	Z,CONIN
 303:				
 304:15180+16	F645  2A33F6  		LD	HL,(RXOUT)
 305:15196+7	F648  7E      		LD	A,(HL)		;GET RECEIVED DATA FROM FIFO
 306:15203+4	F649  2C      		INC	L
 307:15207+8	F64A  CBA5    		RES	4,L		;INCREMENT HL MODULO 16
 308:15215+16	F64C  2233F6  		LD	(RXOUT),HL
 309:15231+10	F64F  C9      		RET
 310:				;
 311:				;
 312:				;
 313:     -	F650          	CONOUT:
 314:15241+13	F650  3A12FF  		LD	A,(CTCVEC+2)
 315:15254+7	F653  FEEE    		CP	LOW TXEXIT
 316:15261+7+5	F655  38F9    		JR	C,CONOUT	;LOOP TILL WE REACH 'TEXIT' OR HIGHER
 317:				
 318:15268+4	F657  79      		LD	A,C
 319:15272+7	F658  E67F    		AND	01111111B	;CLEAR BIT 7 AND SET FLAGS
 320:15279+10	F65A  E25FF6  		JP	PO,COUT2
 321:15289+7	F65D  F680    		OR	10000000B
 322:15296+13	F65F  3256F5  	COUT2:	LD	(TXTMP0),A	;STORE RESULTING CHARACTER FOR XMIT
 323:15309+7	F662  3E47    		LD	A,LOW TXSTART
 324:15316+13	F664  3212FF  		LD	(CTCVEC+2),A	;SET VECTOR FOR START BIT INTERRUPT
 325:15329+7	F667  3E81    		LD	A,10000001B
 326:15336+11	F669  D381    		OUT	(CTC1),A	;PROGRAM TX CTC IN TIMER MODE
 327:15347+10	F66B  C9      		RET
 328:				;
 329:				;
 330:				;
**** ..\src\ROM.MAC ****
  44:				;
  45:				;	CODE PAST THIS POINT IS ONLY USED IN ATARI DISK MODE
  46:				;
  47:					INCLUDE	BITBANG.MAC
**** ..\src\BITBANG.MAC ****
   1:				;********************************************************
   2:				;*							*
   3:				;*	19200 BAUD SERIAL I/O FOR ATARI COMM PORT	*
   4:				;*							*
   5:				;********************************************************
   6:				;
   7:				;
   8:				;	19200 BAUD SERIAL I/O IS HALF DUPLEX DUE TO OBVIOUS
   9:				;	TIMING CONSTRAINTS. ALL TRANSFERS ARE DONE FROM 4K PAGE
  10:				;	ALIGNED BUFFER 'IOBUFF', WITH BLOCK START ADDRESS
  11:				;	ARRANGED SO END-OF-BLOCK CONDITION IS MET WHEN POINTER
  12:				;	ROLLS OVER THE NEXT EVEN PAGE BYTE BOUNDARY.
  13:				;
  14:				;	CALL WITH BLOCK START POINTER IN HL ,DATA POLARITY MASK
  15:				;	IN D (WHERE D=0 TRUE DATA, D=FF INVERTED DATA) AND
  16:				;	'C' OR 'E' HANDSHAKE CHARACTER IN E.
  17:				;
  18:				;
  19:     -	F66C          	SENDBUFF:
  20:15357+11	F66C  E5      		PUSH	HL		;SAVE DATA BLOCK POINTER
  21:15368+11	F66D  D5      		PUSH	DE		;SAVE POLARITY MASK FOR DATA
  22:15379+10	F66E  2101C3  		LD	HL,IOBUFF+LEN+1
  23:15389+7	F671  73      		LD	(HL),E
  24:15396+7	F672  1600    		LD	D,0
  25:15403+17	F674  CD84F6  		CALL	XMITBUF		;SEND 'C' OR 'E' CHARACTER FROM E
  26:15420+10	F677  D1      		POP	DE
  27:15430+10	F678  E1      		POP	HL
  28:15440+7	F679  1E00    		LD	E,0
  29:15447+17	F67B  CD84F6  		CALL	XMITBUF		;THEN SEND DATA BLOCK TO ATARI
  30:15464+10	F67E  2101C3  		LD	HL,IOBUFF+LEN+1
  31:15474+7	F681  73      		LD	(HL),E		;FALL THROUGH TO SEND CHECKSUM
  32:15481+7	F682  1600    		LD	D,0
  33:				;
  34:				;	CALL WITH DATA BLOCK POINTER IN HL.
  35:				;	PRESERVES MASK/CKECKSUM IN D/E.
  36:				;
  37:     -	F684          	XMITBUF:
  38:15488+4	F684  F3      		DI
  39:15492+10	F685  0119F7  		LD	BC,STARBIT
  40:     -	F688          	SalyXMITBUF:
  41:15502+20	F688  ED4312FF		LD	(CTCVEC+2),BC	;SET UP INITIAL INTERRUPT VECTOR
  42:15522+7	F68C  0608    		LD	B,8
  43:15529+7	F68E  3E87    		LD	A, CTC_D7_INT_EN + CTC_D6_MODE_TIM + CTC_D2_TCNEXT + CTC_D1_SW_RST + CTC_D0_CONTROL
  44:15536+11	F690  D381    		OUT	(CTC1),A		;PROGRAM CTC1 TO INTERRUPT AT BIT RATE
  45:15547+7	F692  3E0D    		LD	A,13			;SET TIME CONSTANT TO 13 - 52us. EXACT IS 52.083us
  46:15554+11	F694  D381    		OUT	(CTC1),A		;COUNT 13*(16*250 NS) GIVES 19200 BAUD WITH 0.16% ERROR
  47:15565+4	F696  FB      		EI
  48:15569+12	F697  18FE    		JR	$		;SPIN HERE TILL INTERRUPTS GET US OUT
  49:				;
  50:				;
  51:				;
  52:				;
  53:				;
  54:				;
  55:				;	... INTERRUPT FOR COMMAND INPUT HIGH->LOW TRANSITION ..
  56:				;
  57:     -	F699          	CSTART:
  58:15581+4	F699  08      		EX	AF,AF'
  59:15585+4	F69A  D9      		EXX
  60:15589+7	F69B  3EFF    		LD	A,255
  61:15596+13	F69D  3255FF  		LD	(CMDFLG),A	;SET 'CMDFLG' FLAG TO ERROR STATE FIRST
  62:15609+11	F6A0  D357    		OUT	(CDMUX),A	;SWITCH MUX TO ENABLE SERIAL DATA IRQ
  63:15620+10	F6A2  21FBC2  		LD	HL,IOBUFF+LEN-5	;POINT DE 5 BYTES BEFORE END OF BUFFER
  64:15630+17	F6A5  CDD9F6  		CALL	RXBLOCK		;ATTEMPT TO RECEIVE COMMAND FRAME
  65:15647+7+5	F6A8  300A    		JR	NC,CSTRT1	;JUMP IF NO DATA HAPPENED
  66:				
  67:15654+6	F6AA  2B      		DEC	HL
  68:15660+7	F6AB  7E      		LD	A,(HL)
  69:15667+4	F6AC  B9      		CP	C		;COMPARE DERRIVED AND RECVD CHECKSUMS
  70:15671+7+5	F6AD  2005    		JR	NZ,CSTRT1	;JUMP IF CHECKSUM ERROR
  71:				
  72:15678+7	F6AF  3E01    		LD	A,1
  73:15685+13	F6B1  3255FF  		LD	(CMDFLG),A	;SET FLAG IF GOOD COMMAND FRAME
  74:15698+4	F6B4  08      	CSTRT1:	EX	AF,AF'
  75:15702+4	F6B5  D9      		EXX
  76:15706+4	F6B6  FB      		EI
  77:15710+14	F6B7  ED4D    		RETI
  78:				;
  79:				;
  80:				;
  81:				;	... DATA FRAME RECEIVE SUBROUTINE ...
  82:				;
  83:     -	F6B9          	RECVBUFF:
  84:15724+4	F6B9  F3      		DI
  85:15728+10	F6BA  2100C1  		LD	HL,IOBUFF
  86:15738+17	F6BD  CDD9F6  		CALL	RXBLOCK		;BITBANG A BLOCK OF INPUT DATA
  87:15755+4	F6C0  FB      		EI
  88:15759+7+5	F6C1  380D    		JR	C,RBUFF2	;JUMP IF BUFFER OVERFLOWED
  89:				
  90:15766+6	F6C3  2B      		DEC	HL
  91:15772+7	F6C4  7E      		LD	A,(HL)
  92:15779+4	F6C5  B9      		CP	C
  93:15783+7+5	F6C6  2008    		JR	NZ,RBUFF2	;JUMP IF CHECKSUMS DON'T AGREE
  94:				
  95:15790+10	F6C8  1100C1  		LD	DE,IOBUFF
  96:15800+4	F6CB  B7      		OR	A
  97:15804+15	F6CC  ED52    		SBC	HL,DE		;ELSE COMPUTE LENGTH OF BLOCK LESS
  98:15819+4	F6CE  AF      		XOR	A		; CHECKSUM BYTE AND RETURN WITH
  99:15823+10	F6CF  C9      		RET			; RESULT IN HL AND ZERO FLAG SET
 100:				;
 101:15833+7	F6D0  3E4E    	RBUFF2:	LD	A,'N'
 102:15840+17	F6D2  CD56FC  		CALL	SENDCHAR	;SEND 'NAK' FOR BAD DATA FRAME
 103:15857+7	F6D5  3EFF    		LD	A,255
 104:15864+4	F6D7  B7      		OR	A
 105:15868+10	F6D8  C9      		RET			;RETURN WITH ACC SET NON=ZERO
 106:				;
 107:				;
 108:				;
 109:				;
 110:				;
 111:				;	... BITBANG INPUT SUBROUTINE ...
 112:				;
 113:				;	CALL WITH BLOCK START POINTER IN HL. RETURNS WITH
 114:				;	HL POINTING TO LAST BYTE+1 OF BLOCK RECEIVED.
 115:				;	THE CARRY BIT IS SET IF THE BUFFER FILLED UP BEFORE
 116:				;	THE BIT STREAM STOPPED.
 117:				;
 118:				;
 119:     -	F6D9          	RXBLOCK:
 120:15878+10	F6D9  11AA0A  		LD	DE,2730		;SET ABORT COUNTER FOR 32 MILLISECONDS
 121:     -	F6DC          	SalyRXBLOCK:
 122:15888+10	F6DC  010000  		LD	BC,0		;CLEAR B/C FOR CHECKSUM DERRIVATION
 123:15898+12	F6DF  1823    		JR	RXB35		;GO START LOOPING FOR START BIT
 124:				;
 125:15910+4	F6E1  79      	RXB1:	LD	A,C
 126:15914+4	F6E2  80      		ADD	A,B
 127:15918+7	F6E3  CE00    		ADC	A,0		;ACCUMULATE CHECKSUM ATARI STYLE
 128:15925+4	F6E5  4F      		LD	C,A
 129:15929+19	F6E6  E3      		EX	(SP),HL
 130:15948+19	F6E7  E3      		EX	(SP),HL
 131:15967+19	F6E8  E3      		EX	(SP),HL
 132:15986+19	F6E9  E3      		EX	(SP),HL
 133:16005+7	F6EA  0608    		LD	B,8
 134:				;
 135:				;	SERIAL->PARALLEL CONVERSION AT 52 MICROSECONDS PER BIT
 136:				;
 137:16012+7	F6EC  3E0B    	RXB2:	LD	A,11		;  7 CYCLES
 138:16019+7	F6EE  3E0B    		LD	A,11		;  7 CYCLES
 139:16026+4	F6F0  00      		NOP			;  4 CYCLES
 140:16030+4	F6F1  3D      	RXB3:	DEC	A		; 44 CYCLES  (11*4)
 141:16034+10	F6F2  C2F1F6  		JP	NZ,RXB3		;110 CYCLES  (11*10)
 142:16044+11	F6F5  DB70    		IN	A,(ATARI)	; 11 CYCLES
 143:16055+4	F6F7  17      		RLA			;  4 CYCLES
 144:16059+8	F6F8  CB1A    		RR	D		;  8 CYCLES
 145:16067+8+5	F6FA  10F0    		DJNZ	RXB2		; 13 CYCLES  (8 ON FINAL BIT)
 146:				
 147:16075+4	F6FC  42      		LD	B,D		;SAVE COPY OF LAST DATA BYTE IN B
 148:16079+7	F6FD  72      		LD	(HL),D		;THEN STORE IN MEMORY BUFFER @HL
 149:16086+6	F6FE  23      		INC	HL
 150:16092+4	F6FF  7C      		LD	A,H
 151:16096+7	F700  FEC3    		CP	HIGH (IOBUFF+LEN)
 152:16103+4	F702  3F      		CCF
 153:16107+5+6	F703  D8      		RET	C		;RETURN WITH CARRY SET IF BUFFER FILLED
 154:				
 155:     -	F704          	RXB35:
 156:     -	0001          	IF SALLYBUILD
 157:16112+10	F704  11A101  		LD	DE,417		;5 MILLISECONDS @ 12 MICROSECONDS/LOOP
 158:				ENDIF
 159:16122+7	F707  3E47    		LD	A, CTC_D6_MODE_CNT + CTC_D2_TCNEXT + CTC_D1_SW_RST + CTC_D0_CONTROL	; Set up values for CTC0
 160:16129+11	F709  D380    		OUT	(CTC0),A	;PUT CTC0 IN COUNTER MODE
 161:16140+4	F70B  AF      		XOR	A			;TIME CONSTANT OF 0 WHICH MEANS 256
 162:16144+11	F70C  D380    		OUT	(CTC0),A	;COUNT DATA HIGH->LOW EDGES MOD 256
 163:     -	0000          	IF SALLYBUILD <> 1
 165:				ENDIF
 166:				
 167:16155+11	F70E  DB80    	RXB4:	IN	A,(CTC0)
 168:16166+4	F710  B7      		OR	A
 169:16170+7+5	F711  20CE    		JR	NZ,RXB1		;NEW BYTE IS COMING IF START BIT LOW
 170:16177+6	F713  1B      		DEC	DE
 171:16183+4	F714  7A      		LD	A,D
 172:16187+4	F715  B3      		OR	E
 173:16191+7+5	F716  20F6    		JR	NZ,RXB4		;ELSE LOOP TILL TIMER RUNS OUT
 174:				
 175:16198+10	F718  C9      		RET			;RETURN WITH CARRY CLEAR IF TIMED OUT
 176:				;
 177:				;
 178:				;
 179:				;
 180:				;	**** PAGE BOUNDARY SENSITIVE CODE STARTS HERE ****
 181:				;
 182:     -	F719          	SERPAGE	EQU	$
 183:				;
 184:				;
 185:				;	... DAMN FAST TRANSMIT INTERRUPTS ...
 186:				;
 187:				;	HL ... POINTS TO DATA BLOCK TO BE SENT
 188:				;	 D ... HOLDS DATA POLARITY MASK
 189:				;	 E ... USED TO ACCUMULATE CHECKSUM
 190:				;	 B ... USED FOR DJNZ TO COUNT BITS
 191:				;	 C ... USED FOR PARALLEL-SERIAL OUTPUT
 192:				;
 193:				;
 194:     -	F719          	STARBIT:
 195:16208+4	F719  AF      		XOR	A
 196:16212+11	F71A  D350    		OUT	(ATROUT),A	;SEND START BIT
 197:16223+4	F71C  FB      		EI
 198:16227+7	F71D  7E      		LD	A,(HL)		;LOAD A WITH TRANSMIT DATA BYTE
 199:16234+6	F71E  23      		INC	HL		; AND INCREMENT BUFFER POINTER
 200:16240+4	F71F  AA      		XOR	D		;DO DATA POLARITY THING
 201:16244+4	F720  4F      		LD	C,A		;THEN STUFF IN C FOR SHIFTING OUT
 202:16248+4	F721  83      		ADD	A,E
 203:16252+7	F722  CE00    		ADC	A,0
 204:16259+4	F724  5F      		LD	E,A		;ACCUMULATE CHECKSUM IN E
 205:16263+7	F725  3E2C    		LD	A,LOW DATBIT
 206:16270+13	F727  3212FF  		LD	(CTCVEC+2),A	;FIX BAUDRATE INTERRUPT VECTOR
 207:16283+14	F72A  ED4D    		RETI			;RETURN TO IDLE LOOP
 208:				;
 209:				;
 210:				;
 211:     -	F72C          	DATBIT:
 212:16297+4	F72C  79      		LD	A,C
 213:16301+11	F72D  D350    		OUT	(ATROUT),A	;SEND DATA BIT (LSB)
 214:16312+4	F72F  FB      		EI
 215:16316+8	F730  CB19    		RR	C		;SHIFT DATA FOR NEXT BIT
 216:16324+8+5	F732  1005    		DJNZ	DATB2		;DECREMENT AND SKIP IF NOT LAST BIT
 217:				
 218:16332+7	F734  3E3B    		LD	A,LOW STOPB1
 219:16339+13	F736  3212FF  		LD	(CTCVEC+2),A	;THEN FIX VECTOR TO SEND STOP BIT
 220:16352+14	F739  ED4D    	DATB2:	RETI			;RETURN TO IDLE LOOP
 221:				;
 222:				;
 223:				;
 224:     -	F73B          	STOPB1:
 225:16366+7	F73B  3E01    		LD	A,1
 226:16373+11	F73D  D350    		OUT	(ATROUT),A	;SEND STOP BIT
 227:16384+4	F73F  FB      		EI
 228:16388+4	F740  7C      		LD	A,H
 229:16392+7	F741  FEC3    		CP	HIGH (IOBUFF+LEN)
 230:16399+7+5	F743  3009    		JR	NC,STOP1A	;JUMP IF BUFFER END REACHED
 231:				
 232:16406+7	F745  0608    		LD	B,8		;LOAD BITCOUNT FOR NEXT RECEIVE BYTE
 233:16413+7	F747  3E19    		LD	A,LOW STARBIT
 234:16420+13	F749  3212FF  		LD	(CTCVEC+2),A
 235:16433+14	F74C  ED4D    		RETI			;SET TO SEND SECOND STOP BIT
 236:				;
 237:16447+7	F74E  3E55    	STOP1A:	LD	A,LOW ENDBIT
 238:16454+13	F750  3212FF  		LD	(CTCVEC+2),A	;SET TO END TRANSMISSION
 239:16467+14	F753  ED4D    		RETI
 240:				;
 241:				;
 242:				;
 243:     -	0000          		IF	(HIGH SERPAGE) NE (HIGH $)
 245:					ENDIF
 246:				;
 247:				;
 248:				;
 249:     -	F755          	ENDBIT:
 250:     -	0001          	IF SALLYBUILD
 251:16481+7	F755  3E03    		LD	A,CTC_D1_SW_RST + CTC_D0_CONTROL	;SOFTWARE RESET - STOP INTERRUPTS FROM BAUDRATE CTC
 252:				ELSE
 254:				ENDIF
 255:16488+11	F757  D381    		OUT	(CTC1),A			;SEND COMMAND TO CTC1
 256:16499+4	F759  FB      		EI
 257:16503+7	F75A  3EFF    		LD	A,255
 258:16510+13	F75C  3212FF  		LD	(CTCVEC+2),A	;SET VECTOR BACK TO STANDARD PLACE
 259:16523+10	F75F  E1      		POP	HL		;DISCARD IRQ RETURN ADDRESS AND RETURN
 260:16533+14	F760  ED4D    		RETI			; TO SECOND ADDRESS ON STACK
 261:				;
 262:				;
 263:				;	**** END PAGE BOUNDARY RESTRICTIONS ****
 264:				;
 265:				;
**** ..\src\ROM.MAC ****
  48:					INCLUDE	ATARI.MAC
**** ..\src\ATARI.MAC ****
   1:				;	PAGE
   2:				;
   3:				;	<<< MAIN LOOP FOR ATARI DISK EMULATOR >>>
   4:				;
   5:				;
   6:				;
   7:				;
   8:     -	F762          	EMULATOR:
   9:16547+7	F762  3E01    		LD	A,1
  10:16554+11	F764  D352    		OUT	(BANKSW),A	;TURN OFF THE ROM
  11:				;
  12:				;	CHECK TO DETERMINE WHICH CONSOLE IS ACTIVE
  13:				;
  14:16565+10	F766  21FEC2  	LOGON:	LD	HL,IOBUFF+LEN-2
  15:16575+4	F769  F3      		DI
  16:16579+17	F76A  CDD9F6  		CALL	RXBLOCK		;LISTEN FOR A MESSAGE FROM ABOVE
  17:16596+4	F76D  FB      		EI
  18:16600+7+5	F76E  30F6    		JR	NC,LOGON	;KEEP LOOPING TILL SOMETHING RECEIVED
  19:16607+16	F770  2AFEC2  		LD	HL,(IOBUFF+LEN-2)
  20:16623+10	F773  11E680  		LD	DE,80E6H
  21:16633+4	F776  B7      		OR	A
  22:16637+15	F777  ED52    		SBC	HL,DE
  23:16652+10	F779  CADEF3  		JP	Z,MINIMON	;GOTO MONITOR IF 9600 BAUD <CR>
  24:				;
  25:				;	ENTER ATARI DISK EMULATOR MODE
  26:				;
  27:16662+7	F77C  3E03    		LD	A,3
  28:     -	F77E          	SalyLOGN1:
  29:16669+13	F77E  3233FF  		LD	(RWMAX),A	;DO LESS RETRIES IN ATARI MODE
  30:     -	F781          	SalyLOGN2:
  31:16682+7	F781  3E38    		LD	A,38H		;LOAD ACC WITH 'JR C,XX' OPCODE
  32:16689+13	F783  3288F1  		LD	(KLUDGE),A	;CRIPPLE READY ERROR FROM 'SELECT'
  33:16702+11	F786  DB50    		IN	A,(SERIN)
  34:16713+8	F788  CB5F    		BIT	3,A
  35:16721+7+5	F78A  2005    		JR	NZ,HAS850	;JUMP IF 850 JUMPER PRESENT
  36:				
  37:16728+7	F78C  3EFF    		LD	A,255
  38:16735+13	F78E  3223F8  		LD	(PTRID),A	;ELSE ZAP PRINTER ID IN TABLE
  39:				
  40:16748+10	F791  21E1F7  	HAS850:	LD	HL,DUMMY
  41:16758+16	F794  2219F0  		LD	(RENEW+1),HL	;MAKE DUMMY CONSOLE RE-INIT VECTOR
  42:16774+20	F797  ED5B1930		LD	DE,(RENEW+1-0C000H)
  43:16794+4	F79B  B7      		OR	A
  44:16798+15	F79C  ED52    		SBC	HL,DE
  45:16813+7+5	F79E  280C    		JR	Z,MAIN		;JUMP IF 16K MEMORY SIZE MACHINE
  46:				
  47:     -	0001          	IF SALLYBUILD
  48:16820+10	F7A0  210022  		LD	HL, 02200h	;was 0000h, now 0800h+26*256 track buffer = 2200h
  49:16830+16	F7A3  224BFF  		LD	(PBASE),HL	;ELSE SETUP FOR 39.5K PRINTER BUFFER
  50:16846+10	F7A6  21FF9D  		LD	HL,09DFFH	;bfffh - 2200h = 9dffh	
  51:				ELSE
  55:				ENDIF	;SALLYBUILD
  56:16856+16	F7A9  224DFF  		LD	(PSIZE),HL
  57:				
  58:16872+17	F7AC  CDD1F8  	MAIN:	CALL	SPOOLER		;KEEP BACKGROUND PRINTING GOING
  59:16889+16	F7AF  2A3AFF  		LD	HL,(FSMVEC)
  60:16905+17	F7B2  CDBDF7  		CALL	CALLHL		;DO ATARI TASK ROUTINE
  61:16922+16	F7B5  2A3CFF  		LD	HL,(EXTVEC)
  62:16938+17	F7B8  CDBDF7  		CALL	CALLHL		;DO EXTRA TASK ROUTINE
  63:16955+12	F7BB  18EF    		JR	MAIN
  64:				;
  65:				;
  66:16967+4	F7BD  E9      	CALLHL:	JP	(HL)
  67:				;
  68:				;
  69:				;
  70:     -	F7BE          	PWRWAIT:
  71:16971+11	F7BE  DB70    		IN	A,(ATARI)
  72:16982+7	F7C0  E68A    		AND	10001010B	;MASK TO DATA/POWER/COMMAND BITS
  73:16989+7	F7C2  FE8A    		CP	10001010B
  74:16996+5+6	F7C4  C0      		RET	NZ
  75:				
  76:17001+4	F7C5  F3      		DI
  77:17005+4	F7C6  AF      		XOR	A
  78:17009+13	F7C7  3255FF  		LD	(CMDFLG),A	;RESET COMMAND FRAME FLAG
  79:17022+11	F7CA  D357    		OUT	(CDMUX),A	;SET MUX TO GATE COMMAND LINE TO CTC0
  80:17033+7	F7CC  3ED7    		LD	A,CTC_D7_INT_EN + CTC_D6_MODE_CNT + CTC_D4_RISEEDGE + CTC_D2_TCNEXT + CTC_D1_SW_RST + CTC_D0_CONTROL	; Set up values for CTC0
  81:17040+11	F7CE  D380    		OUT	(CTC0),A	;RESET CTC AND ARM FOR HIGH->LOW IRQ
  82:17051+7	F7D0  3E01    		LD	A,1			;TIME CONSTANT OF 1
  83:17058+11	F7D2  D380    		OUT	(CTC0),A	;WRITE TIME CONSTANT
  84:17069+10	F7D4  2199F6  		LD	HL,CSTART
  85:17079+16	F7D7  2210FF  		LD	(CTCVEC),HL	;STORE INTERRUPT VECTOR
  86:17095+4	F7DA  FB      		EI
  87:17099+10	F7DB  21E2F7  		LD	HL,CMDWAIT
  88:17109+16	F7DE  223AFF  		LD	(FSMVEC),HL	;SET FSM VECTOR TO 'CMDHIGH' STATE
  89:17125+10	F7E1  C9      	DUMMY:	RET
  90:				;
  91:				;
  92:				;
  93:     -	F7E2          	CMDWAIT:
  94:17135+13	F7E2  3A55FF  		LD	A,(CMDFLG)
  95:17148+4	F7E5  B7      		OR	A			;SEE IF COMMAND FRAME HAS ARRIVED
  96:17152+5+6	F7E6  C8      		RET	Z			;EXIT IF NOTHING HAS HAPPENED
  97:				
  98:17157+7	F7E7  FE01    		CP	1
  99:17164+7+5	F7E9  2808    		JR	Z,CMDL4		;PROCESS COMMAND IF GOOD FRAME RECVD
 100:				
 101:17171+4	F7EB  F3      		DI				;ELSE RESET INTERRUPT AND START AGAIN
 102:17175+7	F7EC  3E03    		LD	A, CTC_D1_SW_RST + CTC_D0_CONTROL	; SOFTWARE RESET CTC0
 103:17182+11	F7EE  D380    		OUT	(CTC0),A	;PERFORM THE RESET
 104:17193+4	F7F0  FB      		EI
 105:17197+12	F7F1  1816    		JR	CMDL5		;GO SET FSM VECTOR
 106:				;
 107:				;
 108:     -	C2FB          	CFRAME	EQU	IOBUFF+LEN-5	;COMMAND FRAME IS LAST 5 BYTES OF BUFF
 109:				;
 110:17209+13	F7F3  3AFBC2  	CMDL4:	LD	A,(CFRAME)
 111:17222+16	F7F6  2A38FF  		LD	HL,(IDPTR)	;GET POINTER TO ID CODE TABLE
 112:17238+17	F7F9  CD10F8  		CALL	SCAN		;SCAN TABLE FOR MATCHING UNIT ID CODE
 113:17255+7+5	F7FC  200B    		JR	NZ,CMDL5	;EXIT IF COMMAND IS NOT FOR US
 114:				
 115:17262+13	F7FE  3AFCC2  		LD	A,(CFRAME+1)
 116:17275+17	F801  CD10F8  		CALL	SCAN		;SCAN FOR COMMAND CODE IN TABLE
 117:17292+7+5	F804  2003    		JR	NZ,CMDL5	;ERROR IF NO MATCH FOUND
 118:				
 119:17299+17	F806  CDBDF7  		CALL	CALLHL		;GO TO COMMAND PROCESSOR @HL
 120:				;
 121:17316+10	F809  21BEF7  	CMDL5:	LD	HL,PWRWAIT
 122:17326+16	F80C  223AFF  		LD	(FSMVEC),HL	;SET FSM VECTOR BACK TO IDLE STATE
 123:17342+10	F80F  C9      		RET
 124:				;
 125:				;
 126:				;
 127:				;
 128:     -	F810          	SCAN:
 129:17352+7	F810  4E      		LD	C,(HL)		;LOAD BC WITH TABLE LENGTH @HL
 130:17359+6	F811  23      		INC	HL
 131:17365+7	F812  46      		LD	B,(HL)
 132:17372+6	F813  23      		INC	HL
 133:17378+16+5	F814  EDB1    		CPIR			;SCAN STRING @HL FOR MATCH WITH ACC
 134:17394+5+6	F816  C0      		RET	NZ		;EXIT IF NO MATCH
 135:				
 136:17399+11	F817  F5      		PUSH	AF
 137:17410+11	F818  09      		ADD	HL,BC		;ELSE ADD RESIDUE FROM CPIR TO HL
 138:17421+11	F819  09      		ADD	HL,BC		; THREE TIMES TO POINT TO ADDRESS
 139:17432+11	F81A  09      		ADD	HL,BC		; CORRESPONDING TO MATCHED VALUE
 140:17443+7	F81B  7E      		LD	A,(HL)
 141:17450+6	F81C  23      		INC	HL
 142:17456+7	F81D  66      		LD	H,(HL)
 143:17463+4	F81E  6F      		LD	L,A
 144:17467+10	F81F  F1      		POP	AF
 145:17477+10	F820  C9      		RET			;RETURN TABLE ENTRY IN HL
 146:				;
 147:				;
 148:				;
 149:				;	... DEVICE ID TABLE FOR DISK/PRINTER/RS232 COMBO BOX ...
 150:				;
 151:     -	F821          	IDTAB:
 152:     -	F821  0600    		DEFW	IDMAX
 153:				
 154:     -	F823  40      	PTRID:	DEFB	'@'		;PRINTER CONTROLLER ID CODE
 155:     -	F824  31      		DEFB	'1'		;DISK UNIT #1 ID CODE
 156:     -	F825  32      		DEFB	'2'		;DISK #2
 157:     -	F826  33      		DEFB	'3'		;DISK #3
 158:     -	F827  34      		DEFB	'4'		;DISK #4
 159:     -	F828  5A      		DEFB	'Z'		;Z80 LOAD/DUMP/GOTO
 160:				
 161:     -	F829  54F8    		DEFW	Z80TAB
 162:     -	F82B          	SalyDISKID:
 163:     -	F82B  3DF8    		DEFW	DISKTAB
 164:     -	F82D  3DF8    		DEFW	DISKTAB
 165:     -	F82F  3DF8    		DEFW	DISKTAB
 166:     -	F831  3DF8    		DEFW	DISKTAB
 167:     -	F833  35F8    		DEFW	PTRTAB
 168:     -	0006          	IDMAX	EQU	($-IDTAB)/3
 169:				;
 170:				;
 171:				;
 172:     -	F835          	PTRTAB:				;PRINTER COMMANDS
 173:     -	F835  0200    		DEFW	PTRMAX
 174:				
 175:     -	F837  53      		DEFB	'S'		;PRINTER STATUS
 176:     -	F838  57      		DEFB	'W'		;PRINTER OUTPUT
 177:				
 178:     -	F839  78F8    		DEFW	PTRWRITE
 179:     -	F83B  62F8    		DEFW	PTRSTAT
 180:     -	0002          	PTRMAX	EQU	($-(PTRTAB+2))/3
 181:				;
 182:				;
 183:				;
 184:     -	F83D          	DISKTAB:			;DISK COMMANDS
 185:     -	F83D  0700    		DEFW	DISKMAX
 186:				
 187:     -	F83F  52      		DEFB	'R'		;DISK READ
 188:     -	F840  53      		DEFB	'S'		;DISK STATUS
 189:     -	F841  57      		DEFB	'W'		;DISK WRITE
 190:     -	F842  50      		DEFB	'P'		;DISK PUT
 191:     -	F843  4E      		DEFB	'N'		;GET PARAMETERS
 192:     -	F844  4F      		DEFB	'O'		;PUT PARAMETERS
 193:     -	F845  21      		DEFB	'!'		;FORMAT DISK
 194:				
 195:     -	F846  38FB    		DEFW	DISKINIT
 196:     -	F848  05FC    		DEFW	PUTPARAMS
 197:     -	F84A  E7FB    		DEFW	GETPARAMS
 198:     -	F84C  05F9    		DEFW	DISKPUT
 199:     -	F84E  08F9    		DEFW	DISKWRITE
 200:     -	F850  DBFA    		DEFW	DISKSTAT
 201:     -	F852  8CF9    		DEFW	DISKREAD
 202:     -	0007          	DISKMAX	EQU	($-(DISKTAB+2))/3
 203:				;
 204:				;
 205:				;
 206:     -	F854          	Z80TAB:				;Z80 COMMANDS
 207:     -	F854  0400    		DEFW	Z80MAX
 208:				
 209:     -	F856  52      		DEFB	'R'		;MEMORY READ
 210:     -	F857  57      		DEFB	'W'		;MEMORY WRITE
 211:     -	F858  53      		DEFB	'S'		;SET ADDRESS
 212:     -	F859  47      		DEFB	'G'		;GOTO ADDRESS
 213:				
 214:     -	F85A  B4FC    		DEFW	Z80GOTO
 215:     -	F85C  A6FC    		DEFW	Z80SET
 216:     -	F85E  7BFC    		DEFW	Z80WRITE
 217:     -	F860  5FFC    		DEFW	Z80READ
 218:     -	0004          	Z80MAX	EQU	($-(Z80TAB+2))/3
 219:				;
 220:				;
 221:				;
 223:				;
 224:				;
 225:				;	... PRINTER STATUS COMMAND PROCESSOR ...
 226:				;
 227:     -	F862          	PTRSTAT:
 228:17487+17	F862  CD4AFC  		CALL	SENDACK
 229:17504+10	F865  2143FF  		LD	HL,PSMSG
 230:17514+10	F868  11FCC2  		LD	DE,IOBUFF+LEN-4
 231:17524+11	F86B  D5      		PUSH	DE
 232:17535+10	F86C  010400  		LD	BC,4
 233:17545+16+5	F86F  EDB0    		LDIR			;COPY PRINTER STATUS FRAME FROM RAM
 234:17561+10	F871  E1      		POP	HL
 235:17571+10	F872  114300  		LD	DE,'C'		;SEND PRINTER STATUS UN-INVERTED
 236:17581+10	F875  C36CF6  		JP	SENDBUFF
 237:				;	ret
 238:				;
 239:				;
 240:				;	... PRINTER WRITE COMMAND PROCESSOR ...
 241:				;
 242:     -	F878          	PTRWRITE:
 243:17591+17	F878  CD4AFC  		CALL	SENDACK		;SEND 'ACK' FOR COMMAND FRAME
 244:17608+17	F87B  CDB9F6  		CALL	RECVBUFF	;GET PRINT DATA FROM SERIAL BUS
 245:17625+5+6	F87E  C0      		RET	NZ		;EXIT IF ERROR OR TIMEOUT
 246:				
 247:17630+10	F87F  112800  		LD	DE,40
 248:17640+4	F882  B7      		OR	A
 249:17644+15	F883  ED52    		SBC	HL,DE
 250:17659+5+6	F885  C0      		RET	NZ		;ERROR IF RX BLOCK LENGTH <> 40 BYTES
 251:				
 252:17664+17	F886  CD4AFC  		CALL	SENDACK		;ELSE SEND 'ACK'
 253:17681+10	F889  2100C1  		LD	HL,IOBUFF
 254:17691+7	F88C  0628    		LD	B,40
 255:17698+7	F88E  7E      	PWRIT3:	LD	A,(HL)
 256:17705+7	F88F  FE9B    		CP	9BH		;CHECK FOR 'ATASCII' CARRIAGE RETURN
 257:17712+7+5	F891  2005    		JR	NZ,PWRT3A
 258:				
 259:17719+10	F893  213EFF  		LD	HL,NEWLIN
 260:17729+7	F896  46      		LD	B,(HL)		;OUTPUT PRINTER'S NEWLINE CHARACTER(S)
 261:17736+6	F897  23      		INC	HL
 262:				
 263:17742+11	F898  E5      	PWRT3A:	PUSH	HL
 264:17753+16	F899  2A4FFF  		LD	HL,(PCOUNT)
 265:17769+20	F89C  ED5B4DFF		LD	DE,(PSIZE)
 266:17789+4	F8A0  B7      		OR	A
 267:17793+15	F8A1  ED52    		SBC	HL,DE		;TEST IF PRINTER BUFFER IS FULL
 268:17808+10	F8A3  E1      		POP	HL
 269:17818+7+5	F8A4  380E    		JR	C,PWRIT4	;STORE ANOTHER CHARACTER IF NOT FULL
 270:				
 271:17825+11	F8A6  E5      		PUSH	HL
 272:17836+11	F8A7  C5      		PUSH	BC
 273:17847+17	F8A8  CDD1F8  		CALL	SPOOLER		;TRY TO CLEAR OUT BUFFER
 274:17864+10	F8AB  C1      		POP	BC
 275:17874+10	F8AC  E1      		POP	HL
 276:17884+11	F8AD  DB70    		IN	A,(ATARI)
 277:17895+7	F8AF  E602    		AND	00000010B	;TEST ATARI COMMAND LINE AND
 278:17902+7+5	F8B1  20E5    		JR	NZ,PWRT3A	;STAY IN LOOP IF INACTIVE
 279:				
 280:17909+10	F8B3  C9      		RET			;ELSE ABORT PRINTING AND RETURN
 281:				;
 282:17919+7	F8B4  7E      	PWRIT4:	LD	A,(HL)
 283:17926+6	F8B5  23      		INC	HL
 284:17932+11	F8B6  E5      		PUSH	HL
 285:17943+11	F8B7  C5      		PUSH	BC
 286:17954+16	F8B8  2A51FF  		LD	HL,(PINP)
 287:17970+17	F8BB  CDF1F8  		CALL	INDEX		;GET INDEX TO FIFO INPUT PLACE
 288:17987+20	F8BE  ED5351FF		LD	(PINP),DE	;STORE UPDATED INPUT OFFSET
 289:18007+7	F8C2  77      		LD	(HL),A		;STORE CHARACTER IN QUEUE
 290:18014+16	F8C3  2A4FFF  		LD	HL,(PCOUNT)
 291:18030+6	F8C6  23      		INC	HL		;BUMP FIFO CHARACTER COUNTER
 292:18036+16	F8C7  224FFF  		LD	(PCOUNT),HL
 293:18052+10	F8CA  C1      		POP	BC
 294:18062+10	F8CB  E1      		POP	HL
 295:18072+8+5	F8CC  10C0    		DJNZ	PWRIT3		;REPEAT TO END OF STRING
 296:				
 297:18080+10	F8CE  C354FC  		JP	SENDCOMP	;SEND 'COMPLETE' TO ATARI
 298:				;	ret
 299:				;
 300:				;
 301:				;
 302:     -	F8D1          	SPOOLER:
 303:18090+16	F8D1  2A4FFF  		LD	HL,(PCOUNT)
 304:18106+4	F8D4  7C      		LD	A,H
 305:18110+4	F8D5  B5      		OR	L
 306:18114+5+6	F8D6  C8      		RET	Z		;EXIT IF NO DATA IN FIFO TO PRINT
 307:				
 308:18119+17	F8D7  CD15F0  		CALL	LISTV+3
 309:18136+5+6	F8DA  C0      		RET	NZ		;EXIT IF PRINTER BUSY
 310:				
 311:18141+16	F8DB  2A53FF  		LD	HL,(POUT)
 312:18157+17	F8DE  CDF1F8  		CALL	INDEX		;GET POINTER WITH AUTO-INCREMENT
 313:18174+20	F8E1  ED5353FF		LD	(POUT),DE
 314:18194+7	F8E5  4E      		LD	C,(HL)
 315:18201+17	F8E6  CD12F0  		CALL	LISTV		;PRINT CHARACTER AND EXIT
 316:18218+16	F8E9  2A4FFF  		LD	HL,(PCOUNT)
 317:18234+6	F8EC  2B      		DEC	HL		;DIMINISH BUFFER COUNT BY ONE
 318:18240+16	F8ED  224FFF  		LD	(PCOUNT),HL
 319:18256+10	F8F0  C9      		RET
 320:				;
 321:				;
 322:				;
 323:				;
 324:     -	F8F1          	INDEX:
 325:18266+4	F8F1  EB      		EX	DE,HL
 326:18270+16	F8F2  2A4BFF  		LD	HL,(PBASE)
 327:18286+11	F8F5  19      		ADD	HL,DE		;ADD OFFSET TO FIFO BASE ADDRESS
 328:18297+11	F8F6  E5      		PUSH	HL
 329:18308+6	F8F7  13      		INC	DE		;BUMP OFFSET NOW IN DE
 330:18314+16	F8F8  2A4DFF  		LD	HL,(PSIZE)
 331:18330+4	F8FB  B7      		OR	A
 332:18334+15	F8FC  ED52    		SBC	HL,DE		;COMPARE TO MAX OFFSET VALUE
 333:18349+7+5	F8FE  3003    		JR	NC,INDEX2
 334:18356+10	F900  110000  		LD	DE,0		;SET OFFSET TO ZERO IF ROLL-OVER
 335:18366+10	F903  E1      	INDEX2:	POP	HL
 336:18376+10	F904  C9      		RET			;RETURN DE=OFFSET AND HL=POINTER
 337:				;
 338:				;
 339:				;
 340:				;	... DISK WRITE COMMAND PROCESSOR ...
 341:				;
 342:     -	F905          	DISKPUT:
 343:18386+4	F905  AF      		XOR	A
 344:18390+12	F906  1802    		JR	DWRT0
 345:				;
 346:     -	F908          	DISKWRITE:
 347:18402+7	F908  3E01    		LD	A,1
 348:18409+13	F90A  32B5FF  	DWRT0:	LD	(VFLAG),A
 349:18422+17	F90D  CD28FC  		CALL	DRVINDEX	;INDEX TO GET DRIVE PARAMETER POINTER
 350:18439+5+6	F910  D8      		RET	C		;EXIT IF NOT A DRIVE IN OUR BOX
 351:				
 352:18444+17	F911  CD4AFC  		CALL	SENDACK
 353:18461+17	F914  CDB9F6  		CALL	RECVBUFF	;ELSE GO QUICK TO READ DATA FRAME
 354:18478+5+6	F917  C0      		RET	NZ		;EXIT IF BAD CHECKSUM
 355:     -	F918          	SalyDISKWRT1:
 356:18483+16	F918  22A9FF  		LD	(LOGSIZ),HL	;SAVE DATA BLOCK LENGTH
 357:     -	F91B          	SalyDISKWRT2:
 358:18499+10	F91B  118000  		LD	DE,128
 359:18509+4	F91E  B7      		OR	A
 360:18513+15	F91F  ED52    		SBC	HL,DE		;TEST FOR 128 BYTE FRAME
 361:18528+7+5	F921  2804    		JR	Z,DWRT1
 362:18535+4	F923  B7      		OR	A
 363:18539+15	F924  ED52    		SBC	HL,DE		;TEST FOR 256 BYTE FRAME
 364:18554+5+6	F926  C0      		RET	NZ
 365:				
 366:18559+17	F927  CD4AFC  	DWRT1:	CALL	SENDACK		;SEND 'ACK' IF BLOCKSIZE IS 128 OR 256
 367:18576+17	F92A  CD10FA  		CALL	SECTRAN		;SET DISK PARAMETERS FOR WRITE
 368:18593+7+5	F92D  204E    		JR	NZ,DWRT4	;JUMP IF ERROR FROM 'SECTRAN'
 369:				
 370:18600+10	F92F  2100C1  		LD	HL,IOBUFF
 371:18610+16	F932  229CFF  		LD	(DKIOCB+DSKPTR),HL
 372:18626+13	F935  3AA9FF  		LD	A,(LOGSIZ)
 373:18639+4	F938  47      		LD	B,A		;PREPARE TO COMPLIMENT DISK DATA BLOCK
 374:18643+7	F939  7E      	DWRT2:	LD	A,(HL)
 375:18650+4	F93A  2F      		CPL
 376:18654+7	F93B  77      		LD	(HL),A		;COMPLIMENT DISK DATA BLOCK
 377:18661+6	F93C  23      		INC	HL
 378:18667+8+5	F93D  10FA    		DJNZ	DWRT2		;REPEAT TO END OF BLOCK
 379:18675+7	F93F  3E02    		LD	A,PUTSEC
 380:18682+13	F941  3298FF  		LD	(DKIOCB+DSKOP),A
 381:18695+14	F944  DD2198FF		LD	IX,DKIOCB
 382:     -	F948          	SalyDISKWRT3:
 383:18709+17	F948  CD0FF0  		CALL	DISKV		;CALL PHYSICAL DISK DRIVER
 384:18726+13	F94B  3AA0FF  		LD	A,(DKIOCB+DSKSTS)
 385:18739+4	F94E  B7      		OR	A
 386:18743+7+5	F94F  202C    		JR	NZ,DWRT4	;BOMB OUT NOW IF DISK ERROR
 387:				
 388:18750+13	F951  3AB5FF  		LD	A,(VFLAG)
 389:18763+4	F954  B7      		OR	A
 390:18767+7+5	F955  2826    		JR	Z,DWRT4		;EXIT OK IF NOT WRITE WITH VERIFY
 391:				
 392:18774+7	F957  3E01    		LD	A,GETSEC
 393:18781+13	F959  3298FF  		LD	(DKIOCB+DSKOP),A
 394:18794+10	F95C  2100C3  		LD	HL,IOBUFF+LEN
 395:18804+16	F95F  229CFF  		LD	(DKIOCB+DSKPTR),HL
 396:18820+17	F962  CD0FF0  		CALL	DISKV		;ELSE READ SECTOR BACK FOR VERIFY
 397:18837+13	F965  3AA0FF  		LD	A,(DKIOCB+DSKSTS)
 398:18850+4	F968  B7      		OR	A
 399:18854+7+5	F969  2012    		JR	NZ,DWRT4	;BOMB AGAIN IF READ ERROR
 400:				
 401:18861+10	F96B  2100C1  		LD	HL,IOBUFF
 402:18871+10	F96E  1100C3  		LD	DE,IOBUFF+LEN
 403:18881+13	F971  3A9EFF  		LD	A,(DKIOCB+DSKAUX)
 404:18894+4	F974  47      		LD	B,A		;PREPARE TO COMPARE 128 OR 256 BYTES
 405:18898+7	F975  1A      	DWRT3:	LD	A,(DE)
 406:18905+7	F976  AE      		XOR	(HL)
 407:18912+7+5	F977  200B    		JR	NZ,DWRT5
 408:18919+6	F979  23      		INC	HL
 409:18925+6	F97A  13      		INC	DE
 410:18931+8+5	F97B  10F8    		djnz	DWRT3		;fall through last time with acc=0
 411:				
 412:18939+17	F97D  CDE3F9  	DWRT4:	CALL	SETSTAT		;DO STATUS SETTING STUFF
 413:18956+4	F980  7B      		LD	A,E
 414:18960+10	F981  C356FC  		JP	SENDCHAR	;SEND 'COMPLETE' OR 'ERROR' TO ATARI
 415:				;	ret
 416:				;
 417:18970+4	F984  AF      	DWRT5:	XOR	A
 418:18974+17	F985  CD06FA  		CALL	ssts4		;set hardware status=0 but set bad r/w
 419:18991+4	F988  7B      		LD	a,e
 420:18995+10	F989  C356FC  		JP	sendchar
 421:				;	ret
 422:				;
 423:				;
 424:				;
 425:				;	... DISK READ COMMAND PROCESSOR ...
 426:				;
 427:     -	F98C          	DISKREAD:
 428:19005+17	F98C  CD28FC  		CALL	DRVINDEX	;POINT IY TO DRIVE'S DATA AREA
 429:19022+5+6	F98F  D8      		RET	C		;EXIT IF NOT A DRIVE IN OUR BOX
 430:				
 431:19027+17	F990  CD4AFC  		CALL	SENDACK
 432:     -	F993          	SalyDISKRD1:
 433:19044+17	F993  CD10FA  		CALL	SECTRAN		;SET PARAMETERS FOR DISK OPERATION
 434:     -	F996          	SalyDISKRD2:
 435:19061+11	F996  F5      		PUSH	AF		;SAVE ERROR STATUS FROM 'SECTRAN'
 436:19072+7+5	F997  280F    		JR	Z,DRD2		;JUMP IF PARAMS SET OK
 437:				
 438:19079+19	F999  FD5606  		LD	D,(IY+SECLEN)
 439:19098+19	F99C  FD5E07  		LD	E,(IY+SECLEN+1)	;LOAD DE WITH SECTOR LEN FROM 'DMATRIX'
 440:19117+4	F99F  7A      		LD	A,D
 441:19121+4	F9A0  B3      		OR	E
 442:19125+7+5	F9A1  2009    		JR	NZ,DRD2A	;JUMP IF LENGTH <> 0
 443:				
 444:19132+10	F9A3  118000  		LD	DE,128		;ELSE REVERT TO 128 BYTES
 445:19142+12	F9A6  1804    		JR	DRD2A
 446:				;
 447:19154+20	F9A8  ED5B9EFF	DRD2:	LD	DE,(DKIOCB+DSKAUX) ;LOAD DE WITH PHYSICAL SECTOR LENGTH
 448:19174+16	F9AC  2AFDC2  	DRD2A:	LD	HL,(CFRAME+2)
 449:19190+10	F9AF  010400  		LD	BC,4
 450:19200+4	F9B2  B7      		OR	A
 451:19204+15	F9B3  ED42    		SBC	HL,BC		;TEST IF ACCESSING SECTOR# 1,2 OR 3
 452:19219+7+5	F9B5  3003    		JR	NC,DRD3		;JUMP IF NOT ACCESSING A BOOT SECTOR
 453:19226+10	F9B7  118000  		LD	DE,128
 454:19236+20	F9BA  ED53A9FF	DRD3:	LD	(LOGSIZ),DE
 455:19256+10	F9BE  2100C3  		LD	HL,IOBUFF+LEN
 456:19266+4	F9C1  B7      		OR	A
 457:19270+15	F9C2  ED52    		SBC	HL,DE		;COMPUTE STARTING PLACE IN BUFFER
 458:19285+10	F9C4  F1      		POP	AF
 459:19295+7+5	F9C5  2014    		JR	NZ,DRD4		;JUMP IF ERROR FROM 'SECTRAN' ABOVE
 460:				
 461:19302+16	F9C7  229CFF  		LD	(DKIOCB+DSKPTR),HL
 462:19318+7	F9CA  3E01    		LD	A,GETSEC
 463:19325+13	F9CC  3298FF  		LD	(DKIOCB+DSKOP),A
 464:19338+14	F9CF  DD2198FF		LD	IX,DKIOCB
 465:19352+11	F9D3  E5      		PUSH	HL
 466:     -	F9D4          	SalyDISKRD3:
 467:19363+17	F9D4  CD0FF0  		CALL	DISKV		;CALL DISK I/O HANDLER
 468:19380+10	F9D7  E1      		POP	HL
 469:19390+13	F9D8  3AA0FF  		LD	A,(DKIOCB+DSKSTS)
 470:				
 471:19403+17	F9DB  CDE3F9  	DRD4:	CALL	SETSTAT		;TEST AND STORE STATUS STUFF
 472:19420+7	F9DE  16FF    		LD	D,255		;SET MASK TO INVERT DISK DATA
 473:19427+10	F9E0  C36CF6  		JP	SENDBUFF	;SEND RESPONSE TO ATARI
 474:				;	ret
 475:				;
 476:				;
 477:				;
 478:				;	ROUTINE TO CHECK STATUS AFTER READ/WRITE
 479:				;
 480:     -	F9E3          	SETSTAT:
 481:19437+4	F9E3  B7      		OR	A
 482:19441+7+5	F9E4  200A    		JR	NZ,SSTS1	;JUMP IF SOME DISK ERROR INDICATED
 483:				
 484:19448+19	F9E6  FD770D  		LD	(IY+HDWSTS),A	;ELSE STORE ZEROS IN HARDWARE STATUS
 485:19467+7	F9E9  1E43    		LD	E,'C'		;LOAD E WITH 'COMPLETE' CHARACTER
 486:19474+23	F9EB  FDCB0C96		RES	BADRW,(IY+CMDSTS)
 487:19497+10	F9EF  C9      		RET
 488:				;
 489:				;	ACC HOLDS NON-ZERO VALUE INDICATING A DISK ERROR
 490:				;
 491:19507+8	F9F0  CB77    	SSTS1:	BIT	6,A		;BIT HOLDS WPROT STATUS AFTER WRITE
 492:19515+7+5	F9F2  2802    		JR	Z,SSTS2
 493:				
 494:19522+7	F9F4  E69F    		AND	10011111B
 495:				
 496:19529+8	F9F6  CB6F    	SSTS2:	BIT	5,A		;HOLDS DD MARK STATUS AFTER READ
 497:19537+7+5	F9F8  2802    		JR	Z,SSTS3
 498:				
 499:19544+7	F9FA  F660    		OR	01100000B	;CREATE 1771 DD ADDRESS MARK STATUS
 500:				
 501:19551+4	F9FC  4F      	SSTS3:	LD	C,A
 502:19555+7	F9FD  E681    		AND	10000001B	;TEST FOR 'READY' OR 'BUSY' BITS SET
 503:19562+4	F9FF  79      		LD	A,C
 504:19566+7+5	FA00  2804    		JR	Z,SSTS4		;JUMP IF NOT READY/BUSY LOCK UP
 505:				
 506:19573+7	FA02  E67E    		AND	01111110B	;ELSE CLEAR BOTH BITS AND REPLACE
 507:19580+7	FA04  F610    		OR	00010000B	; WITH 'RNF' ERROR BIT INSTEAD
 508:				
 509:19587+19	FA06  FD770D  	SSTS4:	LD	(IY+HDWSTS),A	;STORE HARDWARE STATUS FOR ATARI
 510:19606+7	FA09  1E45    		LD	E,'E'		;LOAD E WITH 'ERROR' CHARACTER
 511:19613+23	FA0B  FDCB0CD6		SET	BADRW,(IY+CMDSTS)
 512:19636+10	FA0F  C9      		RET
 513:				;
 514:				;
 515:				;
 516:				;
 517:				;
 518:				;
 519:     -	FA10          	SECTRAN:
 520:				;	BIT	CONFIG,(IY+FLAGS)
 521:				;	JP	NZ,STRAN3	;SKIP IF DRIVE HAS BEEN CONFIGURED
 522:				
 523:19646+13	FA10  3A2EFF  		LD	A,(DRVOFF)
 524:19659+4	FA13  B7      		OR	A
 525:19663+7+5	FA14  2811    		JR	Z,STRAN2	;JUMP IF DRIVES HAVE NOT BEEN STOPPED
 526:				
 527:19670+4	FA16  AF      		XOR	A
 528:19674+13	FA17  322EFF  		LD	(DRVOFF),A	;CLEAR DRIVES-STOPPED FLAGS
 529:19687+10	FA1A  2164FF  		LD	HL,DMATRIX+FLAGS
 530:19697+10	FA1D  111000  		LD	DE,16
 531:19707+7	FA20  0604    		LD	B,4
 532:19714+15	FA22  CB86    	STRAN1:	RES	FIRST,(HL)	;ZIP THRU ARRAY RESETING 'FIRST' FLAGS
 533:19729+11	FA24  19      		ADD	HL,DE		; TO FORCE MEDIA TO BE EXAMINED ANEW
 534:19740+8+5	FA25  10FB    		DJNZ	STRAN1
 535:				
 536:19748+20	FA27  FDCB0E46	STRAN2:	BIT	FIRST,(IY+FLAGS)
 537:19768+7+5	FA2B  206D    		JR	NZ,STRAN3	;SKIP MEDIA CHECK IF DRIVE IS ACTIVE
 538:				
 539:19775+7	FA2D  3E03    		LD	A,GETID
 540:19782+13	FA2F  3298FF  		LD	(DKIOCB+DSKOP),A
 541:19795+13	FA32  3A99FF  		LD	A,(DKIOCB+DSKDRV)
 542:19808+10	FA35  2120FF  		LD	HL,DRVTAB
 543:19818+4	FA38  85      		ADD	A,L
 544:19822+4	FA39  6F      		LD	L,A		;POINT TO HEAD POSITION FOR DRIVE#
 545:19826+7	FA3A  7E      		LD	A,(HL)
 546:19833+7	FA3B  FE50    		CP	80
 547:19840+7+5	FA3D  3801    		JR	C,STR20		;JUMP IF TRACK# IN VALID RANGE
 548:19847+4	FA3F  AF      		XOR	A		;ELSE GOTO TRACK ZERO
 549:19851+13	FA40  329AFF  	STR20:	LD	(DKIOCB+DSKTRK),A
 550:19864+10	FA43  21ABFF  		LD	HL,IDBUF
 551:19874+16	FA46  229CFF  		LD	(DKIOCB+DSKPTR),HL
 552:19890+14	FA49  DD2198FF		LD	IX,DKIOCB
 553:19904+17	FA4D  CD0FF0  		CALL	DISKV		;READ AN ID MARK FROM CURRENT TRACK
 554:19921+13	FA50  3AA0FF  		LD	A,(DKIOCB+DSKSTS)
 555:19934+4	FA53  B7      		OR	A
 556:19938+5+6	FA54  C0      		RET	NZ		;EXIT IF DISK ERROR ON READ-ID
 557:				;
 558:				;	ARRIVE HERE TO SET DISK PARAMS IMPLICITLY
 559:				;
 560:19943+13	FA55  3AAEFF  		LD	A,(IDBUF+3)	;GET SECTOR LENGTH BYTE FROM ID
 561:19956+17	FA58  CDCDFA  		call	getsize		;compute sector length in bytes
 562:19973+19	FA5B  FD7006  		ld	(iy+seclen),b
 563:19992+19	FA5E  FD7107  		ld	(iy+seclen+1),c	;store result in 'seclen' param slot
 564:20011+13	FA61  3A9EFF  		LD	A,(DKIOCB+DSKAUX)
 565:20024+4	FA64  07      		RLCA
 566:20028+4	FA65  07      		RLCA
 567:20032+4	FA66  07      		RLCA
 568:20036+4	FA67  2F      		CPL
 569:20040+7	FA68  E606    		AND	00000110B	;MAKE PERCOM DENSITY/SIZE BITS
 570:20047+19	FA6A  FD7705  		LD	(IY+MEDIA),A
 571:20066+8	FA6D  CB4F    		BIT	SIZE,A
 572:20074+7+5	FA6F  2807    		JR	Z,STR25		;JUMP IF FIVE INCH DISK SELECTED
 573:				
 574:20081+7	FA71  3E4D    		LD	A,77
 575:20088+10	FA73  211A00  		LD	HL,26
 576:20098+12	FA76  1805    		JR	STR26
 577:				;
 578:20110+7	FA78  3E28    	STR25:	LD	A,40
 579:20117+10	FA7A  211200  		LD	HL,18
 580:20127+19	FA7D  FDBE00  	str26:	cp	(iy+ntrks)
 581:20146+7+5	FA80  3803    		jr	c,str27		;skip if ntrks has been set > default
 582:20153+19	FA82  FD7700  		ld	(iy+ntrks),a	;else set param to default value
 583:20172+19	FA85  FD7402  	STR27:	LD	(IY+NSECS),H
 584:20191+19	FA88  FD7503  		LD	(IY+NSECS+1),L	;STORE SECTORS PER TRACK PARAM
 585:				
 586:20210+23	FA8B  FDCB0EC6		SET	FIRST,(IY+FLAGS)
 587:20233+16	FA8F  2A96FF  		LD	HL,(OLDPTR)
 588:20249+4	FA92  7C      		LD	A,H
 589:20253+4	FA93  B5      		OR	L
 590:20257+7+5	FA94  2004    		JR	NZ,STRAN3	;JUMP IF NOT THE FIRST-EVER DISKOP
 591:				
 592:20264+20	FA96  FD2296FF		LD	(OLDPTR),IY	;ELSE SET POINTER TO THIS GUYS STUFF
 593:				;
 594:				;	ARRIVE HERE TO COMPUTE TRACK/SECTOR AND SET DISK BYTECOUNT
 595:				;
 596:20284+16	FA9A  2AFDC2  	STRAN3:	LD	HL,(CFRAME+2)
 597:20300+6	FA9D  2B      		DEC	HL		;REMOVE +1 BIAS FROM SECTOR NUMBER
 598:20306+7	FA9E  1600    		LD	D,0
 599:20313+19	FAA0  FD5E03  		LD	E,(IY+NSECS+1)
 600:20332+7	FAA3  3EFF    		LD	A,-1
 601:20339+4	FAA5  3C      	STRAN4:	INC	A
 602:20343+4	FAA6  B7      		OR	A
 603:20347+15	FAA7  ED52    		SBC	HL,DE
 604:20362+7+5	FAA9  30FA    		JR	NC,STRAN4	;DIVIDE ABSOLUTE SECTOR NUMBER BY SPT
 605:20369+11	FAAB  19      		ADD	HL,DE
 606:20380+6	FAAC  23      		INC	HL		;RESTORE +1 BIAS TO SECTOR NUMBER
 607:20386+4	FAAD  4D      		LD	C,L
 608:20390+10	FAAE  219BFF  		LD	HL,DKIOCB+DSKSEC
 609:20400+7	FAB1  71      		LD	(HL),C		;STORE PHYSICAL SECTOR#
 610:				
 611:20407+19	FAB2  FDBE00  		CP	(IY+NTRKS)	;COMPARE RESULT FROM TRACK# COMPUTATION
 612:20426+7+5	FAB5  3808    		JR	C,STRAN5	; TO 'NTRKS' PARAM AND JUMP IF LESS
 613:				
 614:20433+19	FAB7  FD9600  		SUB	(IY+NTRKS)	;ELSE SUBTRACT EXTRA AND SELECT SIDE# 1
 615:20452+10	FABA  2199FF  		LD	HL,DKIOCB+DSKDRV
 616:20462+15	FABD  CBFE    		SET	7,(HL)
 617:				
 618:20477+13	FABF  329AFF  	STRAN5:	LD	(DKIOCB+DSKTRK),A  ;STORE PHYSICAL TRACK#
 619:20490+19	FAC2  FD6606  		LD	H,(IY+SECLEN)
 620:20509+19	FAC5  FD6E07  		LD	L,(IY+SECLEN+1)
 621:20528+16	FAC8  229EFF  		LD	(DKIOCB+DSKAUX),HL  ;STORE PHYSICAL SECTOR SIZE FOR I/O
 622:20544+4	FACB  AF      		XOR	A
 623:20548+10	FACC  C9      		RET
 624:				;
 625:				;
 626:				;
 627:     -	FACD          	getsize:
 628:20558+10	FACD  018000  		ld	bc,128
 629:20568+7	FAD0  E603    		and	00000011b
 630:20575+5+6	FAD2  C8      		ret	z		;sector length code=0 means 128 bytes
 631:				
 632:20580+8	FAD3  CB21    	getsz2:	sla	c
 633:20588+8	FAD5  CB10    		rl	b		;else multiply 128 by 2,4 or 8
 634:20596+4	FAD7  3D      		dec	a
 635:20600+7+5	FAD8  20F9    		jr	nz,getsz2
 636:20607+10	FADA  C9      		ret
 637:				;
 638:				;
 639:				;
 640:				;
 641:				;
 642:				;	... DISK STATUS COMMAND PROCESSOR ...
 643:				;
 644:     -	FADB          	DISKSTAT:
 645:20617+17	FADB  CD28FC  		CALL	DRVINDEX	;POINT IY TO DRIVE'S DATA AREA
 646:20634+5+6	FADE  D8      		RET	C		;EXIT IF NOT A DRIVE IN OUR BOX
 647:				
 648:20639+17	FADF  CD4AFC  		CALL	SENDACK		;SEND 'ACK' FOR COMMAND FRAME
 649:20656+17	FAE2  CDD3FB  		CALL	HASPARMS	;CHECK IF HAS NEVER BEEN ACCESSED
 650:20673+13	FAE5  3AC9FF  		LD	A,(DRVTMR)
 651:20686+11	FAE8  F5      		PUSH	AF		;SAVE DRIVE TIMER VALUE RIGHT NOW
 652:20697+7	FAE9  3E00    		LD	A,TSTRDY
 653:20704+13	FAEB  3298FF  		LD	(DKIOCB+DSKOP),A
 654:20717+14	FAEE  DD2198FF		LD	IX,DKIOCB
 655:20731+17	FAF2  CD0FF0  		CALL	DISKV		;CALL DISK HANDLER TO GET TYPE 1 STATUS
 656:				
 657:20748+19	FAF5  FD4E0C  		LD	C,(IY+CMDSTS)	;PREPARE TO DERRIVE REST OF 'CMDSTS'
 658:20767+19	FAF8  FD360C00		LD	(IY+CMDSTS),0	; AND RESET OLD STATUS BITS
 659:20786+10	FAFC  F1      		POP	AF
 660:20796+4	FAFD  B7      		OR	A
 661:20800+7+5	FAFE  2804    		JR	Z,DSTAT1	;JUMP IF DRIVES WERE PREVIOUSLY STOPPED
 662:				
 663:20807+8	FB00  CBE1    		SET	ACTIVE,C
 664:20815+12	FB02  1802    		JR	DSTAT2
 665:				;
 666:20827+8	FB04  CBA1    	DSTAT1:	RES	ACTIVE,C
 667:20835+20	FB06  FDCB0556	DSTAT2:	BIT	DENSTY,(IY+MEDIA)
 668:20855+7+5	FB0A  2804    		JR	Z,DSTAT3	;JUMP IF DRIVE SET FOR SINGLE DENSITY
 669:				
 670:20862+8	FB0C  CBE9    		SET	SEC256,C
 671:20870+12	FB0E  1802    		JR	DSTAT4
 672:				;
 673:20882+8	FB10  CBA9    	DSTAT3:	RES	SEC256,C
 674:20890+20	FB12  DDCB0876	DSTAT4:	BIT	6,(IX+DSKSTS)
 675:20910+7+5	FB16  2804    		JR	Z,DSTAT5	;JUMP IF DRIVE IS NOT WRITE PROTECTED
 676:				
 677:20917+8	FB18  CBD9    		SET	WRPROT,C
 678:20925+12	FB1A  1802    		JR	DSTAT6
 679:				;
 680:20937+8	FB1C  CB99    	DSTAT5:	RES	WRPROT,C
 681:20945+10	FB1E  21FCC2  	DSTAT6:	LD	HL,IOBUFF+LEN-4
 682:20955+11	FB21  E5      		PUSH	HL
 683:20966+7	FB22  71      		LD	(HL),C		;STORE DRIVE COMMAND STATUS IN BUFFER
 684:20973+6	FB23  23      		INC	HL
 685:20979+19	FB24  FD7E0D  		LD	A,(IY+HDWSTS)
 686:20998+4	FB27  2F      		CPL
 687:21002+7	FB28  77      		LD	(HL),A		;STORE HARDWARE POOP NEXT
 688:21009+6	FB29  23      		INC	HL
 689:21015+10	FB2A  36E0    		LD	(HL),224	;STORE MAX TIMEOUT AFTER THAT
 690:21025+6	FB2C  23      		INC	HL
 691:21031+13	FB2D  3A2DFF  		LD	A,(TRACK)
 692:21044+7	FB30  77      		LD	(HL),A		;STORE TRACK# AS FOURTH BYTE
 693:21051+10	FB31  E1      		POP	HL
 694:21061+10	FB32  114300  		LD	DE,'C'		;SEND DISK STATUS W/O COMPLIMENT
 695:21071+10	FB35  C36CF6  		JP	SENDBUFF
 696:				;	ret
 697:				;
 698:				;
 699:				;
 700:				;	... DISK FORMAT COMMAND PROCESSOR ...
 701:				;
 702:     -	FB38          	DISKINIT:
 703:21081+17	FB38  CD28FC  		CALL	DRVINDEX	;POINT IY TO DRIVE'S DATA AREA
 704:21098+5+6	FB3B  D8      		RET	C		;EXIT IF NOT A DRIVE IN OUR BOX
 705:				
 706:21103+16	FB3C  2A4FFF  		LD	HL,(PCOUNT)
 707:21119+4	FB3F  7C      		LD	A,H
 708:21123+4	FB40  B5      		OR	L
 709:21127+5+6	FB41  C0      		RET	NZ		;REFUSE TO FORMAT IF SPOOLER ACTIVE
 710:				
 711:21132+17	FB42  CDD3FB  		CALL	HASPARMS
 712:21149+5+6	FB45  C8      		RET	Z		;REFUSE TO FORMAT IF PARAMS NOT SET
 713:				
 714:21154+17	FB46  CD4AFC  		CALL	SENDACK
 715:21171+7	FB49  3E00    		LD	A,TSTRDY
 716:21178+13	FB4B  3298FF  		LD	(DKIOCB+DSKOP),A
 717:21191+14	FB4E  DD2198FF		LD	IX,DKIOCB
 718:21205+17	FB52  CD0FF0  		CALL	DISKV		;CALL DRIVER TO TEST READY/WRITE PROT
 719:21222+17	FB55  CDCBF3  		CALL	STOPTMR		;THEN KILL CTC3 TO STOP DISK TIMER
 720:21239+13	FB58  3A2FFF  		LD	A,(OUTCPY)
 721:21252+20	FB5B  FDCB0556		BIT	DENSTY,(IY+MEDIA)
 722:21272+7+5	FB5F  2807    		JR	Z,DINIT2
 723:				
 724:21279+8	FB61  CBBF    		RES	7,A		;RESET DENSITY BIT OF CONTROL BYTE
 725:21287+10	FB63  2100C2  		LD	HL,IOBUFF+LEN-256
 726:21297+12	FB66  1805    		JR	DINIT3
 727:				;
 728:21309+8	FB68  CBFF    	DINIT2:	SET	7,A		;SET SD/DD BIT IF SINGLE DENSITY
 729:21317+10	FB6A  2180C2  		LD	HL,IOBUFF+LEN-128
 730:21327+13	FB6D  322FFF  	DINIT3:	LD	(OUTCPY),A
 731:21340+11	FB70  D330    		OUT	(LATCH),A
 732:21351+11	FB72  E5      		PUSH	HL
 733:21362+16	FB73  22C1FF  		LD	(SEQPTR),HL	;STORE POINTER FOR BAD SECTOR LIST
 734:21378+10	FB76  210100  		LD	HL,1
 735:21388+16	FB79  22BFFF  		LD	(SEQNUM),HL	;RESET BAD SECTOR COUNTER
 736:21404+16	FB7C  2A49FF  		LD	HL,(FMTPTR)
 737:21420+10	FB7F  11B6FF  		LD	DE,FMTSTUFF
 738:21430+10	FB82  010700  		LD	BC,FMTLEN
 739:21440+4	FB85  07      		RLCA
 740:21444+4	FB86  07      		RLCA
 741:21448+7	FB87  E603    		AND	00000011B
 742:21455+7+5	FB89  2804    		JR	Z,SFMT3
 743:21462+11	FB8B  09      	SFMT2:	ADD	HL,BC
 744:21473+4	FB8C  3D      		DEC	A
 745:21477+7+5	FB8D  20FC    		JR	NZ,SFMT2	;INDEX TO PROPER PARAMS FOR DISK TYPE
 746:21484+16+5	FB8F  EDB0    	SFMT3:	LDIR			;THEN COPY PARAMS TO 'FMTSTUFF'
 747:21500+13	FB91  3AA0FF  		LD	A,(DKIOCB+DSKSTS)
 748:21513+7	FB94  E6C0    		AND	11000000B
 749:21520+7+5	FB96  2013    		JR	NZ,DINIT6	;ERROR IF NOT READY OR WRITE PROTECTED
 750:				
 751:21527+19	FB98  FD7E04  		ld	a,(iy+nsides)	;set for SS/DS init
 752:21546+13	FB9B  32BDFF  		ld	(sides),a
 753:21559+19	FB9E  FD7E00  		ld	a,(iy+ntrks)	;set for number of tracks
 754:21578+13	FBA1  32BEFF  		ld	(tracks),a
 755:21591+15	FBA4  FDE5    		PUSH	IY
 756:21606+17	FBA6  CDBEFC  		CALL	FORMAT		;CALL FORMAT SUBROUTINE
 757:21623+14	FBA9  FDE1    		POP	IY
 758:				
 759:21637+10	FBAB  E1      	DINIT6:	POP	HL
 760:21647+17	FBAC  CDE3F9  		CALL	SETSTAT		;UPDATE STATUS AS SPECIFIED BY ACC
 761:21664+7	FBAF  1600    		LD	D,0
 762:21671+17	FBB1  CD6CF6  		CALL	SENDBUFF	;SEND BAD SECTOR DATA FRAME
 763:21688+10	FBB4  C33CF0  		JP	ACTIVON		;THEN RESTART THE DISK TIMER
 764:				;	ret
 765:				;
 766:				;
 767:				;
 768:				;
 769:				;
 770:     -	FBB7          	FMTS:
 771:     -	FBB7  9FFE    		DEFW	DD8N26		;DOUBLE DENSITY 8 INCH
 772:     -	FBB9  E2FE    		DEFW	SKEW17
 773:     -	FBBB  1A      		DEFB	26
 774:     -	FBBC  B028    		DEFW	10416
 775:				
 776:     -	FBBE  35FE    		DEFW	DD5N18		;DOUBLE DENSITY 5 INCH
 777:     -	FBC0  68FE    		DEFW	SKEWDD
 778:     -	FBC2  12      		DEFB	18
 779:     -	FBC3  6A18    		DEFW	6250
 780:				
 781:     -	FBC5  7AFE    		DEFW	SD8N26		;SINGLE DENSITY 8 INCH
 782:     -	FBC7  C8FE    		DEFW	SKEW13
 783:     -	FBC9  1A      		DEFB	26
 784:     -	FBCA  5814    		DEFW	5208
 785:				
 786:     -	FBCC  16FE    		DEFW	SD5N18		;SINGLE DENSITY 5 INCH
 787:     -	FBCE  56FE    		DEFW	SKEWSD
 788:     -	FBD0  12      		DEFB	18
 789:     -	FBD1  350C    		DEFW	3125
 790:				;
 791:				;
 792:				;
 793:				;
 794:     -	FBD3          	HASPARMS:
 795:21698+19	FBD3  FD7E00  		LD	A,(IY+NTRKS)
 796:21717+4	FBD6  B7      		OR	A
 797:21721+5+6	FBD7  C0      		RET	NZ		;EXIT IF PARAMS HAVE BEEN SET
 798:				
 799:21726+16	FBD8  2A96FF  		LD	HL,(OLDPTR)
 800:21742+4	FBDB  7C      		LD	A,H		;IF POINTER IS ZERO THEN NO DRIVE
 801:21746+4	FBDC  B5      		OR	L		; PARAMS HAVE EVER BEEN SET
 802:21750+5+6	FBDD  C8      		RET	Z
 803:				
 804:21755+15	FBDE  FDE5    		PUSH	IY
 805:21770+10	FBE0  D1      		POP	DE
 806:21780+10	FBE1  010C00  		LD	BC,12
 807:21790+16+5	FBE4  EDB0    		LDIR			;COPY BOOT DISK'S PARAMS TO THIS GUY
 808:21806+10	FBE6  C9      		RET
 809:				;
 810:				;
 811:				;
 812:				;
 813:				;	... PERCOM 'N' COMMAND PROCESSOR ...
 814:				;
 815:     -	FBE7          	GETPARAMS:
 816:21816+17	FBE7  CD28FC  		CALL	DRVINDEX	;POINT IY TO DRIVE'S DATA AREA
 817:21833+5+6	FBEA  D8      		RET	C		;EXIT IF NOT A DRIVE IN OUR BOX
 818:				
 819:21838+17	FBEB  CDD3FB  		CALL	HASPARMS
 820:21855+5+6	FBEE  C8      		RET	Z		;EXIT IF DISK PARAMS NOT KNOWN
 821:				
 822:21860+17	FBEF  CD4AFC  		CALL	SENDACK		;SEND 'ACK' FOR COMMAND FRAME
 823:				;	SET	CONFIG,(IY+FLAGS)
 824:21877+15	FBF2  FDE5    		PUSH	IY
 825:21892+10	FBF4  E1      		POP	HL
 826:21902+10	FBF5  11F4C2  		LD	DE,IOBUFF+LEN-12
 827:21912+11	FBF8  D5      		PUSH	DE
 828:21923+10	FBF9  010C00  		LD	BC,12
 829:21933+16+5	FBFC  EDB0    		LDIR			;COPY PARAMS TO OUTPUT BUFFER
 830:21949+10	FBFE  E1      		POP	HL
 831:21959+10	FBFF  114300  		LD	DE,'C'
 832:21969+10	FC02  C36CF6  		JP	SENDBUFF	;SEND 'C' AND PARAMS DATA FRAME
 833:				;	ret
 834:				;
 835:				;
 836:				;
 837:				;	... PERCOM 'O' COMMAND PROCESSOR ...
 838:				;
 839:     -	FC05          	PUTPARAMS:
 840:21979+17	FC05  CD28FC  		CALL	DRVINDEX	;POINT IY TO DRIVE'S DATA AREA
 841:21996+5+6	FC08  D8      		RET	C		;EXIT IF NOT A DRIVE IN OUR BOX
 842:				
 843:22001+17	FC09  CD4AFC  		CALL	SENDACK
 844:22018+17	FC0C  CDB9F6  		CALL	RECVBUFF	;ATTEMPT TO READ DATA FRAME FROM ATARI
 845:22035+5+6	FC0F  C0      		RET	NZ
 846:				
 847:22040+10	FC10  110C00  		LD	DE,12
 848:22050+4	FC13  B7      		OR	A
 849:22054+15	FC14  ED52    		SBC	HL,DE
 850:22069+5+6	FC16  C0      		RET	NZ		;ERROR IF DATA FRAME NOT 12 BYTES
 851:				
 852:22074+17	FC17  CD4AFC  		CALL	SENDACK		;ELSE SEND 'ACK' FOR DATA FRAME
 853:				;	SET	CONFIG,(IY+FLAGS)  ;INDICATE DRIVE IS NOW CONFIGURED
 854:22091+10	FC1A  2100C1  		LD	HL,IOBUFF
 855:22101+15	FC1D  FDE5    		PUSH	IY
 856:22116+10	FC1F  D1      		POP	DE		;POINT DE TO PARAMETERS FOR DRIVE(N)
 857:22126+10	FC20  010C00  		LD	BC,12
 858:22136+16+5	FC23  EDB0    		LDIR			;COPY NEW STUFF IN THE PLACE
 859:22152+10	FC25  C354FC  		JP	SENDCOMP	;SEND 'COMPLETE' BACK TO ATARI
 860:				;	ret
 861:				;
 862:				;
 863:				;
 864:				;	... DATA STRUCTURE FOR DRIVE PARAMETER BLOCKS ...
 865:				;
 866:     -	0000          	NTRKS	EQU	0		;NUMBER OF TRACKS
 867:     -	0001          	STEPRT	EQU	1		;STEP RATE
 868:     -	0002          	NSECS	EQU	2		;SECTORS PER TRACK (HI/LOW)
 869:     -	0004          	NSIDES	EQU	4		;NUMBER OF SIDES
 870:     -	0005          	MEDIA	EQU	5		;MEDIA SIZE AND FORMAT BITS
 871:     -	0006          	SECLEN	EQU	6		;SECTOR LENGTH (HI/LOW)
 872:     -	0008          	DSKBITS	EQU	8		;MISC NAUGHTY BITS
 873:     -	0009          	SPARE0	EQU	9
 874:     -	000A          	SPARE1	EQU	10
 875:     -	000B          	SPARE2	EQU	11
 876:				
 877:     -	000C          	CMDSTS	EQU	12		;COMMAND STATUS
 878:     -	000D          	HDWSTS	EQU	13		;HARDWARE STATUS
 879:				
 880:     -	000E          	FLAGS	EQU	14		;FLAGS BYTE FOR DISK OPERATION
 881:     -	000F          	SPARE3	EQU	15
 882:				;
 883:				;
 884:				;	EQUATES FOR BITS IN 'MEDIA' BYTE
 885:				;
 886:     -	0001          	SIZE	EQU	1		;DISK SIZE (1=EIGHT, 0=FIVE)
 887:     -	0002          	DENSTY	EQU	2		;DENSITY (1=DOUBLE, 0=SINGLE)
 888:				;
 889:				;
 890:				;	EQUATES FOR BITS IN 'DSKBITS' BYTE
 891:				;
 892:     -	0006          	PRESENT	EQU	6		;DRIVE PRESENT (1=PRESENT)
 893:				;
 894:				;
 895:				;	EQUATES FOR BITS IN 'CMDSTS' BYTE
 896:				;
 897:     -	0000          	BADCMD	EQU	0		;BAD COMMAND FRAME BIT
 898:     -	0001          	BADDAT	EQU	1		;BAD DATA FRAME BIT
 899:     -	0002          	BADRW	EQU	2		;BAD READ/WRITE OPERATION BIT
 900:     -	0003          	WRPROT	EQU	3		;WRITE PROTECTED BIT
 901:     -	0004          	ACTIVE	EQU	4		;DRIVE READY INDICATOR BIT
 902:     -	0005          	SEC256	EQU	5		;LONG/SHORT SECTOR BIT
 903:				;
 904:				;
 905:				;	EQUATES FOR BITS IN 'FLAGS' BYTE
 906:				;
 907:     -	0000          	FIRST	EQU	0		;FIRST ACCESS FLAG (0=NOT ACCESSED)
 908:     -	0001          	CONFIG	EQU	1		;DRIVE CONFIGURED BIT (0=UNCONFIGED)
 909:				;
 910:				;
 911:				;
 912:				;
 913:				;
 914:     -	FC28          	DRVINDEX:
 915:22162+13	FC28  3AFBC2  		LD	A,(CFRAME)	;GET DRIVE# FROM COMAND FRAME
 916:22175+7	FC2B  D631    		SUB	'1'
 917:22182+7	FC2D  FE04    		CP	4
 918:22189+4	FC2F  3F      		CCF
 919:22193+5+6	FC30  D8      		RET	C		;EXIT IF NOT DRIVE 1,2,3 OR 4
 920:				
 921:22198+7	FC31  2600    		LD	H,0
 922:22205+4	FC33  6F      		LD	L,A
 923:22209+11	FC34  29      		ADD	HL,HL
 924:22220+11	FC35  29      		ADD	HL,HL
 925:22231+11	FC36  29      		ADD	HL,HL
 926:22242+11	FC37  29      		ADD	HL,HL		;MULTIPLY DRIVE INDEX BY 16
 927:22253+10	FC38  0156FF  		LD	BC,DMATRIX
 928:22263+11	FC3B  09      		ADD	HL,BC		;INDEX TO DRIVE'S PARAMETERS
 929:22274+11	FC3C  E5      		PUSH	HL
 930:22285+14	FC3D  FDE1    		POP	IY		;GET POINTER INTO IY FOR RETURN
 931:22299+20	FC3F  FDCB0876		BIT	PRESENT,(IY+DSKBITS)
 932:22319+4	FC43  37      		SCF
 933:22323+5+6	FC44  C8      		RET	Z		;EXIT IT DRIVE NOT PRESENT
 934:				
 935:22328+13	FC45  3299FF  		LD	(DKIOCB+DSKDRV),A
 936:22341+4	FC48  AF      		XOR	A
 937:22345+10	FC49  C9      		RET
 938:				;
 939:				;
 940:				;
 941:				;
 942:     -	FC4A          	SENDACK:
 943:22355+11	FC4A  DB70    		IN	A,(ATARI)
 944:22366+8	FC4C  CB4F    		BIT	1,A
 945:22374+7+5	FC4E  28FA    		JR	Z,SENDACK
 946:				
 947:22381+7	FC50  3E41    		LD	A,'A'
 948:22388+12	FC52  1802    		JR	SENDCHAR
 949:				;
 950:     -	FC54          	SENDCOMP:
 951:22400+7	FC54  3E43    		LD	A,'C'
 952:     -	FC56          	SENDCHAR:
 953:22407+10	FC56  2101C3  		LD	HL,IOBUFF+LEN+1
 954:22417+7	FC59  77      		LD	(HL),A
 955:22424+7	FC5A  1600    		LD	D,0		;SET FOR TRUE DATA
 956:22431+10	FC5C  C384F6  		JP	XMITBUF		;SEND 1 BYTE BLOCK TO ATARI
 957:				;	ret
 958:				;
 959:				;
 960:				;
 961:				;
 962:				;	... Z80 MEMORY READ COMMAND PROCESSOR ...
 963:				;
 964:     -	FC5F          	Z80READ:
 965:22441+17	FC5F  CD4AFC  		CALL	SENDACK		;SEND 'ACK' FOR COMMAND
 966:22458+17	FC62  CD9CFC  		CALL	ZLENGTH		;GET ZCMD BYTECOUNT INTO BC
 967:22475+10	FC65  2100C3  		LD	HL,IOBUFF+LEN
 968:22485+4	FC68  B7      		OR	A
 969:22489+15	FC69  ED42    		SBC	HL,BC
 970:22504+11	FC6B  E5      		PUSH	HL
 971:22515+4	FC6C  EB      		EX	DE,HL
 972:22519+16	FC6D  2AB2FC  		LD	HL,(MEMPTR)
 973:22535+4	FC70  F3      		DI
 974:22539+16+5	FC71  EDB0    		LDIR			;DO BLOCK MOVE INTO BUFFER
 975:22555+4	FC73  FB      		EI
 976:22559+10	FC74  E1      		POP	HL
 977:22569+10	FC75  114300  		LD	DE,'C'		;SEND DATA W/O INVERSION
 978:22579+10	FC78  C36CF6  		JP	SENDBUFF
 979:				;	ret
 980:				;
 981:				;
 982:				;
 983:				;	... Z80 MEMORY WRITE COMMAND PROCESSOR ...
 984:				;
 985:     -	FC7B          	Z80WRITE:
 986:22589+17	FC7B  CD4AFC  		CALL	SENDACK		;SEND 'ACK' FOR COMMAND FRAME
 987:22606+17	FC7E  CDB9F6  		CALL	RECVBUFF	;ATTEMPT TO READ DATA FRAME FROM ATARI
 988:22623+5+6	FC81  C0      		RET	NZ
 989:				
 990:22628+17	FC82  CD9CFC  		CALL	ZLENGTH		;GET BYTECOUNT FROM CMD FRAME
 991:22645+4	FC85  B7      		OR	A
 992:22649+15	FC86  ED42    		SBC	HL,BC
 993:22664+5+6	FC88  C0      		RET	NZ		;ERROR IF DATA FRAME LENGTH NOT SAME
 994:				
 995:22669+11	FC89  C5      		PUSH	BC
 996:22680+17	FC8A  CD4AFC  		CALL	SENDACK		;ELSE SEND 'ACK' FOR DATA FRAME
 997:22697+10	FC8D  C1      		POP	BC
 998:22707+10	FC8E  2100C1  		LD	HL,IOBUFF
 999:22717+20	FC91  ED5BB2FC		LD	DE,(MEMPTR)
1000:22737+4	FC95  F3      		DI
1001:22741+16+5	FC96  EDB0    		LDIR			;DO BLOCK MOVE INTO BUFFER
1002:22757+4	FC98  FB      		EI
1003:22761+10	FC99  C354FC  		JP	SENDCOMP	;SEND 'COMPLETE' BACK TO ATARI
1004:				;	ret
1005:				;
1006:				;
1007:				;
1008:     -	FC9C          	ZLENGTH:
1009:22771+13	FC9C  3AFDC2  		LD	A,(CFRAME+2)	;GET BYTECOUNT FROM COMMAND FRAME
1010:22784+4	FC9F  4F      		LD	C,A
1011:22788+7	FCA0  0600    		LD	B,0		;LOAD BC WITH BYTECOUNT
1012:22795+4	FCA2  B7      		OR	A
1013:22799+5+6	FCA3  C0      		RET	NZ		;EXIT IF BYTECOUNT NOT=0
1014:				
1015:22804+4	FCA4  04      		INC	B		;ELSE MAKE BC=256
1016:22808+10	FCA5  C9      		RET
1017:				;
1018:				;
1019:				;	... Z80 SET MEMORY POINTER COMMAND PROCESSOR ...
1020:				;
1021:     -	FCA6          	Z80SET:
1022:22818+17	FCA6  CD4AFC  		CALL	SENDACK
1023:22835+16	FCA9  2AFDC2  		LD	HL,(CFRAME+2)	;SET MEMORY POINTER FROM COMMAND
1024:22851+16	FCAC  22B2FC  		LD	(MEMPTR),HL
1025:22867+10	FCAF  C354FC  		JP	SENDCOMP
1026:				;	ret
1027:				;
1028:				;
1029:     -	FCB2  0000    	MEMPTR:	DEFW	0		;POINTER FOR MEMORY READ/WRITE
1030:				;
1031:				;
1032:				;	... Z80 GOTO MEMORY LOCATION COMMAND PROCESSOR ...
1033:				;
1034:     -	FCB4          	Z80GOTO:
1035:22877+17	FCB4  CD4AFC  		CALL	SENDACK
1036:22894+17	FCB7  CD54FC  		CALL	SENDCOMP
1037:22911+16	FCBA  2AFDC2  		LD	HL,(CFRAME+2)
1038:22927+4	FCBD  E9      		jp	(hl)		;execute routine @hl
1039:				;
1040:				;
1041:				;
1042:				;
**** ..\src\ROM.MAC ****
  49:					INCLUDE	FORMAT.MAC
**** ..\src\FORMAT.MAC ****
   1:					;PAGE
   2:				;****************************************************************
   3:				;*								*
   4:				;*								*
   5:				;****************************************************************
   6:				;
   7:				;	... DISKETTE INITIALIZATION ROUTINE ...
   8:				;
   9:				;	'IOBUFF' UTILIZATION IN FORMAT FUNCTION:
  10:				;
  11:				;	|---------------|  IOBUFF
  12:				;	|		|
  13:				;	| BAD SEC NUMS	|	STARTS @ LEN-(128+1) OR LEN-(256+1)
  14:				;	|		|
  15:				;	|---------------|  +LEN
  16:				;	|		|
  17:				;	|  WRTTRK CODE  |	VARIABLE LENGTH HALT/NMI/OUTI ROUTINE
  18:				;	|		|
  19:				;	|---------------|  +N
  20:				;	|		|
  21:				;	|  TRACK IMAGE  |	POINTED TO BY 'TRKPTR'
  22:				;	|		|
  23:				;	|		|  +10200
  24:				;
  25:				;
  26:				;
  27:     -	FCBE          	FORMAT:
  28:22931+4	FCBE  AF      		XOR	A
  29:22935+11	FCBF  D356    		OUT	(INDXSET),A	;SET FLIPFLOP FOR NORMAL INDEX PULSES
  30:22946+4	FCC1  3C      		INC	A
  31:22950+11	FCC2  D354    		OUT	(INDXCLR),A
  32:22961+7	FCC4  3E0B    		LD	A,RSTCMD+HLOAD+STEPRATE
  33:22968+17	FCC6  CD6BF3  		CALL	TYP1CMD		;ISSUE SLOW RESTORE COMMAND
  34:22985+7	FCC9  EE04    		XOR	00000100B	;FLIP TK0 STATUS BIT
  35:22992+7	FCCB  E684    		AND	10000100B
  36:22999+10	FCCD  C29AFD  		JP	NZ,FORMX	;EXIT IF TRACK ZERO NOT INDICATED
  37:				
  38:23009+10	FCD0  2100C3  		LD	HL,IOBUFF+LEN	;PREP TO BUILD IN-LINE CODE FOR FORMAT
  39:23019+13	FCD3  3ABCFF  		LD	A,(TRKSIZ+1)
  40:23032+4	FCD6  3C      		INC	A
  41:23036+4	FCD7  47      		LD	B,A		;LOAD B WITH # OF PAGES/TRACK PLUS ONE
  42:23040+10	FCD8  3676    	FORM2:	LD	(HL),076H	;STORE 'HALT' OPCODE
  43:23050+6	FCDA  23      		INC	HL
  44:23056+10	FCDB  36ED    		LD	(HL),0EDH	;STORE 'OUTI' OPCODE BYTE #1
  45:23066+6	FCDD  23      		INC	HL
  46:23072+10	FCDE  36A3    		LD	(HL),0A3H	;STORE 'OUTI' OPCODE BYTE #2
  47:23082+6	FCE0  23      		INC	HL
  48:23088+10	FCE1  3620    		LD	(HL),020H	;STORE 'JRNZ' OPCODE BYTE
  49:23098+6	FCE3  23      		INC	HL
  50:23104+10	FCE4  36FB    		LD	(HL),-5		;STORE JUMP OFFSET FOR LOOP
  51:23114+6	FCE6  23      		INC	HL
  52:23120+8+5	FCE7  10EF    		DJNZ	FORM2
  53:23128+7	FCE9  3EC9    		LD	A,0C9H
  54:23135+7	FCEB  77      		LD	(HL),A		;STORE 'RET' OPCODE AT END
  55:23142+13	FCEC  326600  		LD	(0066H),A	;ALSO PLUNK ONE DOWN AT NMI VECTOR
  56:23155+6	FCEF  23      		INC	HL
  57:23161+16	FCF0  22C3FF  		LD	(TRKPTR),HL	;SAVE ADDRESS TO BEGIN TRACK IMAGE
  58:				
  59:23177+4	FCF3  AF      		XOR	A
  60:23181+13	FCF4  322DFF  	FORM3:	LD	(TRACK),A	;A HOLDS NEXT TRACK NUMBER
  61:23194+4	FCF7  B7      		OR	A
  62:23198+7+5	FCF8  2805    		JR	Z,FORM3A	;SKIP STEP-IN IF ON TRACK ZERO
  63:23205+7	FCFA  3E4B    		LD	A,STEPIN+HLOAD+STEPRATE
  64:23212+17	FCFC  CD6BF3  		CALL	TYP1CMD		;STEP TO NEXT TRACK
  65:23229+20	FCFF  DD2AB6FF	FORM3A:	LD	IX,(FRMPTR)	;GET SELECTED FORMAT DATA POINTER
  66:23249+20	FD03  FD2AB8FF		LD	IY,(SKWPTR)	;GET SELECTED SKEW TABLE POINTER
  67:23269+13	FD07  3ABDFF  		ld	a,(sides)
  68:23282+4	FD0A  1F      		rra
  69:23286+13	FD0B  3A2FFF  		ld	a,(outcpy)
  70:23299+7+5	FD0E  3007    		jr	nc,form3b	;jump if not formatting both sides
  71:23306+7	FD10  EE20    		xor	00100000b
  72:23313+13	FD12  322FFF  		ld	(outcpy),a	;else flip side select bit in latch
  73:23326+11	FD15  D330    		out	(latch),a
  74:23337+17	FD17  CDA4FD  	form3b:	call	build
  75:23354+13	FD1A  3A2DFF  		LD	A,(TRACK)
  76:23367+11	FD1D  D341    		OUT	(TRKREG),A
  77:23378+16	FD1F  2AC3FF  		LD	HL,(TRKPTR)	;POINT TO START OF TRACK IMAGE
  78:23394+4	FD22  F3      		DI
  79:23398+7	FD23  3EF4    		LD	A,WRTKDLY	;write track + 30ms settle delay
  80:23405+17	FD25  CD89F3  		CALL	CMDOUT		;ISSUE WRITE TRACK COMMAND
  81:23422+13	FD28  3ABBFF  		LD	A,(TRKSIZ)
  82:23435+4	FD2B  47      		LD	B,A		;LOAD B WITH TRACK SIZE MOD 256
  83:23439+7	FD2C  0E43    		LD	C,DATREG
  84:23446+17	FD2E  CD00C3  		CALL	IOBUFF+LEN	;EXECUTE WRITE TRACK FROM BUFFER
  85:23463+4	FD31  FB      		EI
  86:23467+11	FD32  DB40    	FORM4:	IN	A,(STSREG)
  87:23478+8	FD34  CB47    		BIT	0,A
  88:23486+7+5	FD36  20FA    		JR	NZ,FORM4
  89:23493+20	FD38  ED5BBFFF		LD	DE,(SEQNUM)	;LOAD DE WITH SEQUENCE NUMBER
  90:23513+16	FD3C  2AC1FF  		LD	HL,(SEQPTR)	; AND HL WITH CACA TABLE POINTER
  91:23529+13	FD3F  3ABAFF  		LD	A,(NSECTS)
  92:23542+4	FD42  47      		LD	B,A
  93:23546+20	FD43  DD2AB8FF		LD	IX,(SKWPTR)	;POINT TO SECTOR TABLE
  94:23566+19	FD47  DD7E00  	FORM5:	LD	A,(IX)
  95:23585+10	FD4A  DD23    		INC	IX
  96:23595+11	FD4C  D342    		OUT	(SECREG),A
  97:23606+13	FD4E  3A2FFF  		LD	A,(OUTCPY)
  98:23619+7	FD51  E620    		AND	00100000b
  99:23626+7	FD53  3E88    		LD	A,RDCMD		;determine if reading side 0 or 1
 100:23633+7+5	FD55  2802    		JR	Z,FORM51
 101:23640+8	FD57  CBCF    		SET	1,A		;WD1772 no side-no in cmd (I leave it there, doesn't seem to matter)
 102:23648+17	FD59  CD62F3  	FORM51:	CALL	TYP2CMD		;read sector discarding the data
 103:23665+7	FD5C  E698    		AND	10011000B	;TEST FOR READY/RNF/CRC ERROR INDICATION
 104:23672+7+5	FD5E  2814    		JR	Z,FORM6		;JUMP IF SECTOR READ OK
 105:				
 106:23679+7	FD60  E680    		AND	10000000B
 107:23686+7+5	FD62  2036    		JR	NZ,FORMX	;QUIT TRYING IF NOT-READY ERROR
 108:23693+11	FD64  E5      		PUSH	HL
 109:23704+11	FD65  C5      		PUSH	BC
 110:23715+10	FD66  01FDC2  		LD	BC,IOBUFF+LEN-3
 111:23725+4	FD69  B7      		OR	A
 112:23729+15	FD6A  ED42    		SBC	HL,BC		;TEST IF CA-CA SECTOR LIST IS FULL
 113:23744+10	FD6C  C1      		POP	BC
 114:23754+10	FD6D  E1      		POP	HL
 115:23764+7+5	FD6E  3004    		JR	NC,FORM6	;SKIP IF NO MORE ROOM
 116:23771+7	FD70  73      		LD	(HL),E
 117:23778+6	FD71  23      		INC	HL
 118:23784+7	FD72  72      		LD	(HL),D
 119:23791+6	FD73  23      		INC	HL		;STORE BAD SECTOR NUMBER
 120:23797+6	FD74  13      	FORM6:	INC	DE
 121:23803+8+5	FD75  10D0    		DJNZ	FORM5
 122:23811+20	FD77  ED53BFFF		LD	(SEQNUM),DE	;STORE UPDATED ERROR TRACE STUFF
 123:23831+16	FD7B  22C1FF  		LD	(SEQPTR),HL
 124:23847+13	FD7E  3A2FFF  		ld	a,(outcpy)
 125:23860+7	FD81  E620    		and	00100000b
 126:23867+10	FD83  C2FFFC  		jp	nz,form3a	;go back and do side 0 if on side 1 now
 127:23877+13	FD86  3A2DFF  		LD	A,(TRACK)
 128:23890+4	FD89  3C      		INC	A
 129:23894+10	FD8A  21BEFF  		ld	hl,tracks
 130:23904+7	FD8D  BE      		CP	(HL)
 131:23911+10	FD8E  DAF4FC  		JP	C,FORM3		;FORMAT UP TO LAST TRACK ON DISK
 132:				
 133:23921+16	FD91  2AC1FF  		LD	HL,(SEQPTR)
 134:23937+10	FD94  36FF    		LD	(HL),255	;STORE TERMINATOR ON CA-CA BUFFER
 135:23947+6	FD96  23      		INC	HL
 136:23953+10	FD97  36FF    		LD	(HL),255
 137:23963+4	FD99  AF      		XOR	A		;INDICATE FORMAT COMPLETED
 138:23967+11	FD9A  F5      	FORMX:	PUSH	AF
 139:23978+7	FD9B  3EFF    		LD	A,255
 140:23985+13	FD9D  322DFF  		LD	(TRACK),A
 141:23998+11	FDA0  D341    		OUT	(TRKREG),A	;FORCE DISK HANDLER TO RECALIBRATE
 142:24009+10	FDA2  F1      		POP	AF
 143:24019+10	FDA3  C9      		RET			;RETURN COMPLETION STATUS IN A
 144:				;
 145:				;
 146:				;
 147:				;
 148:				;	... SUBROUTINE TO BUILD IMAGE OF FORMATTED TRACK ...
 149:				;
 150:				;	PARAMETERS ARE:  IX ....... (POINTER TO FORMAT PARAMETERS)
 151:				;			 IY ....... (TABLE OF SECTOR NUMBERS)
 152:				;			 TRKPTR ... (POINTER TO TRACK DATA BUFFER)
 153:				;			 TRACK .... (TRACK NUMBER)
 154:				;			 NSECTS ... (NUMBER OF SECTORS)
 155:				;			 sides .... (copy of 'nsides' param)
 156:				;
 157:     -	FDA4          	BUILD:
 158:24029+13	FDA4  3ABAFF  		LD	A,(NSECTS)
 159:24042+4	FDA7  4F      		LD	C,A
 160:24046+15	FDA8  DDE5    		PUSH	IX
 161:24061+10	FDAA  E1      		POP	HL
 162:24071+7	FDAB  46      		LD	B,(HL)		;LOAD B WITH # OF FIELDS IN PREAMBLE
 163:24078+6	FDAC  23      		INC	HL
 164:24084+20	FDAD  ED5BC3FF		LD	DE,(TRKPTR)
 165:24104+17	FDB1  CD0BFE  	BUILD1:	CALL	INSERT		;INSERT FIELDS OF PREAMBLE
 166:24121+8+5	FDB4  10FB    		DJNZ	BUILD1
 167:				
 168:24129+7	FDB6  46      		LD	B,(HL)		;LOAD B WITH NUMBER OF ITEMS IN SECTOR
 169:24136+6	FDB7  23      		INC	HL
 170:24142+11	FDB8  E5      		PUSH	HL
 171:24153+14	FDB9  DDE1    		POP	IX		;IX POINTS TO START OF SECTOR POOP
 172:24167+13	FDBB  3A2DFF  	BUILD3:	LD	A,(TRACK)
 173:24180+19	FDBE  DD7707  		LD	(IX+7),A	;STORE TRACK# FOR TRACK BEING FORMATTED
 174:24199+13	FDC1  3A2FFF  		ld	a,(outcpy)
 175:24212+7	FDC4  E620    		and	00100000b
 176:24219+7	FDC6  3E00    		ld	a,0
 177:24226+7+5	FDC8  2801    		jr	z,bild31	;jump if formatting side 0
 178:24233+4	FDCA  3C      		inc	a
 179:24237+19	FDCB  DD7709  	bild31:	ld	(ix+9),a	;store side# in id
 180:24256+19	FDCE  FD7E00  		LD	A,(IY)
 181:24275+10	FDD1  FD23    		INC	IY
 182:24285+19	FDD3  DD770B  		LD	(IX+11),A	;STORE SECTOR# INTO FORMAT CONSTANTS
 183:				
 184:24304+15	FDD6  DDE5    		PUSH	IX
 185:24319+10	FDD8  E1      		POP	HL		;POINT HL TO SECTOR POOP
 186:24329+11	FDD9  C5      		PUSH	BC
 187:24340+17	FDDA  CD0BFE  	BUILD4:	CALL	INSERT
 188:24357+8+5	FDDD  10FB    		DJNZ	BUILD4		;INSERT ITEMS UP TO SECTOR DATA FIELD
 189:				
 190:24365+19	FDDF  DD7E0D  		LD	A,(IX+13)
 191:24384+17	FDE2  CDCDFA  		call	getsize		;compute sector size in bytes
 192:24401+7	FDE5  3EFF    	build6:	ld	a,0ffh
 193:24408+7	FDE7  12      		ld	(de),a		;fill sector data with ff's
 194:24415+6	FDE8  13      		INC	DE
 195:24421+6	FDE9  0B      		DEC	BC		;REPEAT TILL SECTOR IMAGE IS FILLED
 196:24427+4	FDEA  78      		LD	A,B
 197:24431+4	FDEB  B1      		OR	C
 198:24435+7+5	FDEC  20F7    		JR	NZ,BUILD6
 199:				
 200:24442+7	FDEE  46      		LD	B,(HL)		;GET #FIELDS IN POST-SECTOR STUFF
 201:24449+6	FDEF  23      		INC	HL
 202:24455+17	FDF0  CD0BFE  	BUILD7:	CALL	INSERT		;INSERT FIELDS UP TO GAP 3
 203:24472+8+5	FDF3  10FB    		DJNZ	BUILD7
 204:24480+10	FDF5  C1      		POP	BC
 205:				
 206:24490+4	FDF6  0D      		DEC	C
 207:24494+7+5	FDF7  20C2    		JR	NZ,BUILD3
 208:				
 209:24501+16	FDF9  2AC3FF  		LD	HL,(TRKPTR)
 210:24517+10	FDFC  01D827  		LD	BC,10200
 211:24527+11	FDFF  09      		ADD	HL,BC		;COMPUTE END OF LONGEST TRACK IMAGE
 212:24538+15	FE00  ED52    		SBC	HL,DE		;COMPUTE BYTES NECESSARY TO GET THERE
 213:24553+4	FE02  44      		LD	B,H
 214:24557+4	FE03  4D      		LD	C,L
 215:24561+4	FE04  62      		LD	H,D
 216:24565+4	FE05  6B      		LD	L,E
 217:24569+6	FE06  13      		INC	DE
 218:24575+7	FE07  77      		LD	(HL),A
 219:24582+16+5	FE08  EDB0    		LDIR			;FILL REST OF BUFFER
 220:24598+10	FE0A  C9      		RET
 221:				;
 222:				;
 223:				;
 224:24608+11	FE0B  C5      	INSERT:	PUSH	BC
 225:24619+7	FE0C  46      		LD	B,(HL)
 226:24626+6	FE0D  23      		INC	HL
 227:24632+7	FE0E  7E      		LD	A,(HL)
 228:24639+6	FE0F  23      		INC	HL
 229:24645+7	FE10  12      	INS2:	LD	(DE),A
 230:24652+6	FE11  13      		INC	DE
 231:24658+8+5	FE12  10FC    		DJNZ	INS2
 232:24666+10	FE14  C1      		POP	BC
 233:24676+10	FE15  C9      		RET
 234:				;
 235:				;
 236:				;
 237:				;
 238:				;	... DISK FORMAT DATA TABLES FOR 5/8 DD/SD STANDARDS ...
 239:				;
 240:				;
 241:     -	FE16  01      	SD5N18:	DEFB	1
 242:     -	FE17  10FF    		DEFB	16,0FFH
 243:				
 244:     -	FE19  0B      		DEFB	11
 245:     -	FE1A  0300    		DEFB	3,00H		;GAP 3 (DONE AS 2 FIELDS TO MAKE
 246:     -	FE1C  0300    		DEFB	3,00H		; ID FIELD COME OUT IN RIGHT LOCATION)
 247:     -	FE1E  01FE    		DEFB	1,0FEH		;ID ADDRESS MARK
 248:     -	FE20  0100    		DEFB	1,00H		;TRACK
 249:     -	FE22  0100    		DEFB	1,00H		;SIDE
 250:     -	FE24  0100    		DEFB	1,00H		;SECTOR
 251:     -	FE26  0100    		DEFB	1,00H		;LENGTH
 252:     -	FE28  01F7    		DEFB	1,0F7H		;GENERATE CRC
 253:     -	FE2A  0BFF    		DEFB	11,0FFH		;GAP2
 254:     -	FE2C  0600    		DEFB	6,00H		;GAP2
 255:     -	FE2E  01FB    		DEFB	1,0FBH		;DATA ADDRESS MARK
 256:				
 257:     -	FE30  02      		DEFB	2
 258:     -	FE31  01F7    		DEFB	1,0F7H		;GENERATE CRC BYTES
 259:     -	FE33  09FF    		DEFB	9,0FFH		;GAP 3
 260:				;
 261:				;
 262:				;
 263:				;
 264:				;
 265:     -	FE35  01      	DD5N18:	DEFB	1
 266:     -	FE36  204E    		DEFB	32,4EH		;GAP 1
 267:				
 268:     -	FE38  0C      		DEFB	12
 269:     -	FE39  0C00    		DEFB	12,00H		;SECOND PART OF GAP 3
 270:     -	FE3B  03F5    		DEFB	3,0F5H		;GENERATE SYNC=A1 HEX
 271:     -	FE3D  01FE    		DEFB	1,0FEH		;GENERATE ID ADDRESS MARK
 272:     -	FE3F  0100    		DEFB	1,0		;TRACK#
 273:     -	FE41  0100    		DEFB	1,00000000B	;SIDE
 274:     -	FE43  0100    		DEFB	1,0		;SECTOR#
 275:     -	FE45  0101    		DEFB	1,00000001B	;LENGTH
 276:     -	FE47  01F7    		DEFB	1,0F7H		;GENERATE CRC
 277:     -	FE49  164E    		DEFB	22,4EH		;FIRST PART OF GAP 2
 278:     -	FE4B  0C00    		DEFB	12,00H		;SECOND PART OF GAP 2
 279:     -	FE4D  03F5    		DEFB	3,0F5H		;GENERATE SYNC=A1 HEX
 280:     -	FE4F  01FB    		DEFB	1,0FBH		;GENERATE DATA ADDRESS MARK
 281:				
 282:     -	FE51  02      		DEFB	2
 283:     -	FE52  01F7    		DEFB	1,0F7H		;GENERATE CRC BYTES
 284:     -	FE54  104E    		DEFB	16,4EH		;FIRST PART OF GAP 3
 285:				;
 286:				;
 287:				;
 288:     -	FE56  12100E0C	SKEWSD:	DEFB	18,16,14,12,10,8,6,4,2
	              0A080604
	              02
 289:     -	FE5F  110F0D0B		DEFB	17,15,13,11,9,7,5,3,1
	              09070503
	              01
 290:				;
 291:     -	FE68  01070D  	SKEWDD:	DEFB	1,7,13
 292:     -	FE6B  060C12  		DEFB	6,12,18
 293:     -	FE6E  050B11  		DEFB	5,11,17
 294:     -	FE71  040A10  		DEFB	4,10,16
 295:     -	FE74  03090F  		DEFB	3,9,15
 296:     -	FE77  02080E  		DEFB	2,8,14
 297:				;
 298:				;
 299:				;
 300:     -	FE7A  04      	SD8N26:	DEFB	4		;PREAMBLE FIELD
 301:     -	FE7B  28FF    		DEFB	40,0FFH		;GAP 4
 302:     -	FE7D  0600    		DEFB	6,00
 303:     -	FE7F  01FC    		DEFB	1,0FCH		;INDEX ADDRESS MARK
 304:     -	FE81  1AFF    		DEFB	26,0FFH
 305:				
 306:     -	FE83  0B      		DEFB	11
 307:     -	FE84  0300    		DEFB	3,00H		;GAP 3 (DONE AS 2 FIELDS)
 308:     -	FE86  0300    		DEFB	3,00H		;
 309:     -	FE88  01FE    		DEFB	1,0FEH		;ID ADDRESS MARK
 310:     -	FE8A  0100    		DEFB	1,00H		;TRACK
 311:     -	FE8C  0100    		DEFB	1,00H		;SIDE
 312:     -	FE8E  0100    		DEFB	1,00H		;SECTOR
 313:     -	FE90  0100    		DEFB	1,00H		;LENGTH
 314:     -	FE92  01F7    		DEFB	1,0F7H		;GENERATE CRC
 315:     -	FE94  0BFF    		DEFB	11,0FFH		;GAP2
 316:     -	FE96  0600    		DEFB	6,00H		;GAP2
 317:     -	FE98  01FB    		DEFB	1,0FBH		;DATA ADDRESS MARK
 318:				
 319:     -	FE9A  02      		DEFB	2
 320:     -	FE9B  01F7    		DEFB	1,0F7H		;GENERATE CRC BYTES
 321:     -	FE9D  1BFF    		DEFB	27,0FFH		;GAP 3
 322:				;
 323:				;
 324:				;
 325:     -	FE9F  05      	DD8N26:	DEFB	5
 326:     -	FEA0  504E    		DEFB	80,4EH		;POST-INDEX GAP
 327:     -	FEA2  0C00    		DEFB	12,00H		;INDEX SYNC
 328:     -	FEA4  03F6    		DEFB	3,0F6H		;GENERATE SYNC=C1 HEX
 329:     -	FEA6  01FC    		DEFB	1,0FCH		;GENERATE INDEX ADDRESS MARK
 330:     -	FEA8  324E    		DEFB	50,4EH		;GAP 1
 331:				
 332:     -	FEAA  0C      		DEFB	12
 333:     -	FEAB  0C00    		DEFB	12,00H		;SECOND PART OF GAP 3
 334:     -	FEAD  03F5    		DEFB	3,0F5H		;GENERATE SYNC=A1 HEX
 335:     -	FEAF  01FE    		DEFB	1,0FEH		;GENERATE ID ADDRESS MARK
 336:     -	FEB1  0100    		DEFB	1,0		;TRACK#
 337:     -	FEB3  0100    		DEFB	1,00000000B	;SIDE
 338:     -	FEB5  0100    		DEFB	1,0		;SECTOR#
 339:     -	FEB7  0101    		DEFB	1,00000001B	;LENGTH
 340:     -	FEB9  01F7    		DEFB	1,0F7H		;GENERATE CRC
 341:     -	FEBB  164E    		DEFB	22,4EH		;FIRST PART OF GAP 2
 342:     -	FEBD  0C00    		DEFB	12,00H		;SECOND PART OF GAP 2
 343:     -	FEBF  03F5    		DEFB	3,0F5H		;GENERATE SYNC=A1 HEX
 344:     -	FEC1  01FB    		DEFB	1,0FBH		;GENERATE DATA ADDRESS MARK
 345:				
 346:     -	FEC3  02      		DEFB	2
 347:     -	FEC4  01F7    		DEFB	1,0F7H		;GENERATE CRC BYTES
 348:     -	FEC6  354E    		DEFB	53,4EH		;FIRST PART OF GAP 3
 349:				;
 350:				;
 351:				;
 352:     -	FEC8  010E0310	SKEW13:	DEFB	1,14,3,16,5,18,7,20,9,22,11,24,13,26
	              05120714
	              09160B18
	              0D1A
 353:     -	FED6  020F0411		DEFB	2,15,4,17,6,19,8,21,10,23,12,25
	              06130815
	              0A170C19
 354:				;
 355:				;
 356:     -	FEE2  0112091A	SKEW17:	DEFB	1,18,9,26,17,8,25,16,7,24,15,6,23
	              11081910
	              07180F06
	              17
 357:     -	FEEF  0E05160D		DEFB	14,5,22,13,4,21,12,3,20,11,2,19,10
	              04150C03
	              140B0213
	              0A
 358:				;
 359:				;
**** ..\src\ROM.MAC ****
  50:				;
  51:				;
  52:				;
  53:     -	1517          		.DEPHASE
  54:     -	0EFC          	MONSIZE	EQU	$-MONCOPY
  55:				;
  56:				;
  57:     -	1517          	varcopy	equ	$
  58:     -	FF20          		.phase	0ff00h+32
  59:     -	FF00          	ram	equ	$-32		;put ram on start of 256 byte page
  60:     -	FF00          	keybuf	equ	ram		;16 byte keyboard input fifo
  61:     -	FF10          	ctcvec	equ	ram+16	;8 word interrupt vector table
  62:					INCLUDE	GLOBAL.MAC	;PUT GLOBAL VARIABLES AT TOP OF RAM
**** ..\src\GLOBAL.MAC ****
   1:				;********************************************************
   2:				;*							*
   3:				;*	GLOBAL VARIABLES FOR ATARI Z80 ROM		*
   4:				;*							*
   5:				;********************************************************
   6:				;
   7:     -	FF20          	glbvars	equ	$
   8:				;
   9:				;	... GLOBAL VARIABLES FOR PHYSICAL DISK HANDLER ...
  10:				;
  11:     -	FF20  FFFFFFFF	DRVTAB:	DEFB	255,255,255,255	;HEAD POSITIONS FOR 4 DRIVES
  12:     -	FF24  00000000		DEFB	0,0,0,0		;DENSITY/TYPE/SELECT BITS FOR 4 DRIVES
  13:     -	FF28  10101010	RATES:	DEFB	16,16,16,16	;SETTLING DELAYS / STEP RATES TABLE
  14:     -	FF2C  00      	UNIT:	DEFB	0		;CURRENTLY SELECTED DISK#
  15:     -	FF2D  FF      	TRACK:	DEFB	255		;TRACK POSITION OF SELECTED DRIVE
  16:     -	FF2E  01      	DRVOFF:	DEFB	1		;DRIVES-OFF FLAG FROM DISK TIMER IRQ
  17:     -	FF2F  00      	OUTCPY:	DEFB	00000000B	;COPY OF DISK CONTROL LATCH
  18:     -	FF30  0000    	PERIOD:	DEFW	0		;DISK SPIN PERIOD
  19:     -	FF32  32      	HLDTIM:	DEFB	50		;HEAD LOAD DELAY
  20:     -	FF33  0A      	RWMAX:	DEFB	10		;MAX NUMBER OF READ/WRITE RETRIES
  21:     -	FF34  00000000		DEFB	0,0,0,0		;ROOM FOR EXPANSION
  22:				;
  23:				;
  24:				;	... GLOBAL VARIABLES FOR ATARI HANDLER ...
  25:				;
  26:     -	FF38  21F8    	IDPTR:	DEFW	IDTAB		;POINTER TO DEVICE ID TABLE
  27:     -	FF3A  BEF7    	FSMVEC:	DEFW	PWRWAIT		;POINTER FOR ATARI TASK STATE MACHINE
  28:     -	FF3C  E1F7    	EXTVEC:	DEFW	DUMMY		;POINTER FOR EXTRA TASK PROCESSOR
  29:     -	FF3E  020D0A00	NEWLIN:	DEFB	2,CR,LF,0,0	;PRINTER NEWLINE CHARACTERS
	              00
  30:     -	FF43  00003C00	PSMSG:	DEFB	0,0,60,0	;PRINTER STATUS FRAME
  31:     -	FF47  80      	PMASKS:	DEFB	10000000B	;MASK ALL BITS BUT 'BUSY'
  32:     -	FF48  00      		DEFB	00000000B		;COMPARE TO ZERO FOR READY
  33:     -	FF49  B7FB    	FMTPTR:	DEFW	FMTS		;POINTER TO STANDARD FORMAT TABLES
  34:     -	FF4B  00C5    	PBASE:	DEFW	IOBUFF+(2*LEN)	;PUT PRINT BUFFER AFTER HERE
  35:     -	FF4D  FF0F    	PSIZE:	DEFW	4095		;MAX BUFFER INDEX OFFSET
  36:				
  37:     -	002F          	glbsize	equ	$-glbvars		;length of initialized variables
  38:     -	FF4F  73      	        DEFB    73h			; **** Exists in original ROM? ****
  39:				;
  40:				;
  41:				;	*** UNINITIALIZED SCRATCH VARIABLES COME AFTER HERE ***
  42:				;
  43:     -	FF4F          	PCOUNT:	EQU $-1				;BYTECOUNT FOR BUFFER
  44:     -	FF51          	PINP:	EQU PCOUNT+2		;INPUT OFFSET
  45:     -	FF53          	POUT:	EQU PINP+2			;OUTPUT OFFSET
  46:     -	FF55          	CMDFLG:	EQU POUT+2			;COMMAND FRAME READY FLAG FROM IRQ
  47:     -	FF56          	DMATRIX: EQU CMDFLG+1    	;DRIVE POOP TABLES
  48:     -	FF96          	OLDPTR:	EQU DMATRIX+64		;POINTER TO FIRST DRIVE ACCESSED
  49:     -	FF98          	DKIOCB:	EQU OLDPTR+2		;DISK I/O COMMAND BLOCK
  50:     -	FFA8          	DRWCMD:	EQU DKIOCB+16		;R/W COMMAND FROM ATARI TO 'DISKIO'
  51:     -	FFA9          	LOGSIZ:	EQU DRWCMD+1		;LOGICAL SECTOR LENGTH FOR XFER
  52:     -	FFAB          	IDBUF:	EQU	LOGSIZ+2		;BUFFER FOR ID MARK READS
  53:     -	FFB3          	IOPTR:	EQU IDBUF+8			;ATARI BLOCK INPUT POINTER
  54:     -	FFB5          	VFLAG:	EQU IOPTR+2			;VERIFY FLAG FOR DISK WRITES
  55:				
  56:				;
  57:				;
  58:				;	... VARIABLES FOR DISK FORMAT FUNCTION ...
  59:				;
  60:     -	FFB6          	FMTSTUFF	EQU	VFLAG+1
  61:     -	FFB6          	FRMPTR:	EQU VFLAG+1			;POINTER TO FORMAT DATA TABLE
  62:     -	FFB8          	SKWPTR:	EQU FRMPTR+2		;POINTER TO SKEW TABLE
  63:     -	FFBA          	NSECTS:	EQU SKWPTR+2		;NUMBER OF SECTORS
  64:     -	FFBB          	TRKSIZ:	EQU NSECTS+1		;TRACK LENGTH IN BYTES
  65:     -	0007          	FMTLEN	EQU	(TRKSIZ+2)-FMTSTUFF
  66:				
  67:     -	FFBD          	sides:	EQU TRKSIZ+2		;copy of 'nsides' for drive#
  68:     -	FFBE          	tracks:	EQU sides+1			;copy of 'ntrks' for drive#
  69:     -	FFBF          	SEQNUM:	EQU tracks+1		;TEMP SECTOR SEQUENCE NUMBER
  70:     -	FFC1          	SEQPTR:	EQU SEQNUM+2		;TEMP ERROR LOG TABLE POINTER
  71:     -	FFC3          	TRKPTR:	EQU SEQPTR+2		;POINTER TO START OF TRACK IMAGE
  72:				
  73:				;
  74:				;	... LOCAL VARIABLES FOR DISK HANDLER ...
  75:				;
  76:     -	FFC5          	CMDBYT:	EQU TRKPTR+2		;COMMAND BYTE FOR READS/WRITES
  77:     -	FFC6          	RWTRY:	EQU	CMDBYT+1		;READ/WRITE RETRY COUNT
  78:     -	FFC7          	TICKS:	EQU	RWTRY+1			;FREE RUNNING MILISECOND COUNTER
  79:     -	FFC9          	DRVTMR:	EQU TICKS+2			;DISK ACTIVITY TIMER
  80:				;
  81:				;
  82:				;
  83:				;
  84:     -	C100          	IOBUFF	EQU	0C100H		;ATARI I/O BUFFER
  85:     -	0200          	LEN	EQU	512
  86:				;
  87:     -	C300          	TRKBUF	EQU	IOBUFF+LEN	;TRACK BUFFER FOR READS
  88:				;
**** ..\src\ROM.MAC ****
  63:				;
  64:     -	1547          		.DEPHASE
  65:				;
  66:				;
  67:     -	1547          	LAST	EQU	$
  68:				
  69:     -	0000          		IF SALLYBUILD = 0
  77:					ENDIF
  78:				
  79:     -	1547          	END



Statistics:

     5	passes
     0	jr promotions
   560	symbols
  5447	bytes



Symbol Table:

ACTIVE         =04        4
ACTIVON         F03C      61500
ACTIVTY         F050      61520
ACTV2           F064      61540
ASCHEX          F483      62595
ATARI          =70        112
ATROUT         =50        80
BADCMD         =00        0
BADDAT         =01        1
BADRW          =02        2
BANKSW         =52        82
BOOT            F45F      62559
BOOTCB          F47A      62586
BUILD1          FDB1      64945
BUILD3          FDBB      64955
BUILD4          FDDA      64986
BUILD7          FDF0      65008
CALLHL          F7BD      63421
CDMUX          =57        87
CENT2           F4E5      62693
CENTOUT         F4DC      62684
CENTRDY         F4EB      62699
CFRAME         =C2FB      49915
CINIT2          F615      62997
CINIT3          F61A      63002
CINIT4          F61C      63004
CIV             F009      61449
CMDBYT         =FFC5      65477
CMDFLG         =FF55      65365
CMDL4           F7F3      63475
CMDL5           F809      63497
CMDOUT          F389      62345
CMDREG         =40        64
CMDSTS         =0C        12
CMDT1           F38B      62347
CMDT2           F38D      62349
CMDT3            5BE      1470
CMDWAIT         F7E2      63458
CONFIG         =01        1
CONIN           F640      63040
CONINIT         F5FC      62972
CONOUT          F650      63056
CONPAGE        =F500      62720
CONST           F635      63029
COUT2           F65F      63071
COV             F00C      61452
CR             =0D        13
CRLF            F4D5      62677
CSTART          F699      63129
CSTRT1          F6B4      63156
CSV             F006      61446
CTC0           =80        128
CTC1           =81        129
CTC2           =82        130
CTC3           =83        131
CTCVEC         =FF10      65296
CTC_D0_CONTROL =01        1
CTC_D0_VECTOR  =00        0
CTC_D1_SW_RST  =02        2
CTC_D2_TCNEXT  =04        4
CTC_D3_AUTOTRG =00        0
CTC_D3_CLKTRG  =08        8
CTC_D4_FALLEDGE=00        0
CTC_D4_RISEEDGE=10        16
CTC_D5_PRESC256=20        32
CTC_D5_PRESC_16=00        0
CTC_D6_MODE_CNT=40        64
CTC_D6_MODE_TIM=00        0
CTC_D7_INT_DIS =00        0
CTC_D7_INT_EN  =80        128
DATB2           F739      63289
DATBIT          F72C      63276
DATREG         =43        67
DD5N18          FE35      65077
DD8N26          FE9F      65183
DENSTY         =02        2
DINIT2          FB68      64360
DINIT3          FB6D      64365
DINIT6          FBAB      64427
DISK            F0B3      61619
DISK2           F0CA      61642
DISK3           F0CF      61647
DISK4           F0EE      61678
DISK4a          F100      61696
DISK5           F10F      61711
DISKDVR         F022      61474
DISKINIT        FB38      64312
DISKMAX        =07        7
DISKPUT         F905      63749
DISKREAD        F98C      63884
DISKSTAT        FADB      64219
DISKTAB         F83D      63549
DISKV           F00F      61455
DISKWRITE       F908      63752
DISKX           F110      61712
DKIOCB         =FF98      65432
DMATRIX        =FF56      65366
DRD2            F9A8      63912
DRD2A           F9AC      63916
DRD3            F9BA      63930
DRD4            F9DB      63963
DRVINDEX        FC28      64552
DRVOFF          FF2E      65326
DRVSEL1        =01        1
DRVSEL2        =02        2
DRVSEL3        =04        4
DRVSEL4        =08        8
DRVTAB          FF20      65312
DRVTMR         =FFC9      65481
DRWCMD         =FFA8      65448
DSKAUX         =06        6
DSKBITS        =08        8
DSKDRV         =01        1
DSKOP          =00        0
DSKPTR         =04        4
DSKSEC         =03        3
DSKSTS         =08        8
DSKTRK         =02        2
DSTAT1          FB04      64260
DSTAT2          FB06      64262
DSTAT3          FB10      64272
DSTAT4          FB12      64274
DSTAT5          FB1C      64284
DSTAT6          FB1E      64286
DTR            =55        85
DUMMY           F7E1      63457
DUMMYSYMBOL     01        1 (command line -D)
DWRT0           F90A      63754
DWRT1           F927      63783
DWRT2           F939      63801
DWRT3           F975      63861
DWRT4           F97D      63869
DWRT5           F984      63876
ECHO            F4B2      62642
EDGE            F1E3      61923
EDGE2           F1F4      61940
EMULATOR        F762      63330
ENDBIT          F755      63317
EXTVEC          FF3C      65340
FBS            =40        64
FDCRESET       =10        16
FDCSIDE        =20        32
FDENSITY       =80        128
FINCMD         =D0        208
FIRST          =00        0
FLAGS          =0E        14
FMTLEN         =07        7
FMTPTR          FF49      65353
FMTS            FBB7      64439
FMTSTUFF       =FFB6      65462
FORCE           F391      62353
FORM2           FCD8      64728
FORM3           FCF4      64756
FORM3A          FCFF      64767
FORM4           FD32      64818
FORM5           FD47      64839
FORM51          FD59      64857
FORM6           FD74      64884
FORMAT          FCBE      64702
FORMX           FD9A      64922
FRMPTR         =FFB6      65462
FSMVEC          FF3A      65338
GETID          =03        3
GETPARAMS       FBE7      64487
GETSEC         =01        1
GOTO            F45E      62558
HAS850          F791      63377
HASPARMS        FBD3      64467
HDWSTS         =0D        13
HLDTIM          FF32      65330
HLDWAIT         F399      62361
HLOAD          =08        8
IDBUF          =FFAB      65451
IDMAX          =06        6
IDPTR           FF38      65336
IDTAB           F821      63521
INDEX           F8F1      63729
INDEX2          F903      63747
INDXCLR        =54        84
INDXSET        =56        86
INIT            00        0
INIT1           02        2
INIT2           0A        10
INITAB           5C5      1477
INS2            FE10      65040
INSERT          FE0B      65035
IOBUFF         =C100      49408
IOPTR          =FFB3      65459
ITBLEN         =16        22
KEYBUF         =FF00      65280
KLUDGE          F188      61832
LAST           =1547      5447
LATCH          =30        48
LEN            = 200      512
LF             =0A        10
LISTV           F012      61458
LOGON           F766      63334
LOGSIZ         =FFA9      65449
MAIN            F7AC      63404
MEDIA          =05        5
MEMPTR          FCB2      64690
MINIMON         F3DE      62430
MONCOPY        = 61B      1563
MONITOR        =F000      61440
MONSIZE        = EFC      3836
NEWLIN          FF3E      65342
NMIVEC         =66        102
NOHIGHSPEEDSIO =00        0
NOWAITMTR      =08        8
NSECS          =02        2
NSECTS         =FFBA      65466
NTRKS          =00        0
NULL           =00        0
OLDPTR         =FF96      65430
OUTCPY          FF2F      65327
OUTPUT          F4BE      62654
PBASE           FF4B      65355
PCOUNT         =FF4F      65359
PERIOD          FF30      65328
PINP           =FF51      65361
PMASKS          FF47      65351
PNEXT           F4C9      62665
PNXT1           F4CA      62666
POUT           =FF53      65363
PRESENT        =06        6
PRINTER        =20        32
PROM1           F407      62471
PROM2           F419      62489
PROM3           F420      62496
PROMPT          F3F1      62449
PSIZE           FF4D      65357
PSMSG           FF43      65347
PTRID           F823      63523
PTRMAX         =02        2
PTRSTAT         F862      63586
PTRTAB          F835      63541
PTRWRITE        F878      63608
PUT2HS          F498      62616
PUT2HX          F49F      62623
PUT4HS          F493      62611
PUTNIB          F4A8      62632
PUTPARAMS       FC05      64517
PUTSEC         =02        2
PWRIT3          F88E      63630
PWRIT4          F8B4      63668
PWRT3A          F898      63640
PWRWAIT         F7BE      63422
RAM            =FF00      65280
RAMTST          10        16
RATES           FF28      65320
RBUFF2          F6D0      63184
RCOV2A          F332      62258
RCOV2B          F334      62260
RCOV4A          F359      62297
RCOV4B          F35B      62299
RDCMD          =88        136
RDTKDLY        =E4        228
RDTRK          =E0        224
READID          F097      61591
RECOV1          F31B      62235
RECOV2          F31F      62239
RECOV3          F342      62274
RECOVER         F30E      62222
RECVBUFF        F6B9      63161
RENEW           F018      61464
REST            52        82
REST1           59        89
REST2           62        98
REST3           6E        110
REST3A          80        128
REST4           93        147
REST4A          99        153
RESTART         F01B      61467
RESTORE         F237      62007
RETI1           F5F9      62969
RIDCMD         =C0        192
RSTCMD         =00        0
RTST1           15        21
RTST2           17        23
RTST3           21        33
RW1024          F2EC      62188
RW2             F2C5      62149
RW256           F2F5      62197
RW512           F2F2      62194
RWBUSY          F2F8      62200
RWDISK          F2B5      62133
RWEXIT          F303      62211
RWMAX           FF33      65331
RWTRY          =FFC6      65478
RXB1            F6E1      63201
RXB2            F6EC      63212
RXB3            F6F1      63217
RXB35           F704      63236
RXB4            F70E      63246
RXBAUD         =F506      62726
RXBLOCK         F6D9      63193
RXDAT2          F510      62736
RXDATA          F517      62743
RXINP          =F521      62753
RXOUT           F633      63027
RXSTART         F500      62720
RXSTOP          F52C      62764
RXTEMP         =F51C      62748
SALLYBUILD     =01        1
SCAN            F810      63504
SD5N18          FE16      65046
SD8N26          FE7A      65146
SEC256         =05        5
SECLEN         =06        6
SECREG         =42        66
SECTRAN         FA10      64016
SEEK            F257      62039
SEEK1           F204      61956
SEEK2           F211      61969
SEEKTRK         F1F8      61944
SEEKX           F22E      61998
SEL4            F167      61799
SEL5            F16A      61802
SEL5A           F174      61812
SELECT          F11A      61722
SELTAB          F198      61848
SELX            F18E      61838
SENDACK         FC4A      64586
SENDBUFF        F66C      63084
SENDCHAR        FC56      64598
SENDCOMP        FC54      64596
SEQNUM         =FFBF      65471
SEQPTR         =FFC1      65473
SERIN          =50        80
SEROUT         =51        81
SERPAGE        =F719      63257
SETSSO          F0AB      61611
SETSTAT         F9E3      63971
SETTLE         =04        4
SFMT2           FB8B      64395
SFMT3           FB8F      64399
SIDECMP        =02        2
SIDESEL        =08        8
SIOFAST        =08        8
SIONORMAL      =28        40
SIZE           =01        1
SKCMD          =10        16
SKEW13          FEC8      65224
SKEW17          FEE2      65250
SKEWDD          FE68      65128
SKEWSD          FE56      65110
SKWPTR         =FFB8      65464
SPARE0         =09        9
SPARE1         =0A        10
SPARE2         =0B        11
SPARE3         =0F        15
SPIN            F19C      61852
SPIN2           F1B9      61881
SPIN3           F1CF      61903
SPIN4           F1DF      61919
SPINWAIT       =00        0
SPOOLER         F8D1      63697
SSTS1           F9F0      63984
SSTS2           F9F6      63990
SSTS3           F9FC      63996
STARBIT         F719      63257
STARTMR         F3BA      62394
STEP            F275      62069
STEPIN         =40        64
STEPOUT        =60        96
STEPRATE       =03        3
STEPRATE0      =00        0
STEPRATE1      =01        1
STEPRATE2      =02        2
STEPRATE3      =03        3
STEPRT         =01        1
STOP1A          F74E      63310
STOPB1          F73B      63291
STOPTMR         F3CB      62411
STR20           FA40      64064
STR25           FA78      64120
STR26           FA7D      64125
STRAN1          FA22      64034
STRAN2          FA27      64039
STRAN3          FA9A      64154
STRAN4          FAA5      64165
STRAN5          FABF      64191
STROBE         =53        83
STSREG         =40        64
SalyCMDOUT       5B7      1463
SalyDISK3       F0D5      61653
SalyDISKID      F82B      63531
SalyDISKRD1     F993      63891
SalyDISKRD2     F996      63894
SalyDISKRD3     F9D4      63956
SalyDISKWRT1    F918      63768
SalyDISKWRT2    F91B      63771
SalyDISKWRT3    F948      63816
SalyLOGN1       F77E      63358
SalyLOGN2       F781      63361
SalyLogon        14C      332
SalyRXBLOCK     F6DC      63196
SalyResetFDC    F237      62007
SalySEL4         15D      349
SalySEL4A        18C      396
SalySEL4ex       1A5      421
SalyXMITBUF     F688      63112
TDRV2           F084      61572
TESTDRV         F078      61560
TICKS          =FFC7      65479
TMRIRQ          F3D2      62418
TPCMD2          F372      62322
TPCMD3          F382      62338
TRACK           FF2D      65325
TRKBUF         =C300      49920
TRKBUFFER      = 800      2048
TRKPTR         =FFC3      65475
TRKREG         =41        65
TRKSIZ         =FFBB      65467
TSTRDY         =00        0
TXDAT0          F554      62804
TXDAT1          F566      62822
TXDAT2          F578      62840
TXDAT3          F58A      62858
TXDAT4          F59C      62876
TXDAT5          F5AE      62894
TXDAT6          F5C0      62912
TXDAT7          F5D2      62930
TXEXIT          F5EE      62958
TXSTART         F547      62791
TXSTOP          F5E0      62944
TXTMP0         =F556      62806
TXTMP1         =F568      62824
TXTMP2         =F57A      62842
TXTMP3         =F58C      62860
TXTMP4         =F59E      62878
TXTMP5         =F5B0      62896
TXTMP6         =F5C2      62914
TXTMP7         =F5D4      62932
TYP1CMD         F36B      62315
TYP2CMD         F362      62306
UNIT            FF2C      65324
VARCOPY        =1517      5399
VERIFY          F295      62101
VFLAG          =FFB5      65461
VIEW            F430      62512
VIEW4           F456      62550
VIEW5           F458      62552
WAIT            F39E      62366
WAIT2           F39F      62367
WATCHDOG        F3A8      62376
WD1772         =00        0
WD179X         =40        64
WRPCOMP        =02        2
WRPROT         =03        3
WRTCMD         =A8        168
WRTKDLY        =F4        244
WRTRK          =F0        240
XMITBUF         F684      63108
Z80GOTO         FCB4      64692
Z80MAX         =04        4
Z80READ         FC5F      64607
Z80SET          FCA6      64678
Z80TAB          F854      63572
Z80WRITE        FC7B      64635
ZEROS           45        69
ZLENGTH         FC9C      64668
bild31          FDCB      64971
build           FDA4      64932
build6          FDE5      64997
checktrack       402      1026
cmdwaitfn        425      1061
code0000        C0        192
code8000        AE        174
compbufadr       3E5      997
compbufadr1      400      1024
compbufadr2      3FC      1020
dbgRWBUSY        513      1299
dcb              60C      1548
debug            2B2      690
direct           5FD      1533
diskiodebug      4F0      1264
diskiodebug1     51F      1311
drive            600      1536
dsector          5FB      1531
dskrd1           1AB      427
dskrd2           1BD      445
dskreadfn        324      804
dsktb            5DB      1499
dskwrite         29A      666
dskwrite1        2AF      687
dumpdcb          30B      779
dumpdcb1         313      787
dumpsec          3C3      963
dwrt             238      568
dwrta            247      583
dwrtb            270      624
dwrtc            25D      605
dwrtd            263      611
fastrecv         4B4      1204
fastrecv1        4C7      1223
fastrecv2        4D7      1239
fastrecv2a       4D9      1241
fastsend         46A      1130
fastsend1        476      1142
form3b          FD17      64791
getsize         FACD      64205
getspeed         40F      1039
getsz2          FAD3      64211
glbsize        =2F        47
glbvars        =FF20      65312
hispeed          5FF      1535
id               615      1557
irq4ms           4AF      1199
irq4ms1          4B1      1201
match            3A3      931
match1           3BA      954
match2           3BD      957
match3           3DA      986
match3a          3CE      974
nsides         =04        4
pokeydiv         5FE      1534
readtrack        379      889
readtrack1       376      886
readtrack2       366      870
readtrack3       34C      844
readtrack4       395      917
readtrack5       3A1      929
readtrack6       39F      927
rxblck           489      1161
rxblck1          49A      1178
sec2track        1E1      481
sec2track1       1EA      490
secptr           602      1538
seraddr          557      1367
sercmd           525      1317
sercr            54F      1359
serdump          52E      1326
serdump1         534      1332
serdump2         52F      1327
serhex           561      1377
serin1           5A4      1444
serin2           59B      1435
serinfn          59A      1434
sernib           570      1392
sernib1          57A      1402
serout1          587      1415
seroutfn         57A      1402
serspace         547      1351
shutdown        F068      61544
sides          =FFBD      65469
skewtab          604      1540
slyCMDT1         5B9      1465
slyCMDT2         5BB      1467
ssts4           FA06      64006
str27           FA85      64133
thetrack         601      1537
time19600        5B1      1457
time19600a       5B3      1459
togglebaud       4A0      1184
togglebaud1      4AB      1195
tracks         =FFBE      65470
xmitbuffn        43E      1086
xmitfast         44C      1100
xmitfast1        454      1108
