   1:				;
   2:     -	0001          			SALLYBUILD	EQU	1
   3:     -	0000          			WD1772		EQU	0
   4:				;	
   5:					ASEG
   6:     -	0000          		ORG	0
   7:				;
   8:				;
   9:				;
  10:						INCLUDE	EQUS.MAC
**** ..\src\EQUS.MAC ****
   1:				;--------------------------------------------------
   2:				; Equates for Sally2 Hi-Speed-SIO code
   3:				;--------------------------------------------------
   4:     -	0000          	NOHIGHSPEEDSIO	EQU	0
   5:				;
   6:				;--------------------------------------------------
   7:				; Track-Buffer 26*256 bytes
   8:				;--------------------------------------------------
   9:     -	0800          	TRKBUFFER	EQU	00800h
  10:				
  11:     -	0028          	SIONORMAL	EQU	40
  12:     -	0008          	SIOFAST		EQU	8
  13:				;--------------------------------------------------
  14:				;
  15:				;--------------------------------------------------
  16:				;
  17:				;
  18:				;
  19:     -	0020          	PRINTER	EQU	20H		;PRINTER OUTPUT/INPUTS
  20:     -	0030          	LATCH	EQU	30H		;DRIVE CONTROL LATCH
  21:     -	0040          	WD179X	EQU	40H		;WD TYPE DISK CONTROLLER
  22:				;
  23:     -	0050          	SERIN	EQU	50H		;RS232 SERIAL INPUT
  24:				;
  25:     -	0050          	ATROUT	EQU	50H		;ATARI SERIAL OUTPUT
  26:     -	0051          	SEROUT	EQU	51H		;RS232 SERIAL OUTPUT
  27:     -	0052          	BANKSW	EQU	52H		;ROM BANKSWITCH BIT
  28:     -	0053          	STROBE	EQU	53H		;PRINTER STROBE
  29:     -	0054          	INDXCLR	EQU	54H		;INDEX CONTROL FLOP CLEAR
  30:     -	0055          	DTR		EQU	55H		;DTR OUTPUT CONTROL
  31:     -	0056          	INDXSET	EQU	56H		;INDEX CONTROL FLOP SET
  32:     -	0057          	CDMUX	EQU	57H		;ATARI CMD/DATA MUX CONTROL
  33:				;
  34:     -	0070          	ATARI	EQU	70H		;ATARI INPUT BITS PORT
  35:     -	0080          	CTC0	EQU	80H		;ZILOG COUNTER/TIMER 0
  36:     -	0081          	CTC1	EQU	81H		;ZILOG COUNTER/TIMER 1
  37:     -	0082          	CTC2	EQU	82H		;ZILOG COUNTER/TIMER 2
  38:     -	0083          	CTC3	EQU	83H		;ZILOG COUNTER/TIMER 3
  39:				;
  40:     -	0000          	CTC_D0_VECTOR:		EQU	00000000B	;Data is a Vector
  41:     -	0001          	CTC_D0_CONTROL:		EQU	00000001B	;Data is a Control Word
  42:     -	0002          	CTC_D1_SW_RST:		EQU	00000010B	;Perform a software reset
  43:     -	0004          	CTC_D2_TCNEXT:		EQU	00000100B	;Time Constant follows
  44:     -	0000          	CTC_D3_AUTOTRG:		EQU	00000000B	;Automatic trigger when Time Constant loaded
  45:     -	0008          	CTC_D3_CLKTRG:		EQU	00001000B	;CLK/TRIG pin pulse starts timer
  46:     -	0000          	CTC_D4_FALLEDGE:	EQU	00000000B	;CLK/TRIG edge selection - falling edge
  47:     -	0010          	CTC_D4_RISEEDGE:	EQU	00010000B	;CLK/TRIG edge selection - rising edge
  48:     -	0000          	CTC_D5_PRESC_16:	EQU	00000000B	;Timer prescaler value of 16
  49:     -	0020          	CTC_D5_PRESC256:	EQU	00100000B	;Timer prescaler value of 256
  50:     -	0000          	CTC_D6_MODE_TIM:	EQU	00000000B	;Selects Timer mode
  51:     -	0040          	CTC_D6_MODE_CNT:	EQU	01000000B	;Selects Counter mode
  52:     -	0000          	CTC_D7_INT_DIS:		EQU	00000000B	;Disables Interrupt
  53:     -	0080          	CTC_D7_INT_EN:		EQU	10000000B	;Enables Interrupt
  54:				;
  55:     -	0000          	NULL	EQU	00H
  56:     -	000D          	CR	EQU	0DH
  57:     -	000A          	LF	EQU	0AH
  58:				;
**** ..\src\ROM.MAC ****
  11:						INCLUDE	SYSINIT.MAC
**** ..\src\SYSINIT.MAC ****
   1:				;********************************************************
   2:				;*							*
   3:				;*							*
   4:				;********************************************************
   5:				;
   6:				;
   7:     -	0000          		SALLYDEBUG = 0
   8:				;
   9:				;
  10:    0+4	0000  F3      	INIT:		DI
  11:    4+4	0001  AF      			XOR	A
  12:    8+4	0002  3D      	INIT1:		DEC	A
  13:   12+7+5	0003  20FD    			JR	NZ,INIT1				;DO NOTHING FOR 1 MILLISECOND
  14:				
  15:   19+10	0005  213E04  			LD	HL,INITAB
  16:   29+7	0008  060B    			LD	B,ITBLEN/2				;SEND INITIAL POOP TO PROGRAMABLE I/O'S
  17:   36+7	000A  4E      	INIT2:		LD	C,(HL)
  18:   43+6	000B  23      			INC	HL
  19:   49+16	000C  EDA3    			OUTI
  20:   65+7+5	000E  20FA    			JR	NZ,INIT2
  21:				;
  22:				;	PERFORM READ/WRITE TEST OF TOP 4K RAM
  23:				;
  24:   72+10	0010  2100F0  	RAMTST:		LD	HL,MONITOR
  25:   82+7	0013  3E01    			LD	A,1
  26:   89+7	0015  0610    	RTST1:		LD	B,16
  27:   96+7	0017  77      	RTST2:		LD	(HL),A					;WRITE TEST BYTE INTO MONITOR/GLOBALS
  28:  103+4	0018  07      			RLCA						;ROTATE BIT PATTERN IN A
  29:  107+4	0019  2C      			INC	L					;BUMP L TO DO INNER LOOP 256 TIMES
  30:  111+7+5	001A  20FB    			JR	NZ,RTST2
  31:  118+4	001C  24      			INC	H
  32:  122+8+5	001D  10F8    			DJNZ	RTST2					;REPEAT 16 TIMES FOR 4096 BYTES
  33:				
  34:  130+7	001F  0E10    			LD	C,16
  35:  137+6	0021  2B      	RTST3:		DEC	HL
  36:  143+4	0022  0F      			RRCA
  37:  147+7	0023  BE      			CP	(HL)					;VERIFY THAT TEST PATTERN IS WRITTEN
  38:  154+7+5	0024  20FE    			JR	NZ,$					;STICK FOREVER IF MONITOR RAM FAILURE
  39:  161+8+5	0026  10F9    			DJNZ	RTST3
  40:  169+4	0028  0D      			DEC	C
  41:  173+7+5	0029  20F6    			JR	NZ,RTST3
  42:				
  43:  180+4	002B  87      			ADD	A,A
  44:  184+7+5	002C  20E7    			JR	NZ,RTST1				;DO 8 PASSES OVER MEMORY
  45:				;
  46:				;	NOW COPY MONITOR AND VARIABLES TO HIGH RAM
  47:				;
  48:  191+10	002E  219304  			LD	HL,MONCOPY
  49:  201+10	0031  1100F0  			LD	DE,MONITOR
  50:  211+10	0034  01FC0F  			LD	BC,MONSIZE
  51:  221+16+5	0037  EDB0    			LDIR						;COPY RESIDENT CODE INTO RAM
  52:				
  53:  237+10	0039  218F14  			LD	HL,VARCOPY
  54:  247+10	003C  1120FF  			LD	DE,glbvars
  55:  257+10	003F  012F00  			LD	BC,glbsize
  56:  267+16+5	0042  EDB0    			LDIR						;INITIALIZE GLOBAL VARIABLES
  57:  283+4	0044  AF      			XOR	A
  58:  287+7	0045  12      	ZEROS:		LD	(DE),A
  59:  294+4	0046  1C      			INC	E
  60:  298+7+5	0047  20FC    			JR	NZ,ZEROS				;FILL REST OF SCRATCHPAD WITH ZEROS
  61:				;
  62:				;	ESTABLISH STACK AND INTERRUPT VECTOR BASE
  63:				;
  64:  305+10	0049  3110FF  			LD	SP,KEYBUF+16				;TEMP PLACE FOR STACK
  65:  315+7	004C  3EFF    			LD	A,HIGH RAM			
  66:  322+9	004E  ED47    			LD	I,A					;POINT I REGISTER TO VECTOR TABLE
  67:  331+8	0050  ED5E    			IM	2					;SELECT VECTORED INTERRUPTS
  68:				;			
  69:				;step 5 times in and then out to trk00.  
  70:				;set bit 6 for each online floppy in ff5eh percom block (16 bytes, byte 8 bit 6)
  71:				;
  72:  339+7	0052  3E4F    	REST:		LD	A, FBS+DRVSEL4+DRVSEL3+DRVSEL2+DRVSEL1	;INITIAL DRIVE PATTERN (ALL SELECTED) - select drive 1-4, Motor off, side 0, B/S=1, DD
  73:  346+11	0054  D330    			OUT	(LATCH), A
  74:  357+4	0056  57      			LD	D,A					;KEEP PATTERN IN D (d = 4fh)
  75:  361+7	0057  0605    			LD	B,5					;step 5 times
  76:  368+7	0059  3E4B    	REST1:		LD	A,STEPIN+NOWAITMTR+STEPRATE		;4b: 4 = step-in, b = NOWAITMTR+STEPRATE3
  77:				
  78:     -	0000          	IF WD1772
  80:				ELSE			
  81:  375+17	005B  CD6BF3  			CALL	TYP1CMD					;STEP IN 5 TIMES AS PRECAUTION FOR
  82:				ENDIF	;WD1772			
  83:							
  84:  392+8+5	005E  10F9    			DJNZ	REST1					; DRIVES THAT GET BEHIND TK0 SENSOR
  85:  400+7	0060  0664    			LD	B,100					;DO 100 STEPS TOWARD TRACK ZERO (support 100 track drives)
  86:  407+4	0062  7A      	REST2:		LD	A,D			
  87:  411+11	0063  D330    			OUT	(LATCH),A				;ISSUE SELECTS AND PAUSE A BIT
  88:  422+19	0065  E3      			EX	(SP),HL
  89:  441+19	0066  E3      			EX	(SP),HL
  90:  460+7	0067  3E6B    			LD	A,STEPOUT+NOWAITMTR+STEPRATE		;6b: 6 = step-out, b = NOWAITMTR+STEPRATE3
  91:				
  92:     -	0000          	IF WD1772
  94:				ELSE			
  95:  467+17	0069  CD6BF3  			CALL	TYP1CMD					;ISSUE STEP OUT COMMAND TO DRIVES
  96:				ENDIF	;WD1772			
  97:							
  98:  484+7	006C  1E01    			LD	E,DRVSEL1				;PREPARE TO TEST TK0 INDICATORS
  99:  491+4	006E  7B      	REST3:		LD	A,E			
 100:  495+7	006F  F640    			OR	FBS			
 101:  502+11	0071  D330    			OUT	(LATCH),A				;SELECT ONE DRIVE AT A TIME
 102:  513+19	0073  E3      			EX	(SP),HL					;Use this benign operation pair
 103:  532+19	0074  E3      			EX	(SP),HL					;to wait 38 T-states
 104:				
 105:     -	0000          	IF WD1772
 107:				ELSE
 108:  551+17	0075  CD91F3  			CALL	FORCE					;FORCE INTERRUPT TO SET TYPE 1 STATUS
 109:				ENDIF	;WD1772			
 110:							
 111:  568+8	0078  CB57    			BIT	2, A			
 112:  576+7+5	007A  2804    			JR	Z,REST3A				;JUMP IF TRACK ZERO NOT INDICATED
 113:  583+4	007C  7B      			LD	A,E			
 114:  587+4	007D  2F      			CPL			
 115:  591+4	007E  A2      			AND	D					;ELSE RESET SELECT BIT FOR DRIVE IN D
 116:  595+4	007F  57      			LD	D,A			
 117:  599+8	0080  CB23    	REST3A:		SLA	E					;ADVANCE SELECT BIT
 118:  607+8	0082  CB63    			BIT	4,E			
 119:  615+7+5	0084  28E8    			JR	Z,REST3					;DO SAME FOR ALL 4 DRIVES
 120:  622+8+5	0086  10DA    			DJNZ	REST2					;THEN REPEAT STEP OUT 100 TIMES
 121:							
 122:     -	0000          	IF WD1772			
 127:				ELSE			
 128:  630+17	0088  CD68F0  			call	shutdown				;unload the heads and deselect the drives
 129:				ENDIF	;WD1772
 130:				
 131:  647+10	008B  215EFF  			LD	HL,DMATRIX+DSKBITS
 132:  657+10	008E  011000  			LD	BC,16
 133:  667+7	0091  3E04    			LD	A,4					;PREP TO SET FLAGS FOR DRIVES PRESENT
 134:  674+8	0093  CB1A    	REST4:		RR	D			
 135:  682+7+5	0095  3802    			JR	C,REST4A				;JUMP IF DRIVE(N) NOT AT TRACK ZERO
 136:  689+15	0097  CBF6    			SET	PRESENT,(HL)				;ELSE SET BIT IN ARRAY(HL)
 137:  704+11	0099  09      	REST4A:		ADD	HL,BC			
 138:  715+4	009A  3D      			DEC	 A			
 139:  719+7+5	009B  20F6    			JR	NZ,REST4				;DO FOR ALL 4 DRIVES
 140:				;			
 141:     -	0001          	IF SALLYBUILD			
 142:  726+10	009D  210000  			LD	HL, 00000h				; source
 143:  736+10	00A0  110080  			LD	DE, 08000h				; dest
 144:  746+10	00A3  010020  			LD	BC, 02000h
 145:  756+16+5	00A6  EDB0    			LDIR
 146:  772+10	00A8  21AE00  			LD	HL, code8000
 147:  782+8	00AB  CBFC    			SET	7, H
 148:  790+4	00AD  E9      			JP	(HL)
 149:     -	00AE          	code8000:
 150:  794+7	00AE  3E01    			LD	A, 1
 151:  801+11	00B0  D352    			OUT	(BANKSW), A
 152:  812+10	00B2  210080  			LD	HL, 08000h
 153:  822+10	00B5  110000  			LD	DE, 00000h
 154:  832+10	00B8  010020  			LD	BC, 02000h
 155:  842+16+5	00BB  EDB0    			LDIR
 156:  858+10	00BD  C3C000  			JP	code0000
 157:     -	00C0          	code0000:
 158:				ENDIF	;SALLYBUILD
 159:				
 160:  868+10	00C0  3100C1  			LD	SP, IOBUFF				;NEW PLACE FOR STACK
 161:				
 162:     -	0001          	IF SALLYBUILD
 163:				;--------------------------------------------------
 164:				; firmware patch
 165:				;--------------------------------------------------
 166:  878+10	00C3  21FFFF  			LD	HL, 0ffffh				;reset drive / track buffer
 167:  888+16	00C6  227804  			LD	(drive), HL
 168:				
 169:  904+10	00C9  213FF9  			LD	HL, DISKTAB+2
 170:  914+10	00CC  115704  			LD	DE, dsktb+3
 171:  924+10	00CF  011500  			LD	BC, 3*7
 172:  934+16+5	00D2  EDB0    			LDIR
 173:				
 174:  950+10	00D4  210800  			LD	HL, 8
 175:  960+16	00D7  225404  			LD	(dsktb),HL
 176:  976+7	00DA  3E3F    			LD	A, '?'
 177:  983+13	00DC  325604  			LD	(dsktb+2), A
 178:  996+4	00DF  EB      			EX	DE, HL
 179:				
 180: 1000+7	00E0  3E56    			LD	A, getspeed & 255
 181: 1007+7	00E2  77      			LD	(HL), A
 182: 1014+6	00E3  23      			INC	HL
 183: 1020+7	00E4  3E03    			LD	A, getspeed / 256
 184: 1027+7	00E6  77      			LD	(HL), A
 185: 1034+6	00E7  23      			INC	HL
 186:				
 187: 1040+10	00E8  215404  			LD	HL, dsktb
 188: 1050+16	00EB  222BF9  			LD	(SalyDISKID), HL
 189: 1066+16	00EE  222DF9  			LD	(SalyDISKID+2), HL
 190: 1082+16	00F1  222FF9  			LD	(SalyDISKID+4), HL
 191: 1098+16	00F4  2231F9  			LD	(SalyDISKID+6), HL
 192:				
 193: 1114+7	00F7  3E28    			LD	A, SIONORMAL
 194: 1121+13	00F9  327704  			LD	(pokeydiv), A
 195: 1134+4	00FC  AF      			XOR	A
 196:				;		LD	(hispeed), A
 197: 1138+7	00FD  3E02    			LD	A, 2
 198: 1145+13	00FF  327604  			LD	(direct), A
 199: 1158+7	0102  3EC3    			LD	A, 0c3h					;'JP' instruction
 200: 1165+13	0104  3284F7  			LD	(XMITBUF), A
 201: 1178+13	0107  32D9F7  			LD	(RXBLOCK), A
 202: 1191+13	010A  32E2F8  			LD	(CMDWAIT), A
 203: 1204+13	010D  327EF8  			LD	(SalyLOGN1), A
 204: 1217+13	0110  3218FA  			LD	(SalyDISKWRT1), A
 205: 1230+13	0113  3293FA  			LD	(SalyDISKRD1), A
 206:				;		LD	(DISK4),A
 207:				
 208: 1243+10	0116  218D03  			LD	HL, xmitbuffn
 209: 1253+16	0119  2285F7  			LD	(XMITBUF+1), HL
 210: 1269+10	011C  21D803  			LD	HL, rxblck
 211: 1279+16	011F  22DAF7  			LD	(RXBLOCK+1), HL
 212: 1295+10	0122  216903  			LD	HL, cmdwaitfn
 213: 1305+16	0125  22E3F8  			LD	(CMDWAIT+1), HL
 214: 1321+10	0128  218D02  			LD	HL, dskreadfn
 215: 1331+16	012B  22D5FA  			LD	(SalyDISKRD3+1), HL
 216: 1347+10	012E  217502  			LD	HL, dskwrite
 217: 1357+16	0131  2249FA  			LD	(SalyDISKWRT3+1), HL
 218: 1373+10	0134  214901  			LD	HL, SalyLogon
 219: 1383+16	0137  227FF8  			LD	(SalyLOGN1+1), HL
 220: 1399+10	013A  211302  			LD	HL, dwrt
 221: 1409+16	013D  2219FA  			LD	(SalyDISKWRT1+1), HL
 222: 1425+10	0140  21A801  			LD	HL, dskrd1
 223: 1435+16	0143  2294FA  			LD	(SalyDISKRD1+1), HL
 224:				;		LD	HL, diskiodebug
 225:				;		LD	(DISK4+1),HL
 226:				
 227:				ENDIF	;SALLYBUILD
 228:				
 229: 1451+10	0146  C362F8  			JP	EMULATOR				;GO INITIALIZE FOR ATARI OR CP/M
 230:				
 231:				
 232:     -	0001          	IF SALLYBUILD
 233:     -	0149          	SalyLogon:
 234: 1461+13	0149  3233FF  			LD	(RWMAX),A				;DO LESS RETRIES IN ATARI MODE
 235:				
 236: 1474+7	014C  3EC3    			LD	A, 0c3h					;'JP' instruction
 237: 1481+13	014E  3267F1  			LD	(SEL4), A
 238: 1494+10	0151  215A01  			LD	HL, SalySEL4
 239: 1504+16	0154  2268F1  			LD	(SEL4+1), HL
 240:     -	0000          		IF WD1772
 243:					ENDIF
 244: 1520+10	0157  C381F8  			JP	SalyLOGN2
 245:				
 246:     -	0000          		IF WD1772
 255:					ENDIF
 256:				;
 257:				;
 258:				;
 259:     -	015A          	SalySEL4:
 260: 1530+8	015A  CB70    			BIT	6, B					;8" found?
 261: 1538+7+5	015C  2844    			JR	Z, SalySEL4ex				;yes, do nothing
 262:				
 263: 1545+11	015E  C5      			PUSH	BC					;save registers
 264: 1556+11	015F  D5      			PUSH	DE
 265: 1567+11	0160  E5      			PUSH	HL
 266: 1578+15	0161  DDE5    			PUSH	IX
 267:				
 268: 1593+4	0163  78      			LD	A, B					;switch HD on
 269: 1597+8	0164  CBB7    			RES	6, A
 270: 1605+11	0166  D330    			OUT	(LATCH), A
 271:				
 272: 1616+15	0168  DDE5    			PUSH	IX					;load HL with IX
 273: 1631+10	016A  E1      			POP	HL
 274: 1641+10	016B  118404  			LD	DE, dcb
 275: 1651+10	016E  010900  			LD	BC, 9
 276: 1661+16+5	0171  EDB0    			LDIR						;copy dcb
 277:							
 278: 1677+14	0173  DD218404			LD	IX, dcb
 279: 1691+10	0177  218D04  			LD	HL, id
 280: 1701+16	017A  228804  			LD	(dcb + DSKPTR), HL
 281: 1717+7	017D  3EC0    			LD	A, RIDCMD
 282: 1724+13	017F  32C5FF  			LD	(CMDBYT), A
 283: 1737+7	0182  3E18    			LD	A, 018h					;substitute JR	Z,xx by JR xx
 284: 1744+13	0184  3200F1  			LD	(DISK3 + 031h), A
 285: 1757+7	0187  0606    			LD	B, 6
 286:     -	0189          	SalySEL4A:
 287: 1764+11	0189  C5      			PUSH	BC
 288: 1775+17	018A  CDD5F0  			CALL	SalyDISK3				;DISK3: READ 6 BYTE ID RECORD
 289: 1792+10	018D  C1      			POP	BC
 290: 1802+8+5	018E  10F9    			DJNZ	SalySEL4A
 291:				
 292: 1810+7	0190  3E28    			LD	A, 028h					;reset JR Z,xx
 293: 1817+13	0192  3200F1  			LD	(DISK3 + 031h), A
 294:							
 295: 1830+14	0195  DDE1    			POP	IX
 296: 1844+10	0197  E1      			POP	HL
 297: 1854+10	0198  D1      			POP	DE
 298: 1864+10	0199  C1      			POP	BC
 299: 1874+13	019A  3A8C04  			LD	A, (dcb + DSKSTS)			;check disk status
 300: 1887+4	019D  B7      			OR	A
 301: 1891+7+5	019E  2002    			JR	NZ, SalySEL4ex				;not zero, no HD
 302: 1898+8	01A0  CBB0    			RES	6, B					;
 303:     -	01A2          	SalySEL4ex:             
 304: 1906+4	01A2  78      			LD	A, B
 305: 1910+7	01A3  1600    			LD	D, 0
 306: 1917+10	01A5  C36AF1  			JP	SEL5
 307:				
 308:				;--------------------------------------------------
 309:				; hook for read directSector if aux1/2 = 0
 310:				;--------------------------------------------------
 311:     -	01A8          	dskrd1:
 312: 1927+7	01A8  3E02    			LD	A, 2
 313: 1934+13	01AA  327604  			LD	(direct), A				;clear direct
 314:				
 315: 1947+16	01AD  2AFDC2  			LD	HL, (CFRAME + 2)			;load DAUX1/2, test if zero
 316: 1963+4	01B0  7D      			LD	A, L
 317: 1967+4	01B1  B4      			OR	H
 318: 1971+7+5	01B2  2806    			JR	Z, dskrd2				;if zero, use direct sector number
 319: 1978+17	01B4  CD10FB  			CALL	SECTRAN					;else use original code, call SECTRAN
 320: 1995+10	01B7  C396FA  			JP	SalyDISKRD2				;and procees
 321:				
 322:     -	01BA          	dskrd2:
 323: 2005+14	01BA  DD2198FF			LD	IX, DKIOCB
 324: 2019+19	01BE  DD360000			LD	(IX + DSKOP), TSTRDY
 325:				;		CALL	dumpdcb
 326: 2038+11	01C2  E5      			PUSH	HL
 327: 2049+17	01C3  CD0FF0  			CALL	DISKV
 328: 2066+10	01C6  E1      			POP	HL
 329:				
 330: 2076+17	01C7  CDDE01  			CALL	sec2track				;compute sector, track, side from direct sector
 331: 2093+19	01CA  DD360001			LD	(IX + DSKOP), GETSEC
 332:				;		CALL	dumpdcb
 333: 2112+11	01CE  E5      			PUSH	HL
 334: 2123+17	01CF  CD8D02  			CALL	dskreadfn				;CALL DISK I/O HANDLER
 335: 2140+10	01D2  E1      			POP	HL
 336:				
 337: 2150+13	01D3  3AA0FF  			LD	A, (DKIOCB+DSKSTS)
 338: 2163+17	01D6  CDE3FA  			CALL	SETSTAT					;call SETSTAT
 339: 2180+7	01D9  1600    			LD	D, 0					;no invert
 340: 2187+10	01DB  C36CF7  			JP	SENDBUFF				;jump SENDBUFF
 341:				
 342:				;--------------------------------------------------
 343:				;compute sector, track, side from direct sector
 344:				;--------------------------------------------------
 345:     -	01DE          	sec2track:
 346: 2197+4	01DE  AF      			XOR	A					;clear carry and a
 347: 2201+7	01DF  06FF    			LD	B, 0ffh					;also b
 348: 2208+16	01E1  2A7404  			LD	HL, (dsector)				;compute track and side numer
 349: 2224+10	01E4  111200  			LD	DE, 18					;18 secs per track
 350:     -	01E7          	sec2track1:             
 351: 2234+4	01E7  04      			INC	B					;b holds track-number
 352: 2238+15	01E8  ED52    			sbc	HL, DE
 353: 2253+7+5	01EA  30FB    			JR	NC, sec2track1				;subtract 18 as long carry clear
 354: 2260+4	01EC  7D      			LD	A, L
 355: 2264+7	01ED  C613    			ADD	19					;add 19 to get sector number + 1
 356: 2271+13	01EF  329BFF  			LD	(DKIOCB+DSKSEC), A
 357: 2284+8	01F2  CB38    			SRL	B					;divide track by two, (we have two sides)
 358: 2292+4	01F4  78      			LD	A, B
 359: 2296+13	01F5  329AFF  			LD	(DKIOCB+DSKTRK), A
 360: 2309+4	01F8  1F      			RRA						;shift-in side-number from previously lowest-bit
 361: 2313+7	01F9  E680    			AND	080h					;mask out bit 0-6
 362: 2320+10	01FB  2199FF  			LD	HL, DKIOCB+DSKDRV
 363: 2330+15	01FE  CBBE    			RES	7, (HL)
 364: 2345+7	0200  B6      			OR	(HL)
 365: 2352+7	0201  77      			LD	(HL), A
 366:							
 367:				;		CALL	serhex
 368:				;		CALL	serspace
 369:				;		LD	A, 'S'
 370:				;		CALL	seroutfn
 371:				;		LD	A, (DKIOCB+DSKSEC)
 372:				;		CALL	serhex
 373:				;		CALL	serspace
 374:				;		LD	A, 'T'
 375:				;		CALL	seroutfn
 376:				;		LD	A, (DKIOCB+DSKTRK)
 377:				;		CALL	serhex
 378:				;		CALL	sercr
 379:							
 380: 2359+10	0202  210002  			LD	HL, 512
 381: 2369+16	0205  229EFF  			LD	(DKIOCB+DSKAUX), HL
 382: 2385+10	0208  2100C1  			LD	HL, IOBUFF
 383: 2395+16	020B  229CFF  			LD	(DKIOCB+DSKPTR), HL
 384: 2411+14	020E  DD2198FF			LD	IX, DKIOCB
 385: 2425+10	0212  C9      			RET     
 386:				
 387:				;--------------------------------------------------
 388:				; hook for setDirectSector if aux1/2 = 0
 389:				;--------------------------------------------------
 390: 2435+11	0213  E5      	dwrt:		PUSH	HL
 391: 2446+16	0214  22A9FF  			LD	(LOGSIZ),HL				;SAVE DATA BLOCK LENGTH
 392:				
 393: 2462+16	0217  2AFDC2  			LD	HL, (CFRAME + 2)			;load DAUX1/2
 394: 2478+4	021A  7D      			LD	A, L
 395: 2482+4	021B  B4      			OR	H
 396: 2486+7+5	021C  2804    			JR	Z, dwrta				;if zero, do special stuff
 397:				
 398: 2493+10	021E  E1      			POP	HL					;otherwise continue
 399: 2503+10	021F  C31BFA  			JP	SalyDISKWRT2				;normal
 400:				
 401: 2513+17	0222  CD4AFD  	dwrta:		CALL	SENDACK
 402:				
 403: 2530+10	0225  217604  			LD	HL, direct				;direct
 404:				;		LD	A, (HL)
 405:				;		CALL	serhex
 406: 2540+11	0228  35      			DEC	(HL)
 407: 2551+7+5	0229  2813    			JR	Z, dwrtd				;first sector
 408: 2558+10	022B  FA4B02  			JP	M, dwrtb				;second sector
 409:				
 410: 2568+7	022E  0640    			LD	B, 64
 411: 2575+8+5	0230  10FE    			DJNZ	$					;wait some time
 412:				
 413: 2583+16	0232  2A00C1  			LD	HL, (IOBUFF)				;save 2-byte sector number (0-xxxx)
 414: 2599+16	0235  227404  			LD	(dsector), HL
 415:				
 416: 2615+10	0238  E1      	dwrtc:		POP	HL
 417: 2625+7	0239  3E43    			LD	A, 'C'
 418: 2632+10	023B  C356FD  			JP	SENDCHAR
 419:				
 420: 2642+10	023E  2100C1  	dwrtd:		LD	HL, IOBUFF
 421: 2652+10	0241  1102C3  			LD	DE, IOBUFF+LEN+2
 422: 2662+10	0244  010001  			LD	BC, 0100h				;rec first half
 423: 2672+16+5	0247  EDB0    			LDIR
 424: 2688+12	0249  18ED    			JR	dwrtc
 425:				
 426: 2700+10	024B  3602    	dwrtb:		LD	(HL), 2					;direct = 2
 427:				
 428: 2710+10	024D  210002  			LD	HL, 512					;LOGSIZ 512 bytes in this case
 429: 2720+16	0250  22A9FF  			LD	(LOGSIZ), HL
 430:							
 431: 2736+10	0253  2100C1  			LD	HL, IOBUFF
 432: 2746+10	0256  1100C2  			LD	DE, IOBUFF+0100h
 433: 2756+10	0259  010001  			LD	BC, 0100h
 434: 2766+16+5	025C  EDB0    			LDIR    
 435: 2782+10	025E  2102C3  			LD	HL, IOBUFF+LEN+2
 436: 2792+10	0261  1100C1  			LD	DE, IOBUFF
 437: 2802+10	0264  010001  			LD	BC, 0100h
 438: 2812+16+5	0267  EDB0    			LDIR
 439:				
 440: 2828+17	0269  CDDE01  			CALL	sec2track
 441:				
 442: 2845+19	026C  DD360002			LD	(IX + DSKOP), PUTSEC
 443: 2864+17	0270  CD7502  			CALL	dskwrite
 444:				
 445: 2881+12	0273  18C3    			JR	dwrtc
 446:				;--------------------------------------------------
 447:				; dskwrite: write through sector
 448:				;--------------------------------------------------
 449:     -	0275          	dskwrite:
 450:				;		LD	A, 'W';
 451:				;		CALL	seroutfn
 452:				
 453:				;		JP	DISKV
 454:				
 455: 2893+17	0275  CD4903  			CALL	checktrack
 456: 2910+7+5	0278  2010    			JR	NZ, dskwrite1
 457:				
 458:				;		LD	HL, (LOGSIZ)
 459:				;		CALL	seraddr
 460:				
 461: 2917+17	027A  CD2C03  			CALL	compbufadr
 462:				;		CALL	seraddr
 463:				
 464: 2934+4	027D  EB      			EX	DE, HL
 465: 2938+19	027E  DD6605  			LD	H, (IX + DSKPTR+1)
 466: 2957+19	0281  DD6E04  			LD	L, (IX + DSKPTR)
 467: 2976+20	0284  ED4BA9FF			LD	BC, (LOGSIZ)
 468:				
 469: 2996+16+5	0288  EDB0    			LDIR
 470:				
 471:     -	028A          	dskwrite1:
 472: 3012+10	028A  C30FF0  			JP	DISKV
 473:				
 474:				
 475:				;--------------------------------------------------
 476:				; dskreadfn: cache a track
 477:				;--------------------------------------------------
 478:     -	028D          	dskreadfn:
 479:				;		LD	A, 'R'
 480:				;		CALL	debug
 481:				
 482: 3022+17	028D  CD4903  			CALL	checktrack
 483: 3039+10	0290  CA0C03  			JP	Z, match
 484:				;		ld	a, 'N'
 485:				;		CALL	seroutfn
 486: 3049+20	0293  ED537804			LD	(drive), DE				;save new drive and track
 487: 3069+15	0297  DDE5    			PUSH	IX					;save IX
 488:				
 489: 3084+15	0299  DDE5    			PUSH	IX					;load HL with IX
 490: 3099+10	029B  E1      			POP	HL
 491: 3109+10	029C  118404  			LD	DE, dcb
 492: 3119+10	029F  010900  			LD	BC, 9
 493: 3129+16+5	02A2  EDB0    			LDIR						;copy dcb
 494:							
 495: 3145+14	02A4  DD218404			LD	IX, dcb					;load IX with new dcb
 496:							
 497: 3159+13	02A8  3A8B04  			LD	A, (dcb + DSKAUX+1)			;get sector length high-byte
 498: 3172+7	02AB  FE02    			CP	2
 499: 3179+7+5	02AD  2020    			JR	NZ, readtrack2				;no MS-DOS disk
 500:				
 501:				
 502: 3186+10	02AF  210008  			LD	HL, TRKBUFFER
 503: 3196+10	02B2  010112  			LD	BC, 18 * 256 + 1			;b=18, c = 1
 504:				
 505:     -	02B5          	readtrack3:
 506: 3206+16	02B5  228804  			LD	(dcb + DSKPTR), HL
 507: 3222+19	02B8  DD7103  			LD	(IX + DSKSEC),	C
 508:				
 509:				;		CALL	dumpdcb
 510:				
 511: 3241+11	02BB  E5      			PUSH	HL
 512: 3252+11	02BC  C5      			PUSH	BC
 513: 3263+17	02BD  CD0FF0  			CALL	DISKV
 514: 3280+10	02C0  C1      			POP	BC
 515: 3290+10	02C1  E1      			POP	HL
 516:				;		CALL	dumpsec 
 517: 3300+13	02C2  3A8C04  			LD	A, (dcb + DSKSTS)			;error occured?
 518: 3313+4	02C5  B7      			OR	A
 519: 3317+7+5	02C6  2036    			JR	NZ, readtrack4				;yes
 520: 3324+4	02C8  24      			INC	H
 521: 3328+4	02C9  24      			INC	H
 522: 3332+4	02CA  0C      			INC	C
 523: 3336+8+5	02CB  10E8    			DJNZ	readtrack3
 524: 3344+12	02CD  183B    			JR	readtrack5
 525:				
 526:     -	02CF          	readtrack2:
 527: 3356+7	02CF  0600    			LD	B, 0					;compute skew-list from media type
 528: 3363+19	02D1  FD4E05  			LD	C, (IY + MEDIA)
 529: 3382+10	02D4  217C04  			LD	HL, skewtab
 530: 3392+11	02D7  09      			ADD	HL, BC
 531: 3403+7	02D8  7E      			LD	A, (HL)
 532: 3410+6	02D9  23      			INC	HL
 533: 3416+7	02DA  66      			LD	H, (HL)
 534: 3423+4	02DB  6F      			LD	L, A
 535: 3427+19	02DC  FD4603  			LD	B, (IY + NSECS+1)
 536:				
 537:     -	02DF          	readtrack1:
 538: 3446+16	02DF  227A04  			LD	(secptr), HL
 539:				
 540:     -	02E2          	readtrack:
 541: 3462+16	02E2  2A7A04  			LD	HL, (secptr)
 542: 3478+7	02E5  7E      			LD	A, (HL)
 543: 3485+13	02E6  328704  			LD	(dcb + DSKSEC), A
 544: 3498+6	02E9  23      			INC	HL
 545: 3504+16	02EA  227A04  			LD	(secptr), HL
 546:				
 547: 3520+11	02ED  C5      			PUSH	BC
 548: 3531+17	02EE  CD2C03  			CALL	compbufadr
 549: 3548+16	02F1  228804  			LD	(dcb + DSKPTR), HL
 550: 3564+17	02F4  CD0FF0  			CALL	DISKV
 551: 3581+10	02F7  C1      			POP	BC
 552:				
 553: 3591+13	02F8  3A8C04  			LD	A, (dcb + DSKSTS)			;error occured?
 554: 3604+4	02FB  B7      			OR	A
 555: 3608+7+5	02FC  280A    			JR	Z, readtrack6				;no
 556:     -	02FE          	readtrack4:             
 557: 3615+10	02FE  21FFFF  			LD	HL, 0ffffh
 558: 3625+16	0301  227804  			LD	(drive), HL
 559: 3641+14	0304  DDE1    			POP	IX					;yes, store in original dcb
 560: 3655+12	0306  181E    			JR	match2
 561:     -	0308          	readtrack6:             
 562: 3667+8+5	0308  10D8    			DJNZ	readtrack
 563:     -	030A          	readtrack5:
 564: 3675+14	030A  DDE1    			POP	IX
 565:				
 566:     -	030C          	match:
 567:				;		ld	a, 'M'
 568:				;		CALL	seroutfn
 569:						
 570: 3689+17	030C  CD2C03  			CALL	compbufadr
 571: 3706+19	030F  DD5605  			LD	D, (IX + DSKPTR+1)
 572: 3725+19	0312  DD5E04  			LD	E, (IX + DSKPTR)
 573: 3744+20	0315  ED4BA9FF			LD	BC, (LOGSIZ)
 574: 3764+13	0319  3A8B04  			LD	A, (dcb + DSKAUX+1)			;get sector length high-byte
 575: 3777+7	031C  FE02    			CP	2
 576: 3784+7+5	031E  2003    			JR	NZ, match1
 577: 3791+10	0320  010002  			LD	BC, 512
 578:     -	0323          	match1:
 579: 3801+16+5	0323  EDB0    			LDIR
 580:				
 581: 3817+4	0325  AF      			XOR	A
 582:     -	0326          	match2:
 583: 3821+19	0326  DD7708  			LD	(IX + DSKSTS), A
 584:				
 585:     -	0000          		IF	WD1772
 588:					ENDIF
 589: 3840+10	0329  C33CF0  			JP	ACTIVON
 590:				
 591:				
 592:				;--------------------------------------------------
 593:				; HL = TRKBUF + DSKSEC * (128/256/512)
 594:				;--------------------------------------------------
 595:     -	032C          	compbufadr:
 596: 3850+10	032C  210008  			LD	HL, TRKBUFFER
 597: 3860+19	032F  DD4603  			LD	B, (IX + DSKSEC)
 598: 3879+4	0332  05      			DEC	B
 599: 3883+7	0333  0E00    			LD	C, 0
 600: 3890+13	0335  3A8B04  			LD	A, (dcb + DSKAUX + 1)			;load seclen highbyte
 601: 3903+4	0338  B7      			OR	A
 602: 3907+7+5	0339  2808    			JR	Z, compbufadr2				;if zero, assume 128 bytes length
 603: 3914+7	033B  FE01    			CP	1
 604: 3921+7+5	033D  2808    			JR	Z, compbufadr1				;if 1, assume 256 bytes
 605: 3928+8	033F  CB20    			SLA	B					;512 bytes
 606: 3936+12	0341  1804    			JR	compbufadr1
 607:     -	0343          	compbufadr2:
 608: 3948+8	0343  CB38    			SRL	B					;128 bytes
 609: 3956+8	0345  CB19    			RR	C
 610:     -	0347          	compbufadr1:
 611: 3964+11	0347  09      			ADD	HL, BC
 612: 3975+10	0348  C9      			RET
 613:				
 614:     -	0349          	checktrack:
 615: 3985+16	0349  2A7804  			LD	HL, (drive)				;load
 616: 4001+19	034C  DD5602  			LD	D, (IX + DSKTRK)			;high
 617: 4020+19	034F  DD5E01  			LD	E, (IX + DSKDRV)			;low
 618: 4039+4	0352  B7      			OR	A					;clear carry
 619: 4043+15	0353  ED52    			sbc	HL, DE
 620: 4058+10	0355  C9      			RET
 621:				
 622:				;--------------------------------------------------
 623:				; get Pokeydivisor command '?'
 624:				;--------------------------------------------------
 625:     -	0356          	getspeed:
 626:				;		LD	A, '?'
 627:				;		CALL	seroutfn
 628:				
 629: 4068+17	0356  CD28FD  			CALL	DRVINDEX				;POINT IY TO DRIVE'S DATA AREA
 630: 4085+5+6	0359  D8      			RET	C					;EXIT IF NOT A DRIVE IN OUR BOX
 631:				
 632:				;		CALL	HASPARMS
 633:				;		RET	Z					;EXIT IF DISK PARAMS NOT KNOWN
 634:				
 635: 4090+17	035A  CD4AFD  			CALL	SENDACK					;SEND 'ACK' FOR COMMAND FRAME
 636:				
 637: 4107+10	035D  21FFC2  			LD	HL, IOBUFF+LEN-1
 638:				
 639:     -	0001          		IF NOHIGHSPEEDSIO <> 1
 640: 4117+7	0360  3E08    			LD	A, SIOFAST
 641: 4124+7	0362  77      			LD	(HL), A
 642:				;		LD	(hispeed), A
 643:					ELSE
 645:					ENDIF	; HIGHSPEEDSIO
 646:				
 647: 4131+10	0363  114300  			LD	DE, 'C'
 648: 4141+10	0366  C36CF7  			JP	SENDBUFF				;SEND 'C' AND PARAMS DATA FRAME
 649:				
 650:				
 651:				;--------------------------------------------------
 652:				; cmdwaitfn
 653:				;--------------------------------------------------
 654:     -	0369          	cmdwaitfn:
 655: 4151+13	0369  3A55FF  			LD	A, (CMDFLG)
 656: 4164+4	036C  B7      			OR	A					;SEE IF COMMAND FRAME HAS ARRIVED
 657: 4168+5+6	036D  C8      			RET	Z					;EXIT IF NOTHING HAS HAPPENED
 658:				
 659:				;		CALL	sercmd					;5-byte command frame
 660:				
 661: 4173+13	036E  3A55FF  			LD	A, (CMDFLG)
 662: 4186+7	0371  FE01    			CP	1
 663:				
 664: 4193+4	0373  F3      			DI						;ELSE RESET INTERRUPT AND START AGAIN
 665: 4197+7	0374  3E03    			LD	A, CTC_D1_SW_RST + CTC_D0_CONTROL	;SOFTWARE RESET CTC0
 666: 4204+11	0376  D380    			OUT	(CTC0), A				;PERFORM THE RESET
 667: 4215+4	0378  FB      			EI
 668:				
 669: 4219+10	0379  CAF3F8  			JP	Z, CMDL4				;good cmd-frame
 670:												;fall through
 671:				;--------------------------------------------------
 672:				; togglebaud
 673:				;--------------------------------------------------
 674:     -	037C          	togglebaud:
 675: 4229+13	037C  3A7704  			LD	A, (pokeydiv)
 676: 4242+7	037F  FE28    			CP	SIONORMAL
 677: 4249+7	0381  3E08    			LD	A, SIOFAST
 678: 4256+7+5	0383  2802    			JR	Z, togglebaud1
 679: 4263+7	0385  3E28    			LD	A, SIONORMAL
 680:     -	0387          	togglebaud1:
 681: 4270+13	0387  327704  			LD	(pokeydiv), A
 682:				;		CALL	serhex
 683: 4283+10	038A  C309F9  			JP	CMDL5
 684:				
 685:				;--------------------------------------------------
 686:				; xmitbuffn
 687:				;--------------------------------------------------
 688:     -	038D          	xmitbuffn:
 689: 4293+4	038D  F3      			DI
 690: 4297+13	038E  3A7704  			LD	A, (pokeydiv)				;is fast?
 691: 4310+7	0391  FE28    			CP	SIONORMAL
 692: 4317+7+5	0393  2006    			JR	NZ, xmitfast				;yes, jump
 693: 4324+10	0395  0119F8  			LD	BC, STARBIT
 694: 4334+10	0398  C388F7  			JP	SalyXMITBUF
 695:				
 696:				
 697:     -	039B          	xmitfast:
 698: 4344+7	039B  3E07    			LD	A, CTC_D6_MODE_TIM + CTC_D2_TCNEXT + CTC_D1_SW_RST + CTC_D0_CONTROL
 699: 4351+11	039D  D381    			OUT	(CTC1), A				;SOFWARE RESET CTC1
 700: 4362+7	039F  3E01    			LD	A, 1					;TIME CONSTANT OF 1 - 4uS pulses (1/4Mhz)*16
 701: 4369+11	03A1  D381    			OUT	(CTC1), A
 702:				
 703:     -	03A3          	xmitfast1:
 704: 4380+7	03A3  7E      			LD	A, (HL)					;7
 705: 4387+6	03A4  23      			INC	HL					;6
 706: 4393+4	03A5  AA      			XOR	D					;4
 707: 4397+4	03A6  4F      			LD	C, A					;4
 708: 4401+4	03A7  83      			ADD	A, E					;4
 709: 4405+7	03A8  CE00    			ADC	0					;7
 710: 4412+4	03AA  5F      			LD	E, A					;4
 711: 4416+17	03AB  CDB903  			CALL	fastsend				;17 send byte in c
 712: 4433+4	03AE  7C      			LD	A, H					;4
 713: 4437+7	03AF  FEC3    			CP	HIGH (IOBUFF+LEN)			;7
 714: 4444+7+5	03B1  38F0    			JR	C, xmitfast1				;12/7 loop if buffer end not reached
 715:				
 716: 4451+7	03B3  3E03    			LD	A, CTC_D1_SW_RST + CTC_D0_CONTROL
 717: 4458+11	03B5  D381    			OUT	(CTC1), A				;SOFWARE RESET CTC1
 718: 4469+4	03B7  FB      			EI
 719: 4473+10	03B8  C9      			RET
 720:				
 721:     -	03B9          	fastsend:
 722: 4483+4	03B9  AF      			XOR	A
 723: 4487+11	03BA  D350    			OUT	(ATROUT), A
 724:				
 725: 4498+15	03BC  DDE5    			PUSH	IX					;15
 726: 4513+14	03BE  DDE1    			POP	IX					;14
 727: 4527+4	03C0  79      			LD	A,	C				;4
 728: 4531+7	03C1  0608    			LD	B, 8					;7
 729: 4538+6	03C3  03      			INC	BC					;6
 730: 4544+4	03C4  00      			NOP						;4
 731:				
 732:     -	03C5          	fastsend1:
 733: 4548+4	03C5  00      			NOP						;4
 734: 4552+7	03C6  FE01    			CP	1					;7
 735: 4559+11	03C8  D350    			OUT	(ATROUT), A				;11
 736: 4570+4	03CA  0F      			RRCA						;4
 737: 4574+15	03CB  DDE5    			PUSH	IX					;15
 738: 4589+14	03CD  DDE1    			POP	IX					;14
 739: 4603+8+5	03CF  10F4    			DJNZ	fastsend1				;13 / 8
 740:				
 741: 4611+9	03D1  ED5F    			LD	A, r					;9
 742: 4620+7	03D3  3E01    			LD	A, 1					;7
 743: 4627+11	03D5  D350    			OUT	(ATROUT), A				;11
 744: 4638+10	03D7  C9      			RET						;10
 745:				
 746:				;--------------------------------------------------
 747:				; rxblck
 748:				;--------------------------------------------------
 749:     -	03D8          	rxblck:
 750: 4648+13	03D8  3A7704  			LD	A, (pokeydiv)				;is fast?
 751: 4661+7	03DB  FE28    			CP	SIONORMAL
 752: 4668+10	03DD  CAE903  			JP	Z, rxblck1
 753:				
 754: 4678+17	03E0  CDF403  			CALL	fastrecv				;yes, fast speed
 755: 4695+7	03E3  3E03    			LD	A, CTC_D1_SW_RST + CTC_D0_CONTROL
 756: 4702+11	03E5  D383    			OUT	(CTC3), A				;SOFWARE RESET CTC3
 757: 4713+4	03E7  4A      			LD	C, D					;checksum in c
 758: 4717+10	03E8  C9      			RET
 759:				
 760:     -	03E9          	rxblck1:
 761: 4727+10	03E9  010000  			LD	BC, 0					;no, normal speed
 762: 4737+10	03EC  C3DCF7  			JP	SalyRXBLOCK
 763:				
 764:				
 765:				;--------------------------------------------------
 766:				; set 4ms watchdog
 767:				;--------------------------------------------------
 768:     -	03EF          	irq4ms:
 769: 4747+10	03EF  F1      			POP	AF					;pop irq-addr
 770: 4757+4	03F0  B7      			OR	A					;clear carry
 771:     -	03F1          	irq4ms1:
 772: 4761+4	03F1  FB      			EI
 773: 4765+14	03F2  ED4D    			RETI
 774:				
 775:				;--------------------------------------------------
 776:				; SIO receive 57600 baud
 777:				;--------------------------------------------------
 778:     -	03F4          	fastrecv:
 779: 4779+4	03F4  F3      			DI
 780: 4783+10	03F5  01EF03  			LD	BC, irq4ms
 781: 4793+20	03F8  ED4316FF			LD	(CTCVEC+6),bc				;SET VECTOR TO irq4ms ROUTINE
 782: 4813+10	03FC  018300  			LD	BC, CTC3				;CLEAR B, LOAD C WITH ADDRESS OF CTC3
 783: 4823+10	03FF  11A700  			LD	DE, CTC_D7_INT_EN + CTC_D6_MODE_TIM + CTC_D5_PRESC256 + CTC_D2_TCNEXT + CTC_D1_SW_RST + CTC_D0_CONTROL
 784: 4833+12	0402  ED59    			OUT	(C), E					;12 PUT CTC3 IN TIMER MODE, PRESCALE 256
 785: 4845+12	0404  ED49    			OUT	(C), C					;TIME CONSTANT OF 131 (CTC3 ADDRESS WHICH IS 083h)? 8.38ms? MAYBE MEANT , B
 786: 4857+4	0406  FB      			EI
 787:				
 788:     -	0407          	fastrecv1:              
 789: 4861+11	0407  DB70    			IN	A, (ATARI)				;11
 790: 4872+4	0409  17      			RLA						;4
 791: 4876+10	040A  DA0704  			JP	C, fastrecv1				;10	NEW BYTE IS COMING IF START BIT LOW
 792:												;14-25 / 7
 793: 4886+4	040D  7A      			LD	A, D					;4
 794: 4890+4	040E  80      			ADD	A, B					;4
 795: 4894+7	040F  CE00    			ADC	A, 0					;7 ACCUMULATE CHECKSUM ATARI STYLE
 796: 4901+4	0411  57      			LD	D, A					;4
 797:								
 798: 4905+7	0412  067F    			LD	B, 07fh					;7
 799: 4912+10	0414  C31904  			JP	fastrecv2a				;10 = 50
 800:				;
 801:				; SERIAL->PARALLEL CONVERSION AT 17,36 MICROSECONDS PER BIT
 802:				;
 803:     -	0417          	fastrecv2:
 804: 4922+11	0417  F5      			PUSH	AF					;11
 805: 4933+10	0418  F1      			POP	AF					;10
 806:     -	0419          	fastrecv2a:
 807: 4943+7	0419  7E      			LD	A, (HL)					;7
 808: 4950+7	041A  7E      			LD	A, (HL)					;7
 809:				
 810: 4957+11	041B  DB70    			IN	A, (ATARI)				;11 CYCLES
 811: 4968+4	041D  17      			RLA						; 4 CYCLES
 812: 4972+8	041E  CB18    			RR	B					; 8 CYCLES
 813: 4980+7+5	0420  38F5    			JR	C, fastrecv2				;12/7 = 70 / 65 cycles
 814:				
 815: 4987+7	0422  70      			LD	(HL), B					;7 THEN STORE IN MEMORY BUFFER @HL
 816: 4994+6	0423  23      			INC	HL					;6
 817: 5000+4	0424  7C      			LD	A, H					;4
 818: 5004+7	0425  FEC3    			CP	HIGH (IOBUFF+LEN)			;7
 819: 5011+4	0427  3F      			CCF						;4
 820: 5015+5+6	0428  D8      			RET	C					;5 RETURN WITH CARRY SET IF BUFFER FILLED
 821:				
 822: 5020+12	0429  ED59    			OUT	(C), E					;12 PUT CTC3 IN TIMER MODE, PRESCALE 256
 823: 5032+12	042B  ED49    			OUT	(C), C					;12 COUNT MOD 256 - ACTUALLY C = 131 (CTC3 ADDRESS WHICH IS 083h)? 8.38ms? MAYBE MEANT , B
 824:				
 825: 5044+10	042D  C30704  			JP	fastrecv1				;10
 826:				
 827:     -	0000          		if SALLYDEBUG = 1 
1133:					ENDIF
1134:					
1135:     -	0430          	SalyCMDOUT:
1136: 5054+11	0430  D340    			OUT	(CMDREG),A				;OUTPUT DISK CONTROLLER COMMAND BYTE
1137:     -	0432          	slyCMDT1:
1138: 5065+7	0432  3E0E    			LD	A,14
1139:     -	0434          	slyCMDT2:
1140: 5072+4	0434  3D      			DEC	A
1141: 5076+7+5	0435  20FD    			JR	NZ,slyCMDT2				;DELAY 56 MICROSECONDS
1142:     -	0437          	CMDT3:
1143: 5083+11	0437  DB40    			IN	A, (STSREG)
1144: 5094+8	0439  CB47    			BIT	0, A
1145: 5102+7+5	043B  20F5    			JR	NZ, slyCMDT1
1146: 5109+10	043D  C9      			RET
1147:						ENDIF	; SALLYBUILD
1148:				
1149:				;--------------------------------------------------
1150:				; 11 times port:value
1151:				;--------------------------------------------------
1152:     -	043E  5001    	INITAB:		DEFB	ATROUT,1				;SET ATART OUTPUT TO MARK STATE
1153:     -	0440  5101    			DEFB	SEROUT,1				;SET RS232 OUTPUT TO MARK STATE
1154:     -	0442  8003    			DEFB	CTC0, CTC_D1_SW_RST + CTC_D0_CONTROL	;SOFTWARE RESET CTC0
1155:     -	0444  8010    			DEFB	CTC0, low ctcvec			;SET CTC0 BASE INTERRUPT VECTOR
1156:     -	0446  8107    			DEFB	CTC1, CTC_D6_MODE_TIM + CTC_D2_TCNEXT + CTC_D1_SW_RST + CTC_D0_CONTROL	;PUT CTC1 IN TIMER MODE + SET TIME CONSTANT
1157:     -	0448  8101    			DEFB	CTC1, 1					;CTC1 TIME CONSTANT (DIVIDE BY 1 - 6.5us)
1158:     -	044A  8203    			DEFB	CTC2, CTC_D1_SW_RST + CTC_D0_CONTROL	;SOFTWARE RESET CTC2
1159:     -	044C  8303    			DEFB	CTC3, CTC_D1_SW_RST + CTC_D0_CONTROL	;SOFTWARE RESET CTC3
1160:     -	044E  5701    			DEFB	CDMUX, 1				;SET MUX TO PASS ATARI DATA
1161:     -	0000          		IF WD1772
1164:					ELSE
1165:     -	0450  3000    			DEFB	LATCH,00000000B				;ZEROS TO DRIVE SELECT LATCH
1166:     -	0452  40D0    			DEFB	CMDREG,FINCMD				;FORCE DISK CONTROLLER INTERRUPT
1167:					ENDIF	;WD1772
1168:     -	0016          	ITBLEN		EQU	$-INITAB
1169:				;
1170:				;
1171:				;
1172:				;
1173:				;
1174:				;
1175:				
1176:     -	0001          	IF SALLYBUILD
1177:				;--------------------------------------------------
1178:				; variables and data structure
1179:				;--------------------------------------------------
1180:				;
1181:				; 32 bytes for dsktb
1182:				; 7 commands copied in from DISKTAB, 3x7=21
1183:				; 2 commands added '?' and 0xDD (setDirectSector)
1184:				;
1185:     -	0454  00000000	dsktb:		DW	0, 0, 0, 0, 0, 0, 0, 0
	              00000000
	              00000000
	              00000000
1186:     -	0464  00000000			DW	0, 0, 0, 0, 0, 0, 0, 0
	              00000000
	              00000000
	              00000000
1187:				
1188:				;
1189:				; direct MSDOS sector for each drive
1190:				;
1191:     -	0474  0000    	dsector:	DB	0, 0
1192:     -	0476  00      	direct:		DB	0
1193:				
1194:     -	0477  28      	pokeydiv:	DB	SIONORMAL
1195:				;hispeed:	DB	0
1196:				
1197:     -	0478  FF      	drive:		DB	255
1198:     -	0479  FF      	thetrack:	DB	255
1199:     -	047A  0000    	secptr:		DW	0
1200:				
1201:     -	047C  56FF    	skewtab:	DW	SKEWSD
1202:     -	047E  C8FF    			DW	SKEW13
1203:     -	0480  68FF    			DW	SKEWDD
1204:     -	0482  E2FF    			DW	SKEW17
1205:				
1206:     -	0484  00      	dcb:		DB	0					;DISK OPERATION CODE
1207:     -	0485  00      			DB	0					;DRIVE# (WITH SIDE# IN BIT 7)
1208:     -	0486  00      			DB	0					;TRACK#
1209:     -	0487  00      			DB	0					;SECTOR#
1210:     -	0488  0000    			DW	0					;READ/WRITE POINTER
1211:     -	048A  0000    			DW	0					;AUXILLIARY PARAMETERS (2 BYTES)
1212:     -	048C  00      			DB	0					;OPERATION COMPLETION STATUS
1213:				
1214:     -	048D  00000000	id:		DW	0, 0, 0
	              0000
1215:						
1216:				ENDIF	;SALLYBUILD
1217:				;
1218:				;
**** ..\src\ROM.MAC ****
  12:				;
  13:				;	PHASE TO RAM-RESIDENT PART OF PROGRAM
  14:				;
  15:     -	0493          	MONCOPY	EQU	$
  16:     -	F000          		.PHASE	0F000H
  17:				;
  18:				;
  19:     -	F000          	MONITOR	EQU	$
  20: 5119+10	F000  C31BF0  			JP	RESTART
  21: 5129+10	F003  C3F5F3  			JP	MINIMON		;MONITOR WARM ENTRY POINT
  22: 5139+10	F006  C335F7  	CSV:	JP	CONST		;CONSOLE STATUS
  23: 5149+10	F009  C340F7  	CIV:	JP	CONIN		;CONSOLE INPUT
  24: 5159+10	F00C  C350F7  	COV:	JP	CONOUT		;CONSOLE OUTPUT
  25: 5169+10	F00F  C322F0  	DISKV:	JP	DISKDVR		;DISK HANDLER
  26: 5179+10	F012  C3F3F4  	LISTV:	JP	CENTOUT		;PARALLEL PRINTER OUT
  27: 5189+10	F015  C302F5  			JP	CENTRDY		;PARALLEL PRINTER STATUS
  28: 5199+10	F018  C315F7  	RENEW:	JP	CINIT2		;CONSOLE PORT INITAILZATION
  29:				;
  30:     -	F01B          	RESTART:
  31: 5209+4	F01B  F3      			DI
  32: 5213+4	F01C  AF      			XOR	A
  33: 5217+11	F01D  D352    			OUT	(BANKSW),A
  34: 5228+10	F01F  C30000  			JP	0			;JUMP TO ROM
  35:				;
  36:				;
  37:				;
  38:					INCLUDE	DISKIO.MAC
**** ..\src\DISKIO.MAC ****
   1:				;********************************************************
   2:				;*							*
   3:				;*	DISK I/O DRIVER FOR ATARI BOX.	18-FEB-82	*
   4:				;*							*
   5:				;********************************************************
   6:				;
   7:				;
   8:				;	EQUATES FOR DISK CONTROLLER PORTS AND COMMAND CODES
   9:				;
  10:     -	0040          	STSREG	EQU	WD179X+0	;STATUS REGISTER
  11:     -	0040          	CMDREG	EQU	WD179X+0	;COMMAND REGISTER
  12:     -	0041          	TRKREG	EQU	WD179X+1	;TRACK REGISTER
  13:     -	0042          	SECREG	EQU	WD179X+2	;SECTOR REGISTER
  14:     -	0043          	DATREG	EQU	WD179X+3	;DATA REGISTER
  15:				;
  16:				;	TYPE I COMMANDS LOW NIBBLE
  17:				;
  18:     -	0000          	STEPRATE0	EQU 0		;6ms,  3 ms if 179x and 2 MHz
  19:     -	0001          	STEPRATE1	EQU 1		;12ms, 6 ms if 179x and 2 MHz
  20:     -	0002          	STEPRATE2	EQU 2		;20ms, 10ms if 179x and 2 MHz, 2ms if WD1772
  21:     -	0003          	STEPRATE3	EQU 3		;30ms, 15ms if 179x and 2 MHz, 3ms if WD1772
  22:				;
  23:				;	TYPE I AND TYPE II COMMANDS LOW NIBBLE
  24:				;	1770/1772 only
  25:     -	0000          	SPINWAIT	EQU 00000000B	;1770/1772: Enable spin up sequence
  26:     -	0008          	NOWAITMTR	EQU 00001000B	;1770/1772: Disable spin up sequence
  27:				;
  28:				;	TYPE II COMMANDS LOW NIBBLE
  29:				;	(F1)
  30:     -	0002          	SIDECMP	EQU	00000010B	;1791/1793: Side Select Compare Enabled \ 1795/1797: Update SSO to 1 \ 1773: Enable Side Compare
  31:				;
  32:				;	(F2) - Read Sector and Write Sector commands only
  33:     -	0008          	SIDESEL	EQU	00001000B	;1791/1793/1773: Side Select Compare for Side 1 \ 1795/1797: Interpret Sector Len Field 00=128, 01=256, 10=512,  11=1024
  34:				;		EQU	00000000B	;1791/1793/1773: Side Select Compare for Side 0 \ 1795/1797: Interpret Sector Len Field 00=256, 01=512, 10=1024, 11=128
  35:				;
  36:				;	TYPE II AND TYPE III COMMANDS LOW NIBBLE
  37:				;
  38:     -	0004          	SETTLE	EQU	00000100B	;179x: Add 15ms delay (2MHz)
  39:     -	0002          	WRPCOMP	EQU	00000010B	;1770/1772/1773 Write Sector and Write Track commands only: Enable Write Precompensation
  40:				;
  41:				;
  42:     -	0000          			IF WD1772
  45:						ELSE
  46:     -	0008          	HLOAD		EQU	00001000B	; ATR 8000 original
  47:     -	0003          	STEPRATE	EQU	STEPRATE3	; ATR 8000 original - 15ms step rate
  48:						ENDIF
  49:				;
  50:				;
  51:     -	00C0          	RIDCMD	EQU	11000000B	;READ ID COMMAND
  52:     -	0000          	IF WD1772
  55:				ELSE
  56:     -	0088          	RDCMD	EQU	10000000B+HLOAD	;READ COMMAND
  57:     -	00A8          	WRTCMD	EQU	10100000B+HLOAD	;WRITE COMMAND
  58:				ENDIF
  59:     -	00D0          	FINCMD	EQU	11010000B	;FORCE INTERRUPT COMMAND
  60:     -	0010          	SKCMD	EQU	00010000B	;SEEK COMMAND
  61:     -	0000          	RSTCMD	EQU	00000000B	;RESTORE COMMAND
  62:     -	0060          	STEPOUT	EQU	01100000B	;STEP OUT COMMAND
  63:     -	0040          	STEPIN	EQU	01000000B	;STEP IN COMMAND
  64:     -	00E0          	RDTRK	EQU	11100000B	;READ TRACK COMMAND
  65:     -	00F0          	WRTRK	EQU	11110000B	;WRITE TRACK COMMAND
  66:     -	00E4          	RDTKDLY	EQU	RDTRK+100B	;WRITE TRACK COMMAND with 15ms settling delay (179x/1773: 30ms if 1MHz)
  67:     -	00F4          	WRTKDLY	EQU	WRTRK+100B	;READ TRACK COMMAND with 15ms settling delay (179x/1773: 30ms if 1MHz)
  68:				;
  69:				;
  70:				; Drive control LATCH (U24)
  71:				;
  72:     -	0001          	DRVSEL1		EQU 00000001B	; 1 = select drive 1
  73:     -	0002          	DRVSEL2		EQU 00000010B	; 1 = select drive 2
  74:     -	0004          	DRVSEL3		EQU 00000100B	; 1 = select drive 3
  75:     -	0008          	DRVSEL4		EQU 00001000B	; 1 = select drive 4
  76:     -	0010          	FDCRESET	EQU 00010000B	; 1 = Put FDC chip in reset, 0 = Release FDC chip from reset
  77:     -	0020          	FDCSIDE		EQU 00100000B	; Side select pin on floppy connector
  78:     -	0040          	FBS		EQU 01000000B	; 0 = B, 1 = S
  79:     -	0080          	FDENSITY	EQU 10000000B	; 0 = Double, 1 = Single
  80:				;
  81:				;
  82:				;
  83:     -	0066          	NMIVEC	EQU	0066H
  84:				;
  85:				;
  86:				;
  87:				;
  88:				;	... DATA STRUCTURE FOR DISK I/O CONTROL BLOCK ...
  89:				;
  90:     -	0000          	DSKOP	EQU	0		;DISK OPERATION CODE
  91:     -	0001          	DSKDRV	EQU	1		;DRIVE# (WITH SIDE# IN BIT 7)
  92:     -	0002          	DSKTRK	EQU	2		;TRACK#
  93:     -	0003          	DSKSEC	EQU	3		;SECTOR#
  94:     -	0004          	DSKPTR	EQU	4		;READ/WRITE POINTER
  95:     -	0006          	DSKAUX	EQU	6		;AUXILLIARY PARAMETERS (2 BYTES)
  96:     -	0008          	DSKSTS	EQU	8		;OPERATION COMPLETION STATUS
  97:				;
  98:				;
  99:				;	... DISK DRIVER OPERATION CODE DEFINITIONS ...
 100:				;
 101:     -	0000          	TSTRDY	EQU	0		;SELECT DRIVE AND TEST READY
 102:     -	0001          	GETSEC	EQU	1		;READ SECTOR
 103:     -	0002          	PUTSEC	EQU	2		;WRITE SECTOR
 104:     -	0003          	GETID	EQU	3		;READ ID MARK
 105:				;
 106:				;
 107:				;
 108:     -	F022          	DISKDVR:
 109: 5238+17	F022  CDCBF3  		CALL	STOPTMR		;KILL DISK TIMER INTERRUPT FROM CTC3
 110: 5255+19	F025  DD7E00  		LD	A,(IX+DSKOP)
 111: 5274+4	F028  B7      		OR	A
 112: 5278+7+5	F029  284D    		JR	Z,TESTDRV	;JUMP IF TEST READY OPERATION
 113: 5285+7	F02B  0688    		LD	B,RDCMD
 114: 5292+4	F02D  3D      		DEC	A
 115: 5296+7+5	F02E  287B    		JR	Z,SETSSO	;JUMP IF DISK READ OPERATION
 116: 5303+7	F030  06A8    		LD	B,WRTCMD
 117: 5310+4	F032  3D      		DEC	A
 118: 5314+7+5	F033  2876    		JR	Z,SETSSO	;JUMP IF DISK WRITE OPERATION
 119: 5321+4	F035  3D      		DEC	A
 120: 5325+7+5	F036  285F    		JR	Z,READID	;JUMP IF DISK ID READ OPERATION
 121: 5332+19	F038  DD3608FF		LD	(IX+DSKSTS),255	;ELSE SET ALL ERROR BITS AND RETURN
 122:				
 123:     -	F03C          	ACTIVON:
 124: 5351+4	F03C  F3      		DI
 125: 5355+7	F03D  3EA7    		LD	A, CTC_D7_INT_EN + CTC_D6_MODE_TIM + CTC_D5_PRESC256 + CTC_D2_TCNEXT + CTC_D1_SW_RST + CTC_D0_CONTROL
 126: 5362+11	F03F  D383    		OUT	(CTC3),A	;PUT CTC3 IN TIMER MODE, PRESCALE 256
 127: 5373+4	F041  AF      		XOR	A			;TIME CONSTANT OF 0 WHICH MEANS 256
 128: 5377+11	F042  D383    		OUT	(CTC3),A	;COUNT MOD 256
 129: 5388+4	F044  3D      		DEC	A
 130: 5392+13	F045  32C9FF  		LD	(DRVTMR),A	;STOP DRIVES AFTER 255 INTERRUPTS
 131: 5405+10	F048  2150F0  		LD	HL,ACTIVTY
 132: 5415+16	F04B  2216FF  		LD	(CTCVEC+6),HL	;SET VECTOR TO ACTIVITY-CHECK ROUTINE
 133: 5431+4	F04E  FB      		EI
 134: 5435+10	F04F  C9      		RET
 135:				;
 136:				;
 137:				;
 138:     -	F050          	ACTIVTY:
 139: 5445+11	F050  F5      		PUSH	AF
 140: 5456+13	F051  3AC9FF  		LD	A,(DRVTMR)
 141: 5469+4	F054  3D      		DEC	A
 142: 5473+13	F055  32C9FF  		LD	(DRVTMR),A
 143: 5486+7+5	F058  200A    		JR	NZ,ACTV2	;EXIT IF 4 SECONDS NOT ELAPSED
 144:				
 145: 5493+17	F05A  CD68F0  		call	shutdown
 146: 5510+7	F05D  3E21    		LD	A, CTC_D7_INT_DIS + CTC_D6_MODE_TIM + CTC_D5_PRESC256 + CTC_D0_CONTROL
 147: 5517+11	F05F  D383    		OUT	(CTC3),A	;RESET INTERRUPT BUT KEEP COUNTER GOING
 148: 5528+13	F061  322EFF  		LD	(DRVOFF),A	;SET 'DRVOFF' FLAG TO NON-ZERO VALUE
 149:				
 150: 5541+10	F064  F1      	ACTV2:	POP	AF
 151: 5551+4	F065  FB      		EI
 152: 5555+14	F066  ED4D    		RETI
 153:				;
 154:				;
 155:				;
 156:     -	F068          	shutdown:
 157:     -	0000          	IF WD1772
 160:				ELSE
 161: 5569+11	F068  DB41    		IN	A,(TRKREG)
 162: 5580+11	F06A  D343    		OUT	(DATREG),A
 163: 5591+7	F06C  3E10    		LD	A,SKCMD
 164: 5598+11	F06E  D340    		OUT	(CMDREG),A	;DUMMY SEEK TO UNLOAD THE HEADS
 165: 5609+13	F070  3A2FFF  		LD	A,(OUTCPY)
 166: 5622+7	F073  E6F0    		AND	11110000B	;DESELECT ALL 4 DRIVES
 167:				ENDIF
 168: 5629+11	F075  D330    		OUT	(LATCH),A
 169: 5640+10	F077  C9      		ret
 170:					
 171:				;
 172:				;
 173:				;
 174:				;
 175:				;
 176:				;	... DRIVE READY/STATUS TEST FUNCTION ...
 177:				;
 178:				;
 179:     -	F078          	TESTDRV:
 180: 5650+17	F078  CD1AF1  		CALL	SELECT		;SELECT DRIVE FOR SPIN/STATUS CHECK	
 181: 5667+8	F07B  CB7F    		BIT	7,A
 182: 5675+7+5	F07D  2805    		JR	Z,TDRV2		;JUMP IF DRIVE READY INDICATED
 183:				
 184: 5682+10	F07F  2130FF  		LD	HL,PERIOD	;ELSE SET PERIOD TO ZERO
 185: 5692+10	F082  3600    		LD	(HL),0
 186:				
 187: 5702+19	F084  DD7708  	TDRV2:	LD	(IX+DSKSTS),A	;RETURN TYPE 1 STATUS IN 'DSKSTS'
 188: 5721+13	F087  3A2FFF  		LD	A,(OUTCPY)
 189: 5734+19	F08A  DD7706  		LD	(IX+DSKAUX),A	;RETURN CONTROL BITS IN AUX BYTE #1
 190: 5753+13	F08D  3A30FF  		LD	A,(PERIOD)
 191: 5766+19	F090  DD7707  		LD	(IX+DSKAUX+1),A	;RETURN PERIOD IN AUX BYTE #2
 192: 5785+17	F093  CD3CF0  		CALL	ACTIVON		;START DISK ACTIVITY MONITOR AGAIN
 193: 5802+10	F096  C9      		RET
 194:				;
 195:				;
 196:				;
 197:				;	... READ ID MARK FUNCTION ...
 198:				;
 199:     -	F097          	READID:
 200: 5812+19	F097  DD360606		LD	(IX+DSKAUX),6
 201: 5831+19	F09B  DD360700		LD	(IX+DSKAUX+1),0
 202: 5850+7	F09F  06C0    		LD	B,RIDCMD
 203: 5857+17	F0A1  CDB3F0  		CALL	DISK		;READ 6 BYTE ID RECORD
 204: 5874+13	F0A4  3A2FFF  		LD	A,(OUTCPY)
 205: 5887+19	F0A7  DD7706  		LD	(IX+DSKAUX),A	;RETURN DRIVE CONTROL LATCH BYTE
 206: 5906+10	F0AA  C9      		RET
 207:				;
 208:				;
 209:				;
 210:				;	... SECTOR READ/WRITE FUNCTION ...
 211:				;
 212:     -	F0AB          	SETSSO:
 213:     -	0001          	IF WD1772 <> 1
 214: 5916+20	F0AB  DDCB017E		BIT	7,(IX+DSKDRV)	;TEST SIDE# BIT IN DRIVE PARAM
 215: 5936+7+5	F0AF  2802    		JR	Z,DISK
 216: 5943+8	F0B1  CBC8    		SET	1,B		;SET 'SSO' CONTROL BIT IN 1797 CMD
 217:				ENDIF
 218:     -	F0B3          	DISK:
 219: 5951+4	F0B3  78      		LD	A, B
 220: 5955+13	F0B4  32C5FF  		LD	(CMDBYT),A					;STORE 1797 COMMAND PASSED IN B
 221: 5968+17	F0B7  CD1AF1  		CALL	SELECT						;SELECT DRIVE/SIDE FOR DISK OPERATION
 222: 5985+8	F0BA  CB7F    		BIT	7,A
 223: 5993+7+5	F0BC  2052    		JR	NZ,DISKX					;EXIT IF NOT READY
 224: 6000+13	F0BE  3A2DFF  		LD	A,(TRACK)				
 225: 6013+7	F0C1  FEFF    		CP	255				
 226: 6020+7+5	F0C3  2805    		JR	Z,DISK2				
 227: 6027+19	F0C5  DDBE02  		CP	(IX+DSKTRK)					;TEST IF ALREADY AT DESIRED TRACK
 228: 6046+7+5	F0C8  2805    		JR	Z,DISK3						;SKIP SEEK PART IF SO
 229:								
 230: 6053+17	F0CA  CDF8F1  	DISK2:	CALL	SEEKTRK						;GO LOOKING FOR TRACK# IN IOCB
 231: 6070+7+5	F0CD  2041    		JR	NZ,DISKX					;EXIT IF HEAD POSITIONING ERROR
 232:				
 233: 6077+13	F0CF  3A12FF  	DISK3:	LD	A,(CTCVEC+2)
 234: 6090+4	F0D2  3C      		INC	A						;LOOP TILL TX CTC TURNS ITSELF OFF
 235: 6094+7+5	F0D3  20FA    		JR	NZ,DISK3					;(INTERRUPT VECTOR LSB SET=FFH)
 236:     -	F0D5          	SalyDISK3:
 237: 6101+4	F0D5  F3      		DI
 238: 6105+7	F0D6  3E03    		LD	A, CTC_D1_SW_RST + CTC_D0_CONTROL		; SOFTWARE RESET CTC0
 239: 6112+11	F0D8  D380    		OUT	(CTC0),A					;DISABLE RX INTERRUPT FROM CTC0
 240: 6123+7	F0DA  3E27    		LD	A, CTC_D6_MODE_TIM + CTC_D5_PRESC256 + CTC_D2_TCNEXT + CTC_D1_SW_RST + CTC_D0_CONTROL	; SET PRESCALER TO 256 AND SOFTWARE RESET
 241: 6130+11	F0DC  D382    		OUT	(CTC2),A					;DISABLE CTC2 AND ALSO INIT FOR CLOCK SOURCE FOR WATCHDOG TIMER
 242: 6141+7	F0DE  3E3D    		LD	A,61						;SET TIME COUNTER TO 61, about 3.9ms
 243: 6148+11	F0E0  D382    		OUT	(CTC2),A				
 244: 6159+10	F0E2  21A8F3  		LD	HL,WATCHDOG					;STORE NEW CTC3 VECTOR FOR SAFETY
 245: 6169+16	F0E5  2216FF  		LD	(CTCVEC+6),HL				
 246:								
 247: 6185+13	F0E8  3A33FF  		LD	A,(RWMAX)				
 248: 6198+13	F0EB  32C6FF  		LD	(RWTRY),A					;SET READ/WRITE RETRY COUNT
 249: 6211+19	F0EE  DD7E03  	DISK4:	LD	A,(IX+DSKSEC)					;OUTPUT SECTOR NUMBER FOR READ/WRITE
 250: 6230+11	F0F1  D342    		OUT	(SECREG),A				
 251: 6241+19	F0F3  DD7E02  		LD	A,(IX+DSKTRK)				
 252: 6260+11	F0F6  D341    		OUT	(TRKREG),A					;DITTO FOR TRACK NUMBER
 253: 6271+13	F0F8  3AC5FF  		LD	A,(CMDBYT)				
 254: 6284+11	F0FB  D340    		OUT	(CMDREG),A					;START 1791 WORKING ON W/R COMMAND
 255: 6295+17	F0FD  CDB5F2  		CALL	RWDISK						;DO HALT/NMI DISK DATA TRANSFER
 256:     -	F100          	DISK4a:
 257: 6312+7+5	F100  280E    		JR	Z,DISKX						;EXIT IF NO DISK ERRORS
 258: 6319+11	F102  F5      		PUSH	AF				
 259: 6330+17	F103  CD0EF3  		CALL	RECOVER						;DO READ/WRITE ERROR RECOVERY ROUTINE
 260: 6347+10	F106  C1      		POP	BC				
 261: 6357+7+5	F107  2006    		JR	NZ,DISK5					;SKIP RETRY IF IRRECOVERABLE ERROR
 262: 6364+10	F109  21C6FF  		LD	HL,RWTRY				
 263: 6374+11	F10C  35      		DEC	(HL)				
 264: 6385+7+5	F10D  20DF    		JR	NZ,DISK4					;ELSE DECREMENT RETRY COUNT TILL=0
 265: 6392+4	F10F  78      	DISK5:	LD	A,B						;THEN LOAD A WITH ERROR STATUS
 266: 6396+19	F110  DD7708  	DISKX:	LD	(IX+DSKSTS),A					;SAVE COMPLETION STATUS CARRIED IN ACC
 267: 6415+17	F113  CD18F0  		CALL	RENEW						;RESTART ATARI AND RS232 INTERRUPTS
 268: 6432+17	F116  CD3CF0  		CALL	ACTIVON						;START DISK ACTIVITY TIMER
 269: 6449+10	F119  C9      		RET
 270:				;
 271:				;
 272:				;
 273:				;	... SELECT DRIVE# PASSED @IX AND RETURN TYPE 1 STATUS ...
 274:				;
 275:     -	F11A          	SELECT:
 276: 6459+19	F11A  DD7E01  		LD	A,(IX+DSKDRV)
 277: 6478+8	F11D  CBBF    		RES	7,A		;CLEAR SIDE SELECT BIT FROM DRIVE#
 278: 6486+7	F11F  FE04    		CP	4
 279: 6493+7+5	F121  306B    		JR	NC,SELX		;EXIT IF INVALID DRIVE NUMBER
 280:				
 281: 6500+7	F123  0600    		LD	B,0
 282: 6507+4	F125  4F      		LD	C,A		;LOAD BC WITH NEW DRIVE# TO BE SELECTED
 283: 6511+10	F126  212CFF  		LD	HL,UNIT
 284: 6521+7	F129  96      		SUB	(HL)		;COMPARE NEW AND OLD SELECT CODES AND
 285: 6528+11	F12A  F5      		PUSH	AF		; SAVE RESULT STATUS ON STACK
 286: 6539+4	F12B  50      		LD	D,B
 287: 6543+7	F12C  5E      		LD	E,(HL)		;LOAD DE WITH LAST SELECTED DRIVE#
 288: 6550+7	F12D  71      		LD	(HL),C		;THEN STORE NEW UNIT# FROM C
 289:				
 290: 6557+10	F12E  2120FF  		LD	HL,DRVTAB
 291: 6567+11	F131  19      		ADD	HL,DE		;INDEX INTO TABLE BY CURRENT DRIVE#
 292: 6578+13	F132  3A2DFF  		LD	A,(TRACK)
 293: 6591+7	F135  77      		LD	(HL),A		;REMEMBER CURENT TRACK NUMBER
 294: 6598+7	F136  1E04    		LD	E,4
 295: 6605+11	F138  19      		ADD	HL,DE		;NOW INDEX TO CONTROL BYTE FOR UNIT
 296: 6616+13	F139  3A2FFF  		LD	A,(OUTCPY)
 297: 6629+7	F13C  77      		LD	(HL),A		;REMEMBER CURRENT DENSITY/TYPE
 298:				
 299: 6636+10	F13D  2120FF  		LD	HL,DRVTAB
 300: 6646+11	F140  09      		ADD	HL,BC		;INDEX INTO TABLE BY NEW DRIVE#
 301: 6657+7	F141  7E      		LD	A,(HL)
 302: 6664+13	F142  322DFF  		LD	(TRACK),A	;STORE CURRENT (ASSUMED) HEAD POSITION
 303: 6677+11	F145  19      		ADD	HL,DE
 304: 6688+10	F146  D1      		POP	DE		;POP UNIT# COMPARE RESULT INTO D
 305: 6698+7	F147  7E      		LD	A,(HL)		;GET CURRENT SELECT/TYPE BITS FOR DRIVE
 306: 6705+4	F148  B7      		OR	A
 307: 6709+7+5	F149  201F    		JR	NZ,SEL5		;JUMP IF NOT AN INITIAL DRIVE SELECT
 308:				;
 309:				;	ARRIVE HERE ON INITIAL DRIVE SELECT
 310:				;
 311: 6716+10	F14B  2198F1  		LD	HL,SELTAB
 312: 6726+11	F14E  09      		ADD	HL,BC		;ELSE INDEX INTO TABLE OF SELECT BITS
 313: 6737+7	F14F  7E      		LD	A,(HL)
 314: 6744+11	F150  D330    		OUT	(LATCH),A	;OUTPUT NEW DRIVE SELECTS
 315: 6755+11	F152  F5      		PUSH	AF
 316: 6766+17	F153  CD9CF1  		CALL	SPIN		;NOW SPIN UP TO TEST READY
 317: 6783+10	F156  C1      		POP	BC
 318: 6793+7	F157  FEDE    		CP	222		;ERROR IF SLOWER THAN 222 MS
 319: 6800+7+5	F159  3033    		JR	NC,SELX
 320:				
 321: 6807+8	F15B  CBF0    		SET	6,B
 322: 6815+7	F15D  FEB5    		CP	181		;MINI FLOPPY IF BETWEEN 222 AND 181 MS
 323: 6822+7+5	F15F  3006    		JR	NC,SEL4
 324:				
 325: 6829+8	F161  CBB0    		RES	6,B
 326: 6837+7	F163  FE99    		CP	153		;BIG FLOPPY IF BETWEEN 181 AND 153 MS
 327: 6844+7+5	F165  3827    		JR	C,SELX
 328:				
 329: 6851+4	F167  78      	SEL4:	LD	A,B		;GET CONTROL BITS INTO A
 330: 6855+7	F168  1600    		LD	D,0		;SET D=0 TO DISABLE HEAD LOAD DELAY
 331:				;
 332:				;	ARRIVE HERE WITH DENSITY/TYPE/SELECT BITS IN ACC
 333:				;	
 334: 6862+8	F16A  CBAF    	SEL5:	RES	5,A		;RESET SIDE SELECT BIT UNCONDITIONALLY
 335: 6870+20	F16C  DDCB017E		BIT	7,(IX+DSKDRV)
 336: 6890+7+5	F170  2802    		JR	Z,SEL5A		;JUMP IF SELECTING SIDE# ZERO
 337: 6897+8	F172  CBEF    		SET	5,A		;ELSE SET SIDE SELECT BIT IN ACC
 338: 6905+11	F174  D330    	SEL5A:	OUT	(LATCH),A
 339: 6916+13	F176  322FFF  		LD	(OUTCPY),A	;OUTPUT AND SAVE NEW PATTERN
 340: 6929+4	F179  14      		INC	D
 341: 6933+4	F17A  15      		DEC	D
 342: 6937+10+7	F17B  C499F3  		CALL	NZ,HLDWAIT	;DO HEAD LOAD DELAY IF NEW DRIVE SELECT
 343:     -	0000          	IF WD1772
 348:				ENDIF
 349:     -	F17E          	SEL5B:
 350:				;	LD	a, 'F'
 351:				;	CALL	seroutfn
 352: 6947+17	F17E  CD91F3  		CALL	FORCE
 353: 6964+8	F181  CB6F    		BIT	5,A		;TEST 1797 HEAD-LOAD STATUS
 354: 6972+5+6	F183  C0      		RET	NZ		;EXIT IF LOADED AND MOTORS ON
 355:				;	JR	SEL5B
 356:					
 357: 6977+17	F184  CD9CF1  		CALL	SPIN		;ELSE LET THINGS SPIN A BIT
 358: 6994+4	F187  B7      		OR	A		;TEST PERIOD AFTER RE-SPINUP
 359: 6998+7+5	F188  2804    	KLUDGE:	JR	Z,SELX		;ERROR IF DISK REFUSES TO TURN
 360:					
 361:     -	0000          	IF WD1772
 363:				ELSE
 364: 7005+17	F18A  CD91F3  		CALL	FORCE		;ELSE RETURN TYPE 1 STATUS THIS TIME
 365: 7022+10	F18D  C9      		RET
 366:				ENDIF
 367:				;
 368:				;	ARRIVE HERE IF DRIVE CANNOT BE SELECTED AT ALL
 369:				;
 370: 7032+4	F18E  AF      	SELX:	XOR	A		;TURN OFF EVERYTHING
 371:     -	0000          	IF WD1772
 376:				ELSE
 377: 7036+11	F18F  D330    		OUT	(LATCH),A
 378: 7047+13	F191  322FFF  		LD	(OUTCPY),A
 379: 7060+7	F194  3E80    		LD	A,10000000B
 380:				ENDIF
 381: 7067+4	F196  B7      		OR	A		;RETURN WITH NOT-READY ERROR
 382: 7071+10	F197  C9      		RET
 383:				;
 384:				;
 385:				;
 386:				;
 387:				;
 388:     -	F198  01      	SELTAB:	DEFB	00000001B
 389:     -	F199  02      		DEFB	00000010B
 390:     -	F19A  04      		DEFB	00000100B
 391:     -	F19B  08      		DEFB	00001000B
 392:				;
 393:				;
 394:				;
 395:     -	F19C          	SPIN:
 396:     -	0000          	IF WD1772
 400:				ELSE
 401: 7081+4	F19C  AF      		XOR	A
 402: 7085+11	F19D  D356    		OUT	(INDXSET),A
 403: 7096+4	F19F  3C      		INC	A
 404: 7100+11	F1A0  D354    		OUT	(INDXCLR),A	;SET TO ENABLE NORMAL INDEX PULSES
 405: 7111+11	F1A2  DB41    		IN	A,(TRKREG)
 406: 7122+11	F1A4  D343    		OUT	(DATREG),A
 407: 7133+7	F1A6  3E18    		LD	A,SKCMD+HLOAD
 408: 7140+11	F1A8  D340    		OUT	(CMDREG),A	;DO DUMMY SEEK TO START THE MOTORS
 409: 7151+17	F1AA  CDBAF3  		CALL	STARTMR		;THEN RE-PROGRAM CTC1 FOR TIMER
 410: 7168+17	F1AD  CD91F3  		CALL	FORCE
 411:				ENDIF
 412: 7185+4	F1B0  4F      		LD	C,A		;SAVE CURRENT TYPE 1 DISK STATUS
 413: 7189+7	F1B1  0606    		LD	B,6		;SET FOR 6 DISK REVOLUTIONS
 414: 7196+10	F1B3  210000  		LD	HL,0
 415: 7206+16	F1B6  22C7FF  		LD	(TICKS),HL	;RESET MILLISECOND COUNTER FOR IRQ
 416: 7222+20	F1B9  ED5BC7FF	SPIN2:	LD	DE,(TICKS)
 417: 7242+17	F1BD  CDE3F1  		CALL	EDGE		;WAIT FOR INDEX INPUT TO CHANGE
 418: 7259+7+5	F1C0  380D    		JR	C,SPIN3		;ABORT IF TIMEOUT
 419: 7266+17	F1C2  CDE3F1  		CALL	EDGE		;WAIT FOR CHANGE BACK AGAIN
 420: 7283+7+5	F1C5  3808    		JR	C,SPIN3
 421: 7290+8+5	F1C7  10F0    		DJNZ	SPIN2		;LET 6 REVOLUTIONS PASS
 422:				
 423: 7298+16	F1C9  2AC7FF  		LD	HL,(TICKS)	;READ TIME AT END OF REVOLUTION
 424: 7314+4	F1CC  B7      		OR	A
 425: 7318+15	F1CD  ED52    		SBC	HL,DE		;COMPUTE INDEX PERIOD IN MILLISECONDS
 426:				
 427:     -	0000          	IF WD1772
 434:				ELSE
 435:				
 436: 7333+17	F1CF  CDCBF3  	SPIN3:	CALL	STOPTMR		;KILL INTERRUPT FROM CTC3
 437: 7350+4	F1D2  AF      		XOR	A
 438: 7354+11	F1D3  D354    		OUT	(INDXCLR),A
 439: 7365+4	F1D5  3C      		INC	A
 440: 7369+11	F1D6  D356    		OUT	(INDXSET),A	;DISABLE INDEX PULSES AFTER THIS
 441:				ENDIF
 442:				
 443: 7380+4	F1D8  7D      		LD	A,L
 444: 7384+4	F1D9  24      		INC	H
 445: 7388+4	F1DA  25      		DEC	H
 446: 7392+7+5	F1DB  2802    		JR	Z,SPIN4		;A HOLDS VALID PERIOD IF H=0
 447: 7399+7	F1DD  3EFF    		LD	A,255
 448: 7406+13	F1DF  3230FF  	SPIN4:	LD	(PERIOD),A
 449: 7419+10	F1E2  C9      		RET
 450:				
 451:     -	0000          	IF WD1772
 454:				ENDIF
 455:				;
 456:				;
 457:				;
 458:     -	F1E3          	EDGE:
 459:     -	0000          	IF WD1772
 461:				ELSE
 462: 7429+17	F1E3  CD91F3  		CALL	FORCE		;GET 1797 TYPE 1 STATUS
 463:				ENDIF
 464: 7446+4	F1E6  A9      		XOR	C
 465: 7450+7	F1E7  E602    		AND	00000010B	;CHECK FOR CHANGE IN INDEX BIT
 466: 7457+7+5	F1E9  2009    		JR	NZ,EDGE2	;EXIT IF BIT CHANGES
 467:				
 468: 7464+13	F1EB  3AC8FF  		LD	A,(TICKS+1)
 469: 7477+7	F1EE  FE08    		CP	HIGH 2048	;ELSE CHECK TIME ACCUMULATED IN 'TICKS'
 470: 7484+7+5	F1F0  38F1    		JR	C,EDGE		;KEEP LOOPING TILL 2 SECONDS PASS
 471:				
 472: 7491+4	F1F2  37      		SCF
 473: 7495+10	F1F3  C9      		RET			;THEN RETURN WITH CARRY=1
 474:				;
 475: 7505+4	F1F4  79      	EDGE2:	LD	A,C
 476: 7509+4	F1F5  2F      		CPL			;FLIP INDEX STATE HELD IN C
 477: 7513+4	F1F6  4F      		LD	C,A
 478: 7517+10	F1F7  C9      		RET			;RETURN WITH CARRY=0
 479:				;
 480:				;
 481:				;
 482:				;
 483:				;	... SEEK TRACK# IN (IX+DSKTRK) FROM TRACK# IN (TRACK) ...
 484:				;
 485:     -	F1F8          	SEEKTRK:
 486: 7527+13	F1F8  3A2DFF  		LD	A,(TRACK)
 487: 7540+7	F1FB  FEFF    		CP	255
 488: 7547+7+5	F1FD  2005    		JR	NZ,SEEK1	;JUMP IF HEAD POSITION IS KNOWN
 489:				
 490: 7554+17	F1FF  CD37F2  		CALL	RESTORE		;ELSE DO SLOW RESTORE TO RECALIBRATE
 491: 7571+7+5	F202  202A    		JR	NZ,SEEKX	;EXIT WITH PERMANENT ERROR IF FAILURE
 492:				
 493: 7578+7	F204  0601    	SEEK1:	LD	B,1
 494: 7585+17	F206  CD57F2  		CALL	SEEK		;FIRST SEEK (IX+DSKTRK) WITH NO RETRIES
 495: 7602+5+6	F209  C8      		RET	Z		;EXIT IF WE GOT TO THE DESIRED TRACK
 496: 7607+7+5	F20A  3005    		JR	NC,SEEK2	;JUMP IF WE LANDED ON SOME OTHER TRACK
 497:				
 498: 7614+17	F20C  CD37F2  		CALL	RESTORE		;ELSE RECALIBRATE BEFORE TRYING AGAIN
 499: 7631+7+5	F20F  201D    		JR	NZ,SEEKX	;EXIT IF TRACK ZERO NOT FOUND
 500:				
 501: 7638+7	F211  0602    	SEEK2:	LD	B,2
 502: 7645+17	F213  CD57F2  		CALL	SEEK		;NOW SEEK WITH TWO TRIES
 503: 7662+5+6	F216  C8      		RET	Z		;EXIT IF SUCCESSFUL THIS TIME
 504: 7667+7+5	F217  3815    		JR	C,SEEKX		;EXIT IF NO ID MARK COULD BE FOUND
 505:				
 506: 7674+10	F219  216400  		LD	HL,100
 507: 7684+17	F21C  CD9EF3  		CALL	WAIT		;DELAY TO LET THE STEPPER RELAX ITSELF
 508: 7701+10	F21F  2128FF  		LD	HL,RATES
 509: 7711+13	F222  3A2CFF  		LD	A,(UNIT)
 510: 7724+4	F225  85      		ADD	A,L
 511: 7728+4	F226  6F      		LD	L,A		;INDEX INTO TABLE TO DRIVE'S STEP RATE
 512: 7732+11	F227  34      		INC	(HL)		; AND MAKE STEP RATE ONE NOTCH SLOWER
 513: 7743+7	F228  7E      		LD	A,(HL)
 514: 7750+7	F229  E603    		AND	00000011B	;CHECK FOR ROLL AROUND IN LOWER 2 BITS
 515: 7757+7+5	F22B  20E4    		JR	NZ,SEEK2	;REPEAT IF STEP RATE BITS WERE NOT=3
 516:				
 517: 7764+11	F22D  35      		DEC	(HL)		;ELSE RESTORE FROM ROLL AROUND
 518: 7775+7	F22E  3EFF    	SEEKX:	LD	A,255
 519: 7782+13	F230  322DFF  		LD	(TRACK),A	;FLAG TRACK POSITION AS UNKNOWN
 520: 7795+7	F233  3E10    		LD	A,00010000B	;SET SEEK ERROR BIT IN STATUS WORD
 521: 7802+4	F235  B7      		OR	A
 522: 7806+10	F236  C9      		RET			;RETURN WITH RNF ERROR STATUS IN A
 523:				;
 524:				;
 525:				;
 526:				;
 527:     -	0001          			IF WD1772 <> 1
 528:     -	F237          	RESTORE:
 529:						ENDIF
 530:     -	F237          	SalyResetFDC:		
 531: 7816+13	F237  3A2FFF  		LD	A,(OUTCPY)
 532: 7829+8	F23A  CBE7    		SET	4,A
 533: 7837+11	F23C  D330    		OUT	(LATCH),A	;TWANG THE DISK CONTROLLER RESET PIN
 534: 7848+7	F23E  060F    		LD	B,15
 535: 7855+8+5	F240  10FE    		DJNZ	$		;HOLD RESET 50 MICROSECONDS
 536: 7863+8	F242  CBA7    		RES	4,A
 537: 7871+11	F244  D330    		OUT	(LATCH),A
 538:				
 539:     -	0000          	IF WD1772
 546:				ELSE
 547: 7882+7	F246  0600    		LD	B,0
 548: 7889+8+5	F248  10FE    		DJNZ	$
 549: 7897+17	F24A  CD91F3  		CALL	FORCE		;THEN FORCE CLEAR THE BEAST
 550:				ENDIF
 551:				
 552: 7914+7	F24D  3E0B    		LD	A,RSTCMD+HLOAD+STEPRATE
 553: 7921+17	F24F  CD6BF3  		CALL	TYP1CMD		;DO RESTORE AT SLOWEST STEP RATE
 554: 7938+7	F252  EE04    		XOR	00000100B
 555:     -	0000          	IF WD1772
 557:				ELSE
 558: 7945+7	F254  E684    		AND	10000100B
 559:				ENDIF
 560: 7952+10	F256  C9      		RET			;RETURN WITH ACC=0 IF HOME
 561:				;
 562:				;
 563:				;
 564:     -	F257          	SEEK:
 565: 7962+11	F257  C5      		PUSH	BC		;SAVE LOOPCOUNT IN B
 566: 7973+13	F258  3A2DFF  		LD	A,(TRACK)
 567: 7986+4	F25B  47      		LD	B,A		;LOAD B WITH CURRENT TRACK POSITION
 568: 7990+19	F25C  DD4E02  		LD	C,(IX+DSKTRK)	;LOAD C WITH DESTINATION TRACK#
 569: 8009+17	F25F  CD75F2  		CALL	STEP		;HAVE A GO AT STEPPING
 570: 8026+17	F262  CD95F2  		CALL	VERIFY		;VERIFY HEAD POSITION WITH READ-ID
 571: 8043+10	F265  C1      		POP	BC
 572: 8053+4	F266  37      		SCF
 573: 8057+5+6	F267  C0      		RET	NZ		;EXIT WITH CARRY SET IF READ-ID FAILS
 574:				
 575: 8062+11	F268  DB42    		IN	A,(SECREG)
 576: 8073+13	F26A  322DFF  		LD	(TRACK),A	;STORE ACTUAL TRACK# FROM ID MARK
 577: 8086+19	F26D  DD9602  		SUB	(IX+DSKTRK)	;COMPARE IF WE GOT THERE THIS TIME
 578: 8105+5+6	F270  C8      		RET	Z		;EXIT WITH ACC=0 IF TRACK# VERIFIED
 579:				
 580: 8110+8+5	F271  10E4    		DJNZ	SEEK		;DO PRESCRIBED NUMBER OF SEEK RETRIES
 581:				
 582: 8118+4	F273  B7      		OR	A
 583: 8122+10	F274  C9      		RET			;RETURN WITH CARRY AND ZERO FLAGS CLEAR
 584:				;
 585:				;
 586:				;
 587:				;	STEP FROM TRACK# IN B TOWARDS TRACK# IN C
 588:				;
 589:     -	F275          	STEP:
 590: 8132+4	F275  78      		LD	A,B
 591: 8136+11	F276  D341    		OUT	(TRKREG),A	;STARTING TRACK# TO TRACK REGISTER
 592: 8147+4	F278  79      		LD	A,C
 593: 8151+11	F279  D343    		OUT	(DATREG),A	;DESTINATION TRACK# TO DATA REGISTER
 594: 8162+10	F27B  2128FF  		LD	HL,RATES
 595: 8172+13	F27E  3A2CFF  		LD	A,(UNIT)
 596: 8185+4	F281  85      		ADD	A,L
 597: 8189+4	F282  6F      		LD	L,A		;INDEX INTO STEP RATE TABLE FOR DRIVE
 598: 8193+7	F283  7E      		LD	A,(HL)
 599:     -	0000          	IF WD1772
 601:				ELSE
 602: 8200+7	F284  E603    		AND	00000011B	;EXTRACT LOWER 2 BITS FOR STEP RATE
 603: 8207+7	F286  F618    		OR	SKCMD+HLOAD	;MERGE WITH SEEK COMAND
 604:				ENDIF
 605: 8214+17	F288  CD6BF3  		CALL	TYP1CMD		;DO SEEK WITH SPECIFIED STEP RATE
 606: 8231+7	F28B  7E      		LD	A,(HL)
 607: 8238+7	F28C  E6FC    		AND	11111100B	;EXTRACT UPPER 6 BITS FOR SETTLE TIME
 608: 8245+7	F28E  2600    		LD	H,0
 609: 8252+4	F290  6F      		LD	L,A
 610: 8256+17	F291  CD9EF3  		CALL	WAIT		;4..256 MILLISECOND HEAD SETTLING DELAY
 611: 8273+10	F294  C9      		RET
 612:				;
 613:				;
 614:				;
 615:				;
 616:     -	F295          	VERIFY:
 617: 8283+7	F295  3EC0    		LD	A,RIDCMD
 618: 8290+17	F297  CD62F3  		CALL	TYP2CMD		;READ NEXT ID MARK TO VERIFY SEEK
 619:     -	0000          	IF WD1772
 621:				ELSE
 622: 8307+7	F29A  E698    		AND	10011000B
 623:				ENDIF
 624: 8314+5+6	F29C  C8      		RET	Z		;EXIT IF ID MARK READ OK
 625:				
 626: 8319+13	F29D  3A2FFF  		LD	A,(OUTCPY)
 627: 8332+7	F2A0  EE80    		XOR	10000000B	;COMPLIMENT DENSITY BIT OF DRIVE TYPE
 628: 8339+13	F2A2  322FFF  		LD	(OUTCPY),A
 629: 8352+11	F2A5  D330    		OUT	(LATCH),A
 630: 8363+10	F2A7  213200  		LD	HL,50
 631: 8373+17	F2AA  CD9EF3  		CALL	WAIT		;ALLOW 50 MS DELAY AFTER CLOCK SWITCH
 632: 8390+7	F2AD  3EC0    		LD	A,RIDCMD
 633: 8397+17	F2AF  CD62F3  		CALL	TYP2CMD		;TRY AGAIN IN NEW DENSITY
 634:     -	0000          	IF WD1772
 636:				ELSE
 637: 8414+7	F2B2  E698    		AND	10011000B
 638:				ENDIF
 639: 8421+10	F2B4  C9      		RET			;A=0 IF AN ID MARK WAS FOUND
 640:				;
 641:				;
 642:				;
 643:				;
 644:				;
 645:				;
 646:     -	F2B5          	RWDISK:				;A=1797 TYPE 2 COMMAND BYTE
 647: 8431+16	F2B5  2A6600  		LD	HL,(NMIVEC)	;20
 648: 8447+11	F2B8  E5      		PUSH	HL		;11
 649: 8458+16	F2B9  2A6800  		LD	HL,(NMIVEC+2)	;20
 650: 8474+11	F2BC  E5      		PUSH	HL		;11 SAVE 4 BYTES AT NMI VECTOR
 651: 8485+10	F2BD  21EDA2  		LD	HL,0A2EDH	;12 LOAD HL WITH 'INI' OPCODE
 652: 8495+8	F2C0  CB6F    		BIT	5,A		;8  TEST IF READ OR WRITE BEING DONE
 653: 8503+7+5	F2C2  2801    		JR	Z,RW2		;12 JUMP IF COMMAND IS A READ
 654: 8510+4	F2C4  24      		INC	H		;4  ELSE TRANSFORM 'INI' INTO 'OUTI'
 655: 8514+16	F2C5  226600  	RW2:	LD	(NMIVEC),HL	;16
 656: 8530+10	F2C8  216800  		LD	HL,NMIVEC+2	;12
 657: 8540+10	F2CB  36C9    		LD	(HL),0C9H	;10 STORE 'RET' OPCODE AFTER INI/OUTI
 658: 8550+4	F2CD  F3      		DI			;4
 659: 8554+7	F2CE  3EC7    		LD	A,CTC_D7_INT_EN + CTC_D6_MODE_CNT + CTC_D2_TCNEXT + CTC_D1_SW_RST + CTC_D0_CONTROL	;7
 660: 8561+11	F2D0  D383    		OUT	(CTC3),A	;ARM CTC3 FOR COUNTER MODE INTERRUPT					;11
 661: 8572+4	F2D2  AF      		XOR	A		;TIME CONSTANT OF 0 WHICH MEANS 256					;4
 662: 8576+11	F2D3  D383    		OUT	(CTC3),A	;COUNT 256 PULSES FROM CTC2						;11
 663: 8587+4	F2D5  FB      		EI
 664: 8591+19	F2D6  DD6E04  		LD	L,(IX+DSKPTR)	;HL=DISK READ/WRITE DATA POINTER					;19
 665: 8610+19	F2D9  DD6605  		LD	H,(IX+DSKPTR+1)										;19
 666: 8629+19	F2DC  DD4606  		LD	B,(IX+DSKAUX)	;B=SECTOR LENGTH COUNT (LSB)						;19
 667: 8648+7	F2DF  0E43    		LD	C,DATREG	;C=DISK DATA PORT#							;7
 668: 8655+19	F2E1  DD7E07  		LD	A,(IX+DSKAUX+1)										;19
 669: 8674+8	F2E4  CB3F    		SRL	A											;8
 670: 8682+7+5	F2E6  280D    		JR	Z,RW256		;JUMP IF BLOCKSIZE <= 256 BYTES						;12
 671: 8689+8	F2E8  CB3F    		SRL	A
 672: 8697+7+5	F2EA  2806    		JR	Z,RW512		;JUMP IF BLOCKSIZE <= 512 BYTES
 673: 8704+4	F2EC  76      	RW1024:	HALT
 674: 8708+7+5	F2ED  20FD    		JR	NZ,$-1
 675: 8715+4	F2EF  76      		HALT
 676: 8719+7+5	F2F0  20FD    		JR	NZ,$-1
 677: 8726+4	F2F2  76      	RW512:	HALT
 678: 8730+7+5	F2F3  20FD    		JR	NZ,$-1
 679: 8737+4	F2F5  76      	RW256:	HALT
 680: 8741+7+5	F2F6  20FD    		JR	NZ,$-1
 681: 8748+11	F2F8  DB40    	RWBUSY:	IN	A,(STSREG)
 682: 8759+8	F2FA  CB47    		BIT	0,A
 683: 8767+7+5	F2FC  20FA    		JR	NZ,RWBUSY	;LOOP TILL 1797 BUSY BIT GOES AWAY
 684: 8774+4	F2FE  47      		ld	b,a
 685: 8778+17	F2FF  CDCBF3  		call	stoptmr
 686: 8795+4	F302  78      		ld	a,b
 687: 8799+10	F303  E1      	RWEXIT:	POP	HL
 688: 8809+16	F304  226800  		LD	(NMIVEC+2),HL
 689: 8825+10	F307  E1      		POP	HL
 690: 8835+16	F308  226600  		LD	(NMIVEC),HL	;RESTORE CODE AT NMI
 691:     -	0000          	IF WD1772
 693:				ELSE
 694: 8851+7	F30B  E6FD    		AND	11111101B	;MASK FOR DISK ERRORS
 695:				ENDIF
 696: 8858+10	F30D  C9      		RET			;RETURN WITH DISK ERROR FLAGS SET
 697:				;
 698:				;
 699:				;
 700:				;
 701:     -	F30E          	RECOVER:
 702: 8868+4	F30E  47      		LD	B,A
 703: 8872+7	F30F  E6E7    		AND	11100111B	;MASK OFF ALL BUT RNF/CRC ERROR BITS
 704: 8879+7+5	F311  2808    		JR	Z,RECOV1	;JUMP IF ONE OF THOSE TWO WERE SET
 705:				
 706: 8886+11	F313  F5      		PUSH	AF
 707: 8897+17	F314  CD91F3  		CALL	FORCE		;RESET ERROR FLAGS IN 179X STATUS REG
 708: 8914+10	F317  F1      		POP	AF
 709:     -	0000          	IF WD1772
 711:				ELSE
 712: 8924+7	F318  E6E1    		AND	11100001B	;CLEAR BITS ASSOCIATED WITH LOST DATA
 713:				ENDIF
 714: 8931+10	F31A  C9      		RET			;RETURN WITH ACC=0 IF RETRY TO BE DONE
 715:				;
 716: 8941+8	F31B  CB60    	RECOV1:	BIT	4,B
 717: 8949+7+5	F31D  2023    		JR	NZ,RECOV3	;JUMP IF RECORD-NOT-FOUND ERROR
 718:				;
 719:				;	ARRIVE HERE IF BAD CRC ERROR
 720:				;
 721: 8956+13	F31F  3A33FF  	RECOV2:	LD	A,(RWMAX)
 722: 8969+10	F322  21C6FF  		LD	HL,RWTRY
 723: 8979+7	F325  96      		SUB	(HL)		;COMPUTE HOW MANY RETRYS HAVE BEEN DONE
 724: 8986+5+6	F326  C8      		RET	Z		;EXIT IF FIRST RETRY
 725:				
 726: 8991+13	F327  3A2DFF  		LD	A,(TRACK)	;ELSE PREPARE TO WIGGLE BACK AND FORTH
 727: 9004+4	F32A  47      		LD	B,A		; TO AN ADJACENT TRACK TO RE-CALIBRATE
 728: 9008+4	F32B  B7      		OR	A		; AND REMOVE POSSIBLE MEDIA CONTAMINANT
 729: 9012+7+5	F32C  2004    		JR	NZ,RCOV2A
 730: 9019+7	F32E  0E01    		LD	C, 1		;STEP TO TRACK#1 IF ON TRACK# 0
 731: 9026+12	F330  1802    		JR	RCOV2B
 732:				;
 733: 9038+4	F332  3D      	RCOV2A:	DEC	A		;STEP TO NEXT OUTER TRACK
 734: 9042+4	F333  4F      		LD	C,A
 735: 9046+11	F334  C5      	RCOV2B:	PUSH	BC
 736: 9057+17	F335  CD75F2  		CALL	STEP		;STEP HEAD TO ADJACENT TRACK
 737: 9074+10	F338  D1      		POP	DE
 738: 9084+4	F339  43      		LD	B,E		;EXCHANGE CONTENTS OF B AND C
 739: 9088+4	F33A  4A      		LD	C,D
 740: 9092+17	F33B  CD75F2  		CALL	STEP		;STEP BACK TO ORIGINAL TRACK
 741: 9109+17	F33E  CD95F2  		call	verify
 742: 9126+10	F341  C9      		ret			;allow retry successful read id
 743:				;
 744:				;	ARRIVE HERE IF RECORD-NOT-FOUND ERROR
 745:				;
 746: 9136+17	F342  CD95F2  	recov3:	call	verify		;read an id mark to verify position
 747: 9153+7+5	F345  2012    		JR	NZ,RCOV4A	;RECALIBRATE IF VERIFY FAILS
 748:				
 749: 9160+11	F347  DB41    		IN	A,(TRKREG)	;LOAD A WITH CURENT TRACK# UNDER HEAD
 750: 9171+19	F349  DDBE02  		CP	(IX+DSKTRK)
 751: 9190+7+5	F34C  200D    		JR	NZ,RCOV4B	;JUMP IF NOT ON CORRECT TRACK
 752:				;
 753:				;	ARRIVE HERE IF ON CORRECT TRACK
 754:				;
 755: 9197+13	F34E  3A33FF  		ld	a,(rwmax)
 756: 9210+10	F351  21C6FF  		ld	hl,rwtry
 757: 9220+7	F354  96      		sub	(hl)		;test if this is first retry after rnf error
 758: 9227+5+6	F355  C8      		ret	z
 759:				
 760: 9232+7	F356  3E10    		ld	a,00010000b
 761: 9239+10	F358  C9      		ret			;indicate permanent rnf error
 762:				;
 763:				;	ARRIVE HERE IF HEAD POSITION IS INCORRECT
 764:				;
 765: 9249+7	F359  3EFF    	RCOV4A:	LD	A,255		;SET A TO FORCE RESTORE BEFORE SEEK
 766: 9256+13	F35B  322DFF  	RCOV4B:	LD	(TRACK),A
 767: 9269+17	F35E  CDF8F1  		CALL	SEEKTRK		;SEEK TRACK# SPECIFIED IN IOCB
 768: 9286+10	F361  C9      		RET
 769:				;
 770:				;
 771:				;
 772:				;
 773:				;	EXECUTE TYPE 2 COMMAND (READ/WRITE/READ ID) WITH TIMEOUT
 774:				;
 775:     -	F362          	TYP2CMD:
 776: 9296+17	F362  CD89F3  		CALL	CMDOUT		;ISSUE COMMAND
 777: 9313+11	F365  C5      		PUSH	BC
 778: 9324+10	F366  016A18  		LD	BC,6250		;500,000/80 FOR ONE HALF SECOND DELAY
 779: 9334+12	F369  1807    		JR	TPCMD2
 780:				;
 781:				;
 782:				;	EXECUTE TYPE 1 COMMAND (SEEK/STEP/RESTORE)
 783:				;
 784:     -	F36B          	TYP1CMD:
 785: 9346+17	F36B  CD89F3  		CALL	CMDOUT
 786: 9363+11	F36E  C5      		PUSH	BC
 787: 9374+10	F36F  017C92  		LD	BC,37500	;3,000,000/80 FOR 3 SECONDS DELAY
 788: 9384+11	F372  DB40    	TPCMD2:	IN	A,(STSREG)
 789: 9395+8	F374  CB47    		BIT	0,A
 790: 9403+7+5	F376  280A    		JR	Z,TPCMD3	;EXIT IF BUSY BIT GOES AWAY
 791:				
 792: 9410+17	F378  CD8BF3  		CALL	CMDT1		;DELAY 56 MICROSECONDS
 793: 9427+6	F37B  0B      		DEC	BC
 794: 9433+4	F37C  78      		LD	A,B
 795: 9437+4	F37D  B1      		OR	C
 796: 9441+7+5	F37E  20F2    		JR	NZ,TPCMD2	;LOOP TAKES 80 MICROSECONDS
 797:				
 798: 9448+7	F380  3E10    		LD	A,00010000B
 799:				
 800:     -	F382          	TPCMD3:
 801:     -	0000          	IF WD1772
 803:				ELSE
 804: 9455+4	F382  47      		LD	B,A
 805: 9459+17	F383  CD91F3  		CALL	FORCE
 806: 9476+4	F386  78      		LD	A,B
 807:				ENDIF
 808: 9480+10	F387  C1      		POP	BC
 809: 9490+10	F388  C9      		RET
 810:				;
 811:				;
 812:				;
 813:     -	F389          	CMDOUT:
 814: 9500+11	F389  D340    		OUT	(CMDREG),A	;OUTPUT DISK CONTROLLER COMMAND BYTE
 815: 9511+7	F38B  3E0E    	CMDT1:	LD	A,14	
 816: 9518+4	F38D  3D      	CMDT2:	DEC	A
 817: 9522+7+5	F38E  20FD    		JR	NZ,CMDT2	;DELAY 56 MICROSECONDS
 818: 9529+10	F390  C9      		RET
 819:				;
 820:				;
 821:				;
 822:				;
 823:     -	F391          	FORCE:
 824:     -	0000          	IF WD1772
 829:				ELSE
 830: 9539+7	F391  3ED0    		LD	A,FINCMD	;LOAD FORCE-INTERRUPT-IMMEDIATE CMD
 831: 9546+17	F393  CD89F3  		CALL	CMDOUT		;CLEAR 179X AND LATCH READY/HLD/TK0 ETC
 832: 9563+11	F396  DB40    		IN	A,(STSREG)	;READ STATUS REGISTER CONTENTS
 833: 9574+10	F398  C9      		RET
 834:				ENDIF
 835:				;
 836:				;
 837:				;
 838:				;
 839:				;
 840:     -	F399          	HLDWAIT:
 841: 9584+16	F399  2A32FF  		LD	HL,(HLDTIM)	;LOAD HL WITH HEAD LOAD DELAY
 842: 9600+7	F39C  2600    		LD	H,0		;RANGE 1..256 MILLISECONDS
 843:				
 844: 9607+4	F39E  AF      	WAIT:	XOR	A
 845: 9611+4	F39F  3D      	WAIT2:	DEC	A
 846: 9615+7+5	F3A0  20FD    		JR	NZ,WAIT2	;DELAY 1 MILLISECOND
 847: 9622+6	F3A2  2B      		DEC	HL
 848: 9628+4	F3A3  7C      		LD	A,H
 849: 9632+4	F3A4  B5      		OR	L
 850: 9636+7+5	F3A5  20F7    		JR	NZ,WAIT		;LOOP UNTIL HL=0
 851: 9643+10	F3A7  C9      		RET
 852:				;
 853:				;
 854:				;
 855:				;	... CTC INTERRUPT CONTROL ROUTINES FOR DISK HANDLER ...
 856:				;
 857:				;
 858:				;
 859:     -	F3A8          	WATCHDOG:
 860: 9653+7	F3A8  3ED0    		LD	A,FINCMD
 861: 9660+11	F3AA  D340    		OUT	(CMDREG),A	;ABORT DISK CONTROLLER OPERATION
 862: 9671+7	F3AC  3E01    		LD	A,00000001B
 863: 9678+11	F3AE  D383    		OUT	(CTC3),A	;RESET INTERRUPT FROM CTC3
 864: 9689+10	F3B0  2103F3  		LD	HL,RWEXIT
 865: 9699+19	F3B3  E3      		EX	(SP),HL		;TOSS RETURN ADDRESS AND PLANT FAKE ONE
 866: 9718+7	F3B4  3E10    		LD	A,00010000B
 867: 9725+4	F3B6  B7      		OR	A		;INDICATE RECORD-NOT-FOUND ERROR
 868: 9729+4	F3B7  FB      		EI
 869: 9733+14	F3B8  ED4D    		RETI			;INSURE CTC IRQ LOGIC GETS RESTORED
 870:				;
 871:				;
 872:				;
 873:				;
 874:				;
 875:				;	... MILLISECOND TIMER INTERRUPT ROUTINES ...
 876:				;
 877:				;
 878:     -	F3BA          	STARTMR:
 879: 9747+4	F3BA  F3      		DI
 880: 9751+7	F3BB  3E87    		LD	A,10000111B
 881: 9758+11	F3BD  D383    		OUT	(CTC3),A
 882: 9769+7	F3BF  3EFA    		LD	A,250
 883: 9776+11	F3C1  D383    		OUT	(CTC3),A
 884: 9787+10	F3C3  21D2F3  		LD	HL,TMRIRQ
 885: 9797+16	F3C6  2216FF  		LD	(CTCVEC+6),HL
 886: 9813+4	F3C9  FB      		EI
 887: 9817+10	F3CA  C9      		RET
 888:				;
 889:				;
 890:				;
 891:     -	F3CB          	STOPTMR:
 892: 9827+4	F3CB  F3      		DI
 893: 9831+7	F3CC  3E01    		LD	A,00000001B
 894: 9838+11	F3CE  D383    		OUT	(CTC3),A
 895: 9849+4	F3D0  FB      		EI
 896: 9853+10	F3D1  C9      		RET
 897:				;
 898:				;
 899:				;
 900:     -	F3D2          	TMRIRQ:
 901: 9863+11	F3D2  E5      		PUSH	HL
 902: 9874+4	F3D3  FB      		EI
 903: 9878+16	F3D4  2AC7FF  		LD	HL,(TICKS)
 904: 9894+6	F3D7  23      		INC	HL		;BUMP FREE RUNING MILLISECOND COUNTER
 905: 9900+16	F3D8  22C7FF  		LD	(TICKS),HL
 906: 9916+10	F3DB  E1      		POP	HL
 907: 9926+14	F3DC  ED4D    		RETI
 908:				;
 909:				;
 910: 9940+8	F3DE  CBB7    	HDDISK:		res	6, a				;non HD-DISK
 911: 9948+20	F3E0  FDCB054E			bit	SIZE, (IY+MEDIA)
 912: 9968+10	F3E4  CAE9F3  			jz	HDDISK1	
 913: 9978+8	F3E7  CBB7    			res	6, a
 914: 9986+13	F3E9  322FFF  	HDDISK1:	LD	(OUTCPY),A
 915: 9999+11	F3EC  E5      			PUSH	hl
 916:10010+10	F3ED  21FFFF  			LD	hl, 0ffffh
 917:10020+16	F3F0  227804  			LD	(drive), hl
 918:10036+10	F3F3  E1      			POP	hl
 919:10046+10	F3F4  C9      			ret
 920:				
 921:     -	0000          	IF WD1772
 930:				ENDIF
**** ..\src\ROM.MAC ****
  39:					INCLUDE	MINIMON.MAC
**** ..\src\MINIMON.MAC ****
   1:				;
   2:				;
   3:				;
   4:     -	F3F5          	MINIMON:
   5:10056+7	F3F5  3E01    		LD	A,1
   6:10063+11	F3F7  D352    		OUT	(BANKSW),A	;SWITCH TO ALL-RAM CONFIGURATION
   7:10074+17	F3F9  CDFCF6  		CALL	CONINIT		;INITIALIZE SERIAL CONSOLE PORT
   8:10091+17	F3FC  CDE0F4  		CALL	PNEXT
   9:     -	F3FF  0D0A    		DEFB	CR,LF
  10:     -	0001          	IF SALLYBUILD
  11:     -	F401  53616C6C		DEFB	"Sally2"
	              7932
  12:				ELSE
  14:				ENDIF
  15:     -	F407  00      		DEFB	NULL
  16:10108+10	F408  2108F4  	PROMPT:	LD	HL,PROMPT
  17:10118+11	F40B  E5      		PUSH	HL		;PUT RETURN ADDRESS ON STACK
  18:10129+17	F40C  CDE0F4  		CALL	PNEXT
  19:     -	F40F  0D0A2320		DEFB	CR,LF,'# ',NULL
	              00
  20:10146+17	F414  CDC9F4  		CALL	ECHO
  21:10163+7	F417  FE20    		CP	' '
  22:10170+5+6	F419  D8      		RET	C		;IGNORE NON-PRINTABLE CHATACTERS
  23:				
  24:10175+4	F41A  4F      		LD	C,A		;SAVE COMMAND CHARACTER IN C
  25:10179+4	F41B  AF      		XOR	A
  26:10183+4	F41C  67      		LD	H,A
  27:10187+4	F41D  6F      		LD	L,A
  28:10191+11	F41E  29      	PROM1:	ADD	HL,HL		;MULTIPLY RESULT BY 16
  29:10202+11	F41F  29      		ADD	HL,HL
  30:10213+11	F420  29      		ADD	HL,HL
  31:10224+11	F421  29      		ADD	HL,HL
  32:10235+4	F422  B5      		OR	L		;APPEND NEW LOW ORDER DIGIT
  33:10239+4	F423  6F      		LD	L,A
  34:10243+17	F424  CDC9F4  		CALL	ECHO		;GET A CHARACTER FROM LINE INPUT
  35:10260+7	F427  FE0D    		CP	CR
  36:10267+7+5	F429  280C    		JR	Z,PROM3		;EXIT LOOP IF RETURN TYPED
  37:10274+17	F42B  CD9AF4  		CALL	ASCHEX		;CONVERT ASCII TO NUMERIC
  38:10291+7+5	F42E  30EE    		JR	NC,PROM1	;KEEP SHIFTING IF VALID HEX
  39:				
  40:10298+17	F430  CDE0F4  	PROM2:	CALL	PNEXT
  41:     -	F433  203F00  		DEFB	' ?',NULL
  42:10315+10	F436  C9      		RET
  43:				;
  44:10325+17	F437  CDECF4  	PROM3:	CALL	CRLF
  45:10342+4	F43A  79      		LD	A,C
  46:10346+7	F43B  FE47    		CP	'G'
  47:10353+7+5	F43D  2836    		JR	Z,GOTO		;DO GOTO IF 'G'
  48:10360+7	F43F  FE42    		CP	'B'
  49:10367+7+5	F441  2833    		JR	Z,BOOT		;DO BOOT LOADER IF 'B'
  50:10374+7	F443  FE4D    		CP	'M'
  51:10381+7+5	F445  20E9    		JR	NZ,PROM2	;***TEMP***
  52:				
  53:				;  **** This code section does not exist on production ROM ****
  54:				;	.COMMENT %
  55:				;	JR	Z,VIEW		;DO MEMORY EXAMINE/CHANGE IF 'M'
  56:				;	CP	'D'
  57:				;	JR	NZ,PROM2	;FALL INTO MEMORY DUMP IF 'D'
  58:				;
  59:				;
  60:				;
  61:				;	-- TABULAR MEMORY DUMP COMMAND --
  62:				;
  63:				;DUMP:
  64:				;	LD	C,16
  65:				;DUMP1:	PUSH	HL		;SAVE STARTING ADDRESS
  66:				;	CALL	PUT4HS		;PRINT STARTING ADDRESS IN HEX
  67:				;	LD	B,8
  68:				;DUMP2:	LD	A,(HL)		;GET A DATA BYTE @ HL
  69:				;	INC	HL
  70:				;	CALL	PUT2HS		;PRINT THE DATA IN HEX
  71:				;	DJNZ	DUMP2		;REPEAT 16 TIMES
  72:				;	POP	HL		;RESTORE STARTING ADDRESS
  73:				;	LD	B,8
  74:				;DUMP3:	LD	A,(HL)		;GET BACK DATA BYTE @ HL
  75:				;	INC	HL
  76:				;	RES	7,A
  77:				;	CP	20H
  78:				;	JR	C,DUMP4
  79:				;	CP	7FH
  80:				;	JR	C,DUMP5
  81:				;DUMP4:	LD	A,'.'		;PRINT A DOT IF DATA < 20 OR > 7F
  82:				;DUMP5:	CALL	OUTPUT		;PRINT ASCII CHARACTER IN A
  83:				;	DJNZ	DUMP3
  84:				;	CALL	CRLF
  85:				;	DEC	C
  86:				;	JR	NZ,DUMP1
  87:				;	RET
  88:				;
  89:				;
  90:				;	-- MEMORY EXAMINE COMMAND --
  91:				;
  92:     -	F447          	VIEW:
  93:10388+17	F447  CDAAF4  		CALL	PUT4HS
  94:10405+7	F44A  7E      		LD	A,(HL)
  95:10412+17	F44B  CDAFF4  		CALL	PUT2HS
  96:10429+17	F44E  CDC9F4  		CALL	ECHO
  97:10446+7	F451  FE0D    		CP	CR
  98:10453+7+5	F453  2818    		JR	Z,VIEW4
  99:10460+7	F455  FE2D    		CP	'-'
 100:10467+7+5	F457  2816    		JR	Z,VIEW5
 101:10474+17	F459  CD9AF4  		CALL	ASCHEX
 102:10491+4	F45C  3F      		CCF	
 103:10495+5+6	F45D  D0      		RET	NC
 104:10500+4	F45E  07      		RLCA	
 105:10504+4	F45F  07      		RLCA	
 106:10508+4	F460  07      		RLCA	
 107:10512+4	F461  07      		RLCA	
 108:10516+4	F462  4F      		LD	C,A
 109:10520+17	F463  CDC9F4  		CALL	ECHO
 110:10537+17	F466  CD9AF4  		CALL	ASCHEX
 111:10554+4	F469  3F      		CCF	
 112:10558+5+6	F46A  D0      		RET	NC
 113:10563+4	F46B  B1      		OR	C
 114:10567+7	F46C  77      		LD	(HL),A
 115:10574+6	F46D  23      	VIEW4:	INC	HL
 116:10580+6	F46E  23      		INC	HL
 117:10586+6	F46F  2B      	VIEW5:	DEC	HL
 118:10592+17	F470  CDECF4  		CALL	CRLF
 119:10609+12	F473  18D2    		JR	VIEW
 120:				;
 121:				;
 122:				;
 123:				;	-- JUMP TO MEMORY LOCATION COMMAND --
 124:				;
 125:     -	F475          	GOTO:
 126:10621+4	F475  E9      		JP	(HL)
 127:				;
 128:				;
 129:				;
 130:				;	-- DISK BOOT LOADER --
 131:				;
 132:     -	F476          	BOOT:
 133:10625+14	F476  DD2191F4		LD	IX,BOOTCB
 134:10639+17	F47A  CD22F0  		CALL	DISKDVR		;ATTEMPT TO READ BOOT SECTOR
 135:10656+19	F47D  DD7E08  		LD	A,(IX+DSKSTS)
 136:10675+4	F480  B7      		OR	A
 137:10679+10+7	F481  CC8000  		CALL	Z,0080H		;EXECUTE BOOT IF NO ERRORS
 138:10689+11	F484  F5      		PUSH	AF
 139:10700+17	F485  CDE0F4  		CALL	PNEXT
 140:     -	F488  20455252		DEFB	' ERR ',NULL
	              2000
 141:10717+10	F48E  F1      		POP	AF
 142:10727+12	F48F  1825    		JR	PUT2HX
 143:				;
 144:				;
 145:     -	F491  01      	BOOTCB:	DEFB	GETSEC
 146:     -	F492  00      		DEFB	0
 147:     -	F493  00      		DEFB	0
 148:     -	F494  01      		DEFB	1
 149:     -	F495  8000    		DEFW	0080H
 150:     -	F497  8000    		DEFW	128
 151:     -	F499  00      		DEFB	0
 152:				;
 153:				;
 154:				;
 155:     -	F49A          	ASCHEX:
 156:10739+7	F49A  D630    		SUB	'0'
 157:10746+5+6	F49C  D8      		RET	C
 158:10751+7	F49D  FE0A    		CP	10
 159:10758+4	F49F  3F      		CCF
 160:10762+5+6	F4A0  D0      		RET	NC
 161:10767+7	F4A1  D607    		SUB	7
 162:10774+7	F4A3  FE0A    		CP	10
 163:10781+5+6	F4A5  D8      		RET	C
 164:10786+7	F4A6  FE10    		CP	16
 165:10793+4	F4A8  3F      		CCF
 166:10797+10	F4A9  C9      		RET
 167:				;
 168:				;
 169:				;
 170:     -	F4AA          	PUT4HS:
 171:10807+4	F4AA  7C      		LD	A,H
 172:10811+17	F4AB  CDB6F4  		CALL	PUT2HX
 173:10828+4	F4AE  7D      		LD	A,L
 174:     -	F4AF          	PUT2HS:
 175:10832+17	F4AF  CDB6F4  		CALL	PUT2HX
 176:10849+7	F4B2  3E20    		LD	A,' '
 177:10856+12	F4B4  181F    		JR	OUTPUT
 178:				;
 179:				;
 180:     -	F4B6          	PUT2HX:
 181:10868+11	F4B6  F5      		PUSH	AF
 182:10879+4	F4B7  1F      		RRA	
 183:10883+4	F4B8  1F      		RRA	
 184:10887+4	F4B9  1F      		RRA	
 185:10891+4	F4BA  1F      		RRA	
 186:10895+17	F4BB  CDBFF4  		CALL	PUTNIB
 187:10912+10	F4BE  F1      		POP	AF
 188:10922+7	F4BF  E60F    	PUTNIB:	AND	00001111B
 189:10929+7	F4C1  C690    		ADD	A,90H
 190:10936+4	F4C3  27      		DAA
 191:10940+7	F4C4  CE40    		ADC	A,40H
 192:10947+4	F4C6  27      		DAA
 193:10951+12	F4C7  180C    		JR	OUTPUT
 194:				;
 195:				;
 196:				;
 197:				;
 198:     -	F4C9          	ECHO:
 199:10963+11	F4C9  E5      		PUSH	HL
 200:10974+11	F4CA  C5      		PUSH	BC
 201:10985+17	F4CB  CD09F0  		CALL	CIV		;CALL CONSOLE INPUT VECTOR
 202:11002+10	F4CE  C1      		POP	BC
 203:11012+10	F4CF  E1      		POP	HL
 204:11022+8	F4D0  CBBF    		RES	7,A
 205:11030+7	F4D2  FE20    		CP	' '
 206:11037+5+6	F4D4  D8      		RET	C		;DO NOT ECHO CONTROL CHARACTERS
 207:				
 208:     -	F4D5          	OUTPUT:
 209:11042+11	F4D5  E5      		PUSH	HL
 210:11053+11	F4D6  C5      		PUSH	BC
 211:11064+11	F4D7  F5      		PUSH	AF
 212:11075+4	F4D8  4F      		LD	C,A
 213:11079+17	F4D9  CD0CF0  		CALL	COV		;CALL CONSOLE OUTPUT VECTOR
 214:11096+10	F4DC  F1      		POP	AF
 215:11106+10	F4DD  C1      		POP	BC
 216:11116+10	F4DE  E1      		POP	HL
 217:11126+10	F4DF  C9      		RET
 218:				;
 219:				;
 220:				;
 221:     -	F4E0          	PNEXT:
 222:11136+19	F4E0  E3      		EX	(SP),HL
 223:11155+7	F4E1  7E      	PNXT1:	LD	A,(HL)
 224:11162+17	F4E2  CDD5F4  		CALL	OUTPUT
 225:11179+7	F4E5  7E      		LD	A,(HL)
 226:11186+6	F4E6  23      		INC	HL
 227:11192+4	F4E7  B7      		OR	A
 228:11196+7+5	F4E8  20F7    		JR	NZ,PNXT1
 229:11203+19	F4EA  E3      		EX	(SP),HL
 230:11222+10	F4EB  C9      		RET
 231:				;
 232:				;
 233:				;
 234:11232+17	F4EC  CDE0F4  	CRLF:	CALL	PNEXT
 235:     -	F4EF  0D0A00  		DEFB	CR,LF,NULL
 236:11249+10	F4F2  C9      		RET
 237:				;
 238:				;
 239:				;
**** ..\src\ROM.MAC ****
  40:					INCLUDE	PRINTER.MAC
**** ..\src\PRINTER.MAC ****
   1:				;
   2:				;
   3:				;	... PARALLEL PRINTER OUTPUT ROUTINE ...
   4:				;
   5:     -	F4F3          	CENTOUT:
   6:				
   7:11259+4	F4F3  79      		LD	A,C
   8:11263+11	F4F4  D320    		OUT	(PRINTER),A	;OUTPUT DATA BYTE TO PRINTER
   9:11274+19	F4F6  E3      		EX	(SP),HL
  10:11293+19	F4F7  E3      		EX	(SP),HL
  11:11312+7	F4F8  3E19    		LD	A,25
  12:11319+11	F4FA  D353    		OUT	(STROBE),A
  13:11330+4	F4FC  3D      	CENT2:	DEC	A
  14:11334+7+5	F4FD  20FD    		JR	NZ,CENT2
  15:11341+11	F4FF  D353    		OUT	(STROBE),A	;TWANG THE STROBE
  16:11352+10	F501  C9      		RET
  17:				;
  18:				;
  19:				;
  20:     -	F502          	CENTRDY:
  21:11362+16	F502  2A47FF  		LD	HL,(PMASKS)
  22:11378+11	F505  DB20    		IN	A,(PRINTER)
  23:11389+4	F507  A5      		AND	L		;MASK BITS WITH 'AND'
  24:11393+4	F508  AC      		XOR	H		;COMPARE WITH 'XOR'
  25:11397+10	F509  C9      		RET			;ACC=0 IF PRINTER IS READY
  26:				;
  27:				;
  28:				;
  29:				;
**** ..\src\ROM.MAC ****
  41:     -	F50A  95      	        DEFB 95h                ; **** Exists on original ROM? ****
  42:     -	F50B ..F5FF 00		defs	(($ and 0ff00h)+100h)-$
  43:					INCLUDE	SERIAL.MAC
**** ..\src\SERIAL.MAC ****
   1:				;
   2:				;
   3:				;
   4:				;	... BAUDRATE AND TIMING CONSIDERATIONS ...
   5:				;
   6:				;	THE FOLLOWING TABLE DETAILS THE BIT TIMES FOR THE BAUDRATES
   7:				;    SUPPORTED BY THE ATR-8000 AND THE CTC PROGRAMMING PARAMETERS
   8:				;    REQUIRED TO GENERATE THEM USING THE CTC IN THE TIMER MODE.
   9:				;    (IE. BY DIVIDING DOWN THE 4MHZ CLOCK WITH 16 OR 256 PRESCALE.)
  10:				;
  11:				;	BAUD      PERIOD    MODULUS   PRESCALE
  12:				;	----      ------    -------   --------
  13:				;      19200        52 us      13        16
  14:				;	9600       104 us      26        16
  15:				;	4800       208 us      52        16
  16:				;	2400       416 us     104        16
  17:				;	1200       832 us     208        16
  18:				;	 600      1664 us      26       256
  19:				;	 300      3328 us      52       256
  20:				;	 150      6656 us     104       256
  21:				;	  75     13312 us     208       256
  22:				;
  23:				;
  24:				;
  25:				;
  26:				;	... INTERRUPT SERVICE ROUTINES FOR SERIAL CONSOLE INPUT ...
  27:				;
  28:				;	AVERAGE EXECUTION TIME = 24.55 us FOR INTERRUPT SERVICE
  29:				;				  4.75 us FOR INTERRUPT ACKNOWLEDGE
  30:				;				 ------
  31:				;				 29.30 us PER BIT
  32:				;
  33:				;
  34:				;	*** START BAGE BOUNDARY RESTRICTIONS ***
  35:				;
  36:     -	F600          	CONPAGE	EQU	$
  37:				;
  38:				;
  39:     -	F600          	RXSTART:
  40:11407+11	F600  F5      		PUSH	AF
  41:11418+7	F601  3E87    		LD	A, CTC_D7_INT_EN + CTC_D6_MODE_TIM + CTC_D2_TCNEXT + CTC_D1_SW_RST + CTC_D0_CONTROL
  42:11425+11	F603  D380    		OUT	(CTC0),A		;RESET CTC AND PROGRAM FOR TIMER MODE
  43:11436+7	F605  3E1A    		LD	A,26			;TIME CONSTANT OF 26 - exactly 104us WHICH IS 9600 BAUD
  44:     -	F606          	RXBAUD	EQU	$-1			;BAUDRATE PARAM IS STORED HERE
  45:11443+11	F607  D380    		OUT	(CTC0),A		;PROGRAM THE TIME CONSTANT
  46:11454+7	F609  3E17    		LD	A,LOW RXDATA
  47:11461+13	F60B  3210FF  		LD	(CTCVEC),A
  48:11474+7	F60E  3E7F    		LD	A,01111111B		;7 DATA BITS
  49:11481+13	F610  321CF6  	RXDAT2:	LD	(RXTEMP),A	;SET DATA SHIFTER TO ALL ONES
  50:11494+10	F613  F1      		POP	AF
  51:11504+4	F614  FB      		EI
  52:11508+14	F615  ED4D    		RETI				;EXECUTION TIME = 115 CLOCK CYCLES
  53:				;
  54:				;
  55:				;
  56:     -	F617          	RXDATA:
  57:11522+11	F617  F5      		PUSH	AF
  58:11533+11	F618  DB70    		IN	A,(ATARI)		;READ SERIAL INPUT BIT STREAM
  59:11544+4	F61A  17      		RLA					;SHIFT DATA BIT (=MSB) INTO CARRY
  60:11548+7	F61B  3E00    		LD	A,NULL			;LOAD A WITH PARTIAL DATA BYTE - NOTE THAT THIS VALUE RESETS AT LABEL RXDAT2
  61:     -	F61C          	RXTEMP	EQU	$-1
  62:11555+4	F61D  1F      		RRA					;SHIFT NEW BIT IN AND ONES OUT
  63:11559+7+5	F61E  38F0    		JR	C,RXDAT2
  64:				
  65:11566+13	F620  3200FF  		LD	(KEYBUF),A		;STORE CHARACTER IN CIRCULAR BUFFER
  66:     -	F621          	RXINP	EQU	$-2
  67:11579+7	F623  3E2C    		LD	A,LOW RXSTOP
  68:11586+13	F625  3210FF  		LD	(CTCVEC),A		;ADVANCE TO STOP BIT STATE
  69:11599+10	F628  F1      		POP	AF
  70:11609+4	F629  FB      		EI
  71:11613+14	F62A  ED4D    		RETI				;EXECUTION TIME = 105 CYCLES
  72:				;
  73:				;
  74:				;
  75:     -	F62C          	RXSTOP:
  76:11627+11	F62C  F5      		PUSH	AF
  77:11638+7	F62D  3EC7    		LD	A, CTC_D7_INT_EN + CTC_D6_MODE_CNT + CTC_D2_TCNEXT + CTC_D1_SW_RST + CTC_D0_CONTROL
  78:11645+11	F62F  D380    		OUT	(CTC0),A		;ENABLE INTERRUPT FROM START BIT
  79:11656+7	F631  3E01    		LD	A,1				;SET TIME CONSTANT TO 1 - 6.5us
  80:11663+11	F633  D380    		OUT	(CTC0),A		;PROGRAM THE TIME CONSTANT
  81:11674+13	F635  3A21F6  		LD	A,(RXINP)
  82:11687+4	F638  3C      		INC	A
  83:11691+7	F639  E60F    		AND	00001111B		;BUMP BUFFER POINTER MODULO 16
  84:11698+13	F63B  3221F6  		LD	(RXINP),A
  85:11711+7	F63E  3E00    		LD	A,LOW RXSTART
  86:11718+13	F640  3210FF  		LD	(CTCVEC),A		;SET VECTOR BACK TO START BIT CODE
  87:11731+10	F643  F1      		POP	AF
  88:11741+4	F644  FB      		EI
  89:11745+14	F645  ED4D    		RETI				;EXECUTION TIME = 132 CYCLES
  90:				;
  91:				;
  92:				;
  93:				;
  94:				;	... INTERRUPT ROUTINES FOR SERIAL DATA OUTPUT ...
  95:				;
  96:     -	F647          	TXSTART:
  97:11759+11	F647  F5      		PUSH	AF
  98:11770+4	F648  AF      		XOR	A
  99:11774+11	F649  D350    		OUT	(ATROUT),A	;SEND COMPLIMENT OF MARK AS START BIT
 100:11785+7	F64B  3E54    		LD	A,LOW TXDAT0
 101:11792+13	F64D  3212FF  		LD	(CTCVEC+2),A	;SET INTERRUPT VECTOR FOR DATA BIT 0
 102:11805+10	F650  F1      		POP	AF
 103:11815+4	F651  FB      		EI
 104:11819+14	F652  ED4D    		RETI
 105:				;
 106:				;
 107:				;
 108:				;
 109:				;
 110:     -	F654          	TXDAT0:
 111:11833+11	F654  F5      		PUSH	AF
 112:11844+7	F655  3E00    		LD	A,NULL
 113:     -	F656          	TXTMP0	EQU	$-1
 114:11851+11	F657  D350    		OUT	(ATROUT),A	;OUTPUT LSB OF SERIAL DATA TO CONSOLE
 115:11862+4	F659  1F      		RRA
 116:11866+13	F65A  3268F6  		LD	(TXTMP1),A	;SHIFT RIGHT TO PREPARE FOR NEXT BIT
 117:11879+7	F65D  3E66    		LD	A,LOW TXDAT1
 118:11886+13	F65F  3212FF  		LD	(CTCVEC+2),A	;DINK WITH VECTOR FOR NEXT TIME
 119:11899+10	F662  F1      		POP	AF
 120:11909+4	F663  FB      		EI
 121:11913+14	F664  ED4D    		RETI			;EXECUTION TIME = 94 CYCLES
 122:				;
 123:				;
 124:     -	F666          	TXDAT1:
 125:11927+11	F666  F5      		PUSH	AF
 126:11938+7	F667  3E00    		LD	A,NULL
 127:     -	F668          	TXTMP1	EQU	$-1
 128:11945+11	F669  D350    		OUT	(ATROUT),A
 129:11956+4	F66B  1F      		RRA
 130:11960+13	F66C  327AF6  		LD	(TXTMP2),A
 131:11973+7	F66F  3E78    		LD	A,LOW TXDAT2
 132:11980+13	F671  3212FF  		LD	(CTCVEC+2),A
 133:11993+10	F674  F1      		POP	AF
 134:12003+4	F675  FB      		EI
 135:12007+14	F676  ED4D    		RETI
 136:				;
 137:				;
 138:     -	F678          	TXDAT2:
 139:12021+11	F678  F5      		PUSH	AF
 140:12032+7	F679  3E00    		LD	A,NULL
 141:     -	F67A          	TXTMP2	EQU	$-1
 142:12039+11	F67B  D350    		OUT	(ATROUT),A
 143:12050+4	F67D  1F      		RRA
 144:12054+13	F67E  328CF6  		LD	(TXTMP3),A
 145:12067+7	F681  3E8A    		LD	A,LOW TXDAT3
 146:12074+13	F683  3212FF  		LD	(CTCVEC+2),A
 147:12087+10	F686  F1      		POP	AF
 148:12097+4	F687  FB      		EI
 149:12101+14	F688  ED4D    		RETI
 150:				;
 151:				;
 152:     -	F68A          	TXDAT3:
 153:12115+11	F68A  F5      		PUSH	AF
 154:12126+7	F68B  3E00    		LD	A,NULL
 155:     -	F68C          	TXTMP3	EQU	$-1
 156:12133+11	F68D  D350    		OUT	(ATROUT),A
 157:12144+4	F68F  1F      		RRA
 158:12148+13	F690  329EF6  		LD	(TXTMP4),A
 159:12161+7	F693  3E9C    		LD	A,LOW TXDAT4
 160:12168+13	F695  3212FF  		LD	(CTCVEC+2),A
 161:12181+10	F698  F1      		POP	AF
 162:12191+4	F699  FB      		EI
 163:12195+14	F69A  ED4D    		RETI
 164:				;
 165:				;
 166:     -	F69C          	TXDAT4:
 167:12209+11	F69C  F5      		PUSH	AF
 168:12220+7	F69D  3E00    		LD	A,NULL
 169:     -	F69E          	TXTMP4	EQU	$-1
 170:12227+11	F69F  D350    		OUT	(ATROUT),A
 171:12238+4	F6A1  1F      		RRA
 172:12242+13	F6A2  32B0F6  		LD	(TXTMP5),A
 173:12255+7	F6A5  3EAE    		LD	A,LOW TXDAT5
 174:12262+13	F6A7  3212FF  		LD	(CTCVEC+2),A
 175:12275+10	F6AA  F1      		POP	AF
 176:12285+4	F6AB  FB      		EI
 177:12289+14	F6AC  ED4D    		RETI
 178:				;
 179:				;
 180:     -	F6AE          	TXDAT5:
 181:12303+11	F6AE  F5      		PUSH	AF
 182:12314+7	F6AF  3E00    		LD	A,NULL
 183:     -	F6B0          	TXTMP5	EQU	$-1
 184:12321+11	F6B1  D350    		OUT	(ATROUT),A
 185:12332+4	F6B3  1F      		RRA
 186:12336+13	F6B4  32C2F6  		LD	(TXTMP6),A
 187:12349+7	F6B7  3EC0    		LD	A,LOW TXDAT6
 188:12356+13	F6B9  3212FF  		LD	(CTCVEC+2),A
 189:12369+10	F6BC  F1      		POP	AF
 190:12379+4	F6BD  FB      		EI
 191:12383+14	F6BE  ED4D    		RETI
 192:				;
 193:				;
 194:     -	F6C0          	TXDAT6:
 195:12397+11	F6C0  F5      		PUSH	AF
 196:12408+7	F6C1  3E00    		LD	A,NULL
 197:     -	F6C2          	TXTMP6	EQU	$-1
 198:12415+11	F6C3  D350    		OUT	(ATROUT),A
 199:12426+4	F6C5  1F      		RRA
 200:12430+13	F6C6  32D4F6  		LD	(TXTMP7),A
 201:12443+7	F6C9  3ED2    		LD	A,LOW TXDAT7
 202:12450+13	F6CB  3212FF  		LD	(CTCVEC+2),A
 203:12463+10	F6CE  F1      		POP	AF
 204:12473+4	F6CF  FB      		EI
 205:12477+14	F6D0  ED4D    		RETI
 206:				;
 207:				;
 208:				;
 209:     -	F6D2          	TXDAT7:
 210:12491+11	F6D2  F5      		PUSH	AF
 211:12502+7	F6D3  3E00    		LD	A,NULL
 212:     -	F6D4          	TXTMP7	EQU	$-1
 213:12509+11	F6D5  D350    		OUT	(ATROUT),A	;SEND LAST BIT WITHOUT SHIFTING AFTER
 214:12520+7	F6D7  3EE0    		LD	A,LOW TXSTOP
 215:12527+13	F6D9  3212FF  		LD	(CTCVEC+2),A	;SET VECTOR FOR STOP BIT NEXT TIME
 216:12540+10	F6DC  F1      		POP	AF
 217:12550+4	F6DD  FB      		EI
 218:12554+14	F6DE  ED4D    		RETI
 219:				;
 220:				;
 221:				;
 222:     -	F6E0          	TXSTOP:
 223:12568+11	F6E0  F5      		PUSH	AF
 224:12579+7	F6E1  3E01    		LD	A,1
 225:12586+11	F6E3  D350    		OUT	(ATROUT),A
 226:12597+7	F6E5  3EEE    		LD	A,LOW TXEXIT
 227:12604+13	F6E7  3212FF  		LD	(CTCVEC+2),A	;SET VECTOR TO CLEAR TX BUSY FLAG
 228:12617+10	F6EA  F1      		POP	AF
 229:12627+4	F6EB  FB      		EI
 230:12631+14	F6EC  ED4D    		RETI
 231:				;
 232:				;
 233:     -	F6EE          	TXEXIT:
 234:12645+11	F6EE  F5      		PUSH	AF
 235:12656+7	F6EF  3E01    		LD	A,00000001B
 236:12663+11	F6F1  D381    		OUT	(CTC1),A	;DISABLE INTERRUPT FROM XMIT BAUDRATE
 237:12674+7	F6F3  3EFF    		LD	A,255
 238:12681+13	F6F5  3212FF  		LD	(CTCVEC+2),A	;SET VECTOR SO BACKGROUND MONITOR IRQ
 239:12694+10	F6F8  F1      		POP	AF
 240:12704+4	F6F9  FB      	RETI1:	EI
 241:12708+14	F6FA  ED4D    		RETI
 242:				;
 243:				;
 244:     -	0000          		IF	(HIGH CONPAGE) NE (HIGH $)
 246:					ENDIF
 247:				;
 248:				;
 249:				;
 250:				;	*** END PAGE BOUNDARY RESTRICTIONS ***
 251:				;
 252:				;
 253:				;
 254:     -	F6FC          	CONINIT:
 255:12722+4	F6FC  F3      		DI
 256:12726+10	F6FD  21EEF6  		LD	HL,TXEXIT
 257:12736+16	F700  2212FF  		LD	(CTCVEC+2),HL
 258:12752+7	F703  3E07    		LD	A,00000111B
 259:12759+11	F705  D381    		OUT	(CTC1),A	;PROGRAM TX CTC IN TIMER MODE
 260:12770+13	F707  3A06F6  		LD	A,(RXBAUD)
 261:12783+11	F70A  D381    		OUT	(CTC1),A	;DIVIDE BY 26 GIVES 9600 BAUD
 262:				
 263:12794+10	F70C  2100FF  		LD	HL,KEYBUF
 264:12804+16	F70F  2221F6  		LD	(RXINP),HL	;RESET RX FIFO IN/OUT POINTERS
 265:12820+16	F712  2233F7  		LD	(RXOUT),HL
 266:     -	F715          	CINIT2:
 267:12836+4	F715  F3      		DI			;ALTERNATE ENTRY FROM 'DISKIO'
 268:12840+7	F716  3E01    		LD	A,1
 269:12847+11	F718  D357    		OUT	(CDMUX),A	;SET MUX TO ENABLE DATA TO CTC0
 270:12858+7	F71A  067E    	CINIT3:	LD	B,126
 271:12865+11	F71C  DB70    	CINIT4:	IN	A,(ATARI)
 272:12876+4	F71E  17      		RLA
 273:12880+7+5	F71F  30F9    		JR	NC,CINIT3		;RE-LOAD COUNT IN B IF INPUT LOW
 274:12887+8+5	F721  10F9    		DJNZ	CINIT4		;ELSE LOOP FOR ONE 9600 BAUD CHAR TIME
 275:				
 276:12895+7	F723  3EC7    		LD	A, CTC_D7_INT_EN + CTC_D6_MODE_CNT + CTC_D2_TCNEXT + CTC_D1_SW_RST + CTC_D0_CONTROL
 277:12902+11	F725  D380    		OUT	(CTC0),A		;PROGRAM RX CTC IN COUNTER MODE
 278:12913+7	F727  3E01    		LD	A,1				;SET TIME CONSTANT TO 1 - 6.5us
 279:12920+11	F729  D380    		OUT	(CTC0),A		;PROGRAM THE TIME CONSTANT AND INTERRUPT ON NEXT START BIT
 280:12931+10	F72B  2100F6  		LD	HL,RXSTART
 281:12941+16	F72E  2210FF  		LD	(CTCVEC),HL
 282:12957+4	F731  FB      		EI
 283:12961+10	F732  C9      		RET
 284:				;
 285:				;
 286:     -	F733  00FF    	RXOUT:	DEFW	KEYBUF		;KEYBOARD BUFFER OUTPUT POINTER
 287:				;
 288:				;
 289:     -	F735          	CONST:
 290:12971+10	F735  2133F7  		LD	HL,RXOUT
 291:12981+13	F738  3A21F6  		LD	A,(RXINP)
 292:12994+7	F73B  96      		SUB	(HL)
 293:13001+5+6	F73C  C8      		RET	Z		;A=0 IF NO DATA AVAILABLE
 294:				
 295:13006+7	F73D  3EFF    		LD	A,255
 296:13013+10	F73F  C9      		RET
 297:				;
 298:				;
 299:				;
 300:     -	F740          	CONIN:
 301:13023+17	F740  CD35F7  		CALL	CONST
 302:13040+7+5	F743  28FB    		JR	Z,CONIN
 303:				
 304:13047+16	F745  2A33F7  		LD	HL,(RXOUT)
 305:13063+7	F748  7E      		LD	A,(HL)		;GET RECEIVED DATA FROM FIFO
 306:13070+4	F749  2C      		INC	L
 307:13074+8	F74A  CBA5    		RES	4,L		;INCREMENT HL MODULO 16
 308:13082+16	F74C  2233F7  		LD	(RXOUT),HL
 309:13098+10	F74F  C9      		RET
 310:				;
 311:				;
 312:				;
 313:     -	F750          	CONOUT:
 314:13108+13	F750  3A12FF  		LD	A,(CTCVEC+2)
 315:13121+7	F753  FEEE    		CP	LOW TXEXIT
 316:13128+7+5	F755  38F9    		JR	C,CONOUT	;LOOP TILL WE REACH 'TEXIT' OR HIGHER
 317:				
 318:13135+4	F757  79      		LD	A,C
 319:13139+7	F758  E67F    		AND	01111111B	;CLEAR BIT 7 AND SET FLAGS
 320:13146+10	F75A  E25FF7  		JP	PO,COUT2
 321:13156+7	F75D  F680    		OR	10000000B
 322:13163+13	F75F  3256F6  	COUT2:	LD	(TXTMP0),A	;STORE RESULTING CHARACTER FOR XMIT
 323:13176+7	F762  3E47    		LD	A,LOW TXSTART
 324:13183+13	F764  3212FF  		LD	(CTCVEC+2),A	;SET VECTOR FOR START BIT INTERRUPT
 325:13196+7	F767  3E81    		LD	A,10000001B
 326:13203+11	F769  D381    		OUT	(CTC1),A	;PROGRAM TX CTC IN TIMER MODE
 327:13214+10	F76B  C9      		RET
 328:				;
 329:				;
 330:				;
**** ..\src\ROM.MAC ****
  44:				;
  45:				;	CODE PAST THIS POINT IS ONLY USED IN ATARI DISK MODE
  46:				;
  47:					INCLUDE	BITBANG.MAC
**** ..\src\BITBANG.MAC ****
   1:				;********************************************************
   2:				;*							*
   3:				;*	19200 BAUD SERIAL I/O FOR ATARI COMM PORT	*
   4:				;*							*
   5:				;********************************************************
   6:				;
   7:				;
   8:				;	19200 BAUD SERIAL I/O IS HALF DUPLEX DUE TO OBVIOUS
   9:				;	TIMING CONSTRAINTS. ALL TRANSFERS ARE DONE FROM 4K PAGE
  10:				;	ALIGNED BUFFER 'IOBUFF', WITH BLOCK START ADDRESS
  11:				;	ARRANGED SO END-OF-BLOCK CONDITION IS MET WHEN POINTER
  12:				;	ROLLS OVER THE NEXT EVEN PAGE BYTE BOUNDARY.
  13:				;
  14:				;	CALL WITH BLOCK START POINTER IN HL ,DATA POLARITY MASK
  15:				;	IN D (WHERE D=0 TRUE DATA, D=FF INVERTED DATA) AND
  16:				;	'C' OR 'E' HANDSHAKE CHARACTER IN E.
  17:				;
  18:				;
  19:     -	F76C          	SENDBUFF:
  20:13224+11	F76C  E5      		PUSH	HL		;SAVE DATA BLOCK POINTER
  21:13235+11	F76D  D5      		PUSH	DE		;SAVE POLARITY MASK FOR DATA
  22:13246+10	F76E  2101C3  		LD	HL,IOBUFF+LEN+1
  23:13256+7	F771  73      		LD	(HL),E
  24:13263+7	F772  1600    		LD	D,0
  25:13270+17	F774  CD84F7  		CALL	XMITBUF		;SEND 'C' OR 'E' CHARACTER FROM E
  26:13287+10	F777  D1      		POP	DE
  27:13297+10	F778  E1      		POP	HL
  28:13307+7	F779  1E00    		LD	E,0
  29:13314+17	F77B  CD84F7  		CALL	XMITBUF		;THEN SEND DATA BLOCK TO ATARI
  30:13331+10	F77E  2101C3  		LD	HL,IOBUFF+LEN+1
  31:13341+7	F781  73      		LD	(HL),E		;FALL THROUGH TO SEND CHECKSUM
  32:13348+7	F782  1600    		LD	D,0
  33:				;
  34:				;	CALL WITH DATA BLOCK POINTER IN HL.
  35:				;	PRESERVES MASK/CKECKSUM IN D/E.
  36:				;
  37:     -	F784          	XMITBUF:
  38:13355+4	F784  F3      		DI
  39:13359+10	F785  0119F8  		LD	BC,STARBIT
  40:     -	F788          	SalyXMITBUF:
  41:13369+20	F788  ED4312FF		LD	(CTCVEC+2),BC	;SET UP INITIAL INTERRUPT VECTOR
  42:13389+7	F78C  0608    		LD	B,8
  43:13396+7	F78E  3E87    		LD	A, CTC_D7_INT_EN + CTC_D6_MODE_TIM + CTC_D2_TCNEXT + CTC_D1_SW_RST + CTC_D0_CONTROL
  44:13403+11	F790  D381    		OUT	(CTC1),A		;PROGRAM CTC1 TO INTERRUPT AT BIT RATE
  45:13414+7	F792  3E0D    		LD	A,13			;SET TIME CONSTANT TO 13 - 52us. EXACT IS 52.083us
  46:13421+11	F794  D381    		OUT	(CTC1),A		;COUNT 13*(16*250 NS) GIVES 19200 BAUD WITH 0.16% ERROR
  47:13432+4	F796  FB      		EI
  48:13436+12	F797  18FE    		JR	$		;SPIN HERE TILL INTERRUPTS GET US OUT
  49:				;
  50:				;
  51:				;
  52:				;
  53:				;
  54:				;
  55:				;	... INTERRUPT FOR COMMAND INPUT HIGH->LOW TRANSITION ..
  56:				;
  57:     -	F799          	CSTART:
  58:13448+4	F799  08      		EX	AF,AF'
  59:13452+4	F79A  D9      		EXX
  60:13456+7	F79B  3EFF    		LD	A,255
  61:13463+13	F79D  3255FF  		LD	(CMDFLG),A	;SET 'CMDFLG' FLAG TO ERROR STATE FIRST
  62:13476+11	F7A0  D357    		OUT	(CDMUX),A	;SWITCH MUX TO ENABLE SERIAL DATA IRQ
  63:13487+10	F7A2  21FBC2  		LD	HL,IOBUFF+LEN-5	;POINT DE 5 BYTES BEFORE END OF BUFFER
  64:13497+17	F7A5  CDD9F7  		CALL	RXBLOCK		;ATTEMPT TO RECEIVE COMMAND FRAME
  65:13514+7+5	F7A8  300A    		JR	NC,CSTRT1	;JUMP IF NO DATA HAPPENED
  66:				
  67:13521+6	F7AA  2B      		DEC	HL
  68:13527+7	F7AB  7E      		LD	A,(HL)
  69:13534+4	F7AC  B9      		CP	C		;COMPARE DERRIVED AND RECVD CHECKSUMS
  70:13538+7+5	F7AD  2005    		JR	NZ,CSTRT1	;JUMP IF CHECKSUM ERROR
  71:				
  72:13545+7	F7AF  3E01    		LD	A,1
  73:13552+13	F7B1  3255FF  		LD	(CMDFLG),A	;SET FLAG IF GOOD COMMAND FRAME
  74:13565+4	F7B4  08      	CSTRT1:	EX	AF,AF'
  75:13569+4	F7B5  D9      		EXX
  76:13573+4	F7B6  FB      		EI
  77:13577+14	F7B7  ED4D    		RETI
  78:				;
  79:				;
  80:				;
  81:				;	... DATA FRAME RECEIVE SUBROUTINE ...
  82:				;
  83:     -	F7B9          	RECVBUFF:
  84:13591+4	F7B9  F3      		DI
  85:13595+10	F7BA  2100C1  		LD	HL,IOBUFF
  86:13605+17	F7BD  CDD9F7  		CALL	RXBLOCK		;BITBANG A BLOCK OF INPUT DATA
  87:13622+4	F7C0  FB      		EI
  88:13626+7+5	F7C1  380D    		JR	C,RBUFF2	;JUMP IF BUFFER OVERFLOWED
  89:				
  90:13633+6	F7C3  2B      		DEC	HL
  91:13639+7	F7C4  7E      		LD	A,(HL)
  92:13646+4	F7C5  B9      		CP	C
  93:13650+7+5	F7C6  2008    		JR	NZ,RBUFF2	;JUMP IF CHECKSUMS DON'T AGREE
  94:				
  95:13657+10	F7C8  1100C1  		LD	DE,IOBUFF
  96:13667+4	F7CB  B7      		OR	A
  97:13671+15	F7CC  ED52    		SBC	HL,DE		;ELSE COMPUTE LENGTH OF BLOCK LESS
  98:13686+4	F7CE  AF      		XOR	A		; CHECKSUM BYTE AND RETURN WITH
  99:13690+10	F7CF  C9      		RET			; RESULT IN HL AND ZERO FLAG SET
 100:				;
 101:13700+7	F7D0  3E4E    	RBUFF2:	LD	A,'N'
 102:13707+17	F7D2  CD56FD  		CALL	SENDCHAR	;SEND 'NAK' FOR BAD DATA FRAME
 103:13724+7	F7D5  3EFF    		LD	A,255
 104:13731+4	F7D7  B7      		OR	A
 105:13735+10	F7D8  C9      		RET			;RETURN WITH ACC SET NON=ZERO
 106:				;
 107:				;
 108:				;
 109:				;
 110:				;
 111:				;	... BITBANG INPUT SUBROUTINE ...
 112:				;
 113:				;	CALL WITH BLOCK START POINTER IN HL. RETURNS WITH
 114:				;	HL POINTING TO LAST BYTE+1 OF BLOCK RECEIVED.
 115:				;	THE CARRY BIT IS SET IF THE BUFFER FILLED UP BEFORE
 116:				;	THE BIT STREAM STOPPED.
 117:				;
 118:				;
 119:     -	F7D9          	RXBLOCK:
 120:13745+10	F7D9  11AA0A  		LD	DE,2730		;SET ABORT COUNTER FOR 32 MILLISECONDS
 121:     -	F7DC          	SalyRXBLOCK:
 122:13755+10	F7DC  010000  		LD	BC,0		;CLEAR B/C FOR CHECKSUM DERRIVATION
 123:13765+12	F7DF  1823    		JR	RXB35		;GO START LOOPING FOR START BIT
 124:				;
 125:13777+4	F7E1  79      	RXB1:	LD	A,C
 126:13781+4	F7E2  80      		ADD	A,B
 127:13785+7	F7E3  CE00    		ADC	A,0		;ACCUMULATE CHECKSUM ATARI STYLE
 128:13792+4	F7E5  4F      		LD	C,A
 129:13796+19	F7E6  E3      		EX	(SP),HL
 130:13815+19	F7E7  E3      		EX	(SP),HL
 131:13834+19	F7E8  E3      		EX	(SP),HL
 132:13853+19	F7E9  E3      		EX	(SP),HL
 133:13872+7	F7EA  0608    		LD	B,8
 134:				;
 135:				;	SERIAL->PARALLEL CONVERSION AT 52 MICROSECONDS PER BIT
 136:				;
 137:13879+7	F7EC  3E0B    	RXB2:	LD	A,11		;  7 CYCLES
 138:13886+7	F7EE  3E0B    		LD	A,11		;  7 CYCLES
 139:13893+4	F7F0  00      		NOP			;  4 CYCLES
 140:13897+4	F7F1  3D      	RXB3:	DEC	A		; 44 CYCLES  (11*4)
 141:13901+10	F7F2  C2F1F7  		JP	NZ,RXB3		;110 CYCLES  (11*10)
 142:13911+11	F7F5  DB70    		IN	A,(ATARI)	; 11 CYCLES
 143:13922+4	F7F7  17      		RLA			;  4 CYCLES
 144:13926+8	F7F8  CB1A    		RR	D		;  8 CYCLES
 145:13934+8+5	F7FA  10F0    		DJNZ	RXB2		; 13 CYCLES  (8 ON FINAL BIT)
 146:				
 147:13942+4	F7FC  42      		LD	B,D		;SAVE COPY OF LAST DATA BYTE IN B
 148:13946+7	F7FD  72      		LD	(HL),D		;THEN STORE IN MEMORY BUFFER @HL
 149:13953+6	F7FE  23      		INC	HL
 150:13959+4	F7FF  7C      		LD	A,H
 151:13963+7	F800  FEC3    		CP	HIGH (IOBUFF+LEN)
 152:13970+4	F802  3F      		CCF
 153:13974+5+6	F803  D8      		RET	C		;RETURN WITH CARRY SET IF BUFFER FILLED
 154:				
 155:     -	F804          	RXB35:
 156:     -	0001          	IF SALLYBUILD
 157:13979+10	F804  11A101  		LD	DE,417		;5 MILLISECONDS @ 12 MICROSECONDS/LOOP
 158:				ENDIF
 159:13989+7	F807  3E47    		LD	A, CTC_D6_MODE_CNT + CTC_D2_TCNEXT + CTC_D1_SW_RST + CTC_D0_CONTROL	; Set up values for CTC0
 160:13996+11	F809  D380    		OUT	(CTC0),A	;PUT CTC0 IN COUNTER MODE
 161:14007+4	F80B  AF      		XOR	A			;TIME CONSTANT OF 0 WHICH MEANS 256
 162:14011+11	F80C  D380    		OUT	(CTC0),A	;COUNT DATA HIGH->LOW EDGES MOD 256
 163:     -	0000          	IF SALLYBUILD <> 1
 165:				ENDIF
 166:				
 167:14022+11	F80E  DB80    	RXB4:	IN	A,(CTC0)
 168:14033+4	F810  B7      		OR	A
 169:14037+7+5	F811  20CE    		JR	NZ,RXB1		;NEW BYTE IS COMING IF START BIT LOW
 170:14044+6	F813  1B      		DEC	DE
 171:14050+4	F814  7A      		LD	A,D
 172:14054+4	F815  B3      		OR	E
 173:14058+7+5	F816  20F6    		JR	NZ,RXB4		;ELSE LOOP TILL TIMER RUNS OUT
 174:				
 175:14065+10	F818  C9      		RET			;RETURN WITH CARRY CLEAR IF TIMED OUT
 176:				;
 177:				;
 178:				;
 179:				;
 180:				;	**** PAGE BOUNDARY SENSITIVE CODE STARTS HERE ****
 181:				;
 182:     -	F819          	SERPAGE	EQU	$
 183:				;
 184:				;
 185:				;	... DAMN FAST TRANSMIT INTERRUPTS ...
 186:				;
 187:				;	HL ... POINTS TO DATA BLOCK TO BE SENT
 188:				;	 D ... HOLDS DATA POLARITY MASK
 189:				;	 E ... USED TO ACCUMULATE CHECKSUM
 190:				;	 B ... USED FOR DJNZ TO COUNT BITS
 191:				;	 C ... USED FOR PARALLEL-SERIAL OUTPUT
 192:				;
 193:				;
 194:     -	F819          	STARBIT:
 195:14075+4	F819  AF      		XOR	A
 196:14079+11	F81A  D350    		OUT	(ATROUT),A	;SEND START BIT
 197:14090+4	F81C  FB      		EI
 198:14094+7	F81D  7E      		LD	A,(HL)		;LOAD A WITH TRANSMIT DATA BYTE
 199:14101+6	F81E  23      		INC	HL		; AND INCREMENT BUFFER POINTER
 200:14107+4	F81F  AA      		XOR	D		;DO DATA POLARITY THING
 201:14111+4	F820  4F      		LD	C,A		;THEN STUFF IN C FOR SHIFTING OUT
 202:14115+4	F821  83      		ADD	A,E
 203:14119+7	F822  CE00    		ADC	A,0
 204:14126+4	F824  5F      		LD	E,A		;ACCUMULATE CHECKSUM IN E
 205:14130+7	F825  3E2C    		LD	A,LOW DATBIT
 206:14137+13	F827  3212FF  		LD	(CTCVEC+2),A	;FIX BAUDRATE INTERRUPT VECTOR
 207:14150+14	F82A  ED4D    		RETI			;RETURN TO IDLE LOOP
 208:				;
 209:				;
 210:				;
 211:     -	F82C          	DATBIT:
 212:14164+4	F82C  79      		LD	A,C
 213:14168+11	F82D  D350    		OUT	(ATROUT),A	;SEND DATA BIT (LSB)
 214:14179+4	F82F  FB      		EI
 215:14183+8	F830  CB19    		RR	C		;SHIFT DATA FOR NEXT BIT
 216:14191+8+5	F832  1005    		DJNZ	DATB2		;DECREMENT AND SKIP IF NOT LAST BIT
 217:				
 218:14199+7	F834  3E3B    		LD	A,LOW STOPB1
 219:14206+13	F836  3212FF  		LD	(CTCVEC+2),A	;THEN FIX VECTOR TO SEND STOP BIT
 220:14219+14	F839  ED4D    	DATB2:	RETI			;RETURN TO IDLE LOOP
 221:				;
 222:				;
 223:				;
 224:     -	F83B          	STOPB1:
 225:14233+7	F83B  3E01    		LD	A,1
 226:14240+11	F83D  D350    		OUT	(ATROUT),A	;SEND STOP BIT
 227:14251+4	F83F  FB      		EI
 228:14255+4	F840  7C      		LD	A,H
 229:14259+7	F841  FEC3    		CP	HIGH (IOBUFF+LEN)
 230:14266+7+5	F843  3009    		JR	NC,STOP1A	;JUMP IF BUFFER END REACHED
 231:				
 232:14273+7	F845  0608    		LD	B,8		;LOAD BITCOUNT FOR NEXT RECEIVE BYTE
 233:14280+7	F847  3E19    		LD	A,LOW STARBIT
 234:14287+13	F849  3212FF  		LD	(CTCVEC+2),A
 235:14300+14	F84C  ED4D    		RETI			;SET TO SEND SECOND STOP BIT
 236:				;
 237:14314+7	F84E  3E55    	STOP1A:	LD	A,LOW ENDBIT
 238:14321+13	F850  3212FF  		LD	(CTCVEC+2),A	;SET TO END TRANSMISSION
 239:14334+14	F853  ED4D    		RETI
 240:				;
 241:				;
 242:				;
 243:     -	0000          		IF	(HIGH SERPAGE) NE (HIGH $)
 245:					ENDIF
 246:				;
 247:				;
 248:				;
 249:     -	F855          	ENDBIT:
 250:     -	0001          	IF SALLYBUILD
 251:14348+7	F855  3E03    		LD	A,CTC_D1_SW_RST + CTC_D0_CONTROL	;SOFTWARE RESET - STOP INTERRUPTS FROM BAUDRATE CTC
 252:				ELSE
 254:				ENDIF
 255:14355+11	F857  D381    		OUT	(CTC1),A			;SEND COMMAND TO CTC1
 256:14366+4	F859  FB      		EI
 257:14370+7	F85A  3EFF    		LD	A,255
 258:14377+13	F85C  3212FF  		LD	(CTCVEC+2),A	;SET VECTOR BACK TO STANDARD PLACE
 259:14390+10	F85F  E1      		POP	HL		;DISCARD IRQ RETURN ADDRESS AND RETURN
 260:14400+14	F860  ED4D    		RETI			; TO SECOND ADDRESS ON STACK
 261:				;
 262:				;
 263:				;	**** END PAGE BOUNDARY RESTRICTIONS ****
 264:				;
 265:				;
**** ..\src\ROM.MAC ****
  48:					INCLUDE	ATARI.MAC
**** ..\src\ATARI.MAC ****
   1:				;	PAGE
   2:				;
   3:				;	<<< MAIN LOOP FOR ATARI DISK EMULATOR >>>
   4:				;
   5:				;
   6:				;
   7:				;
   8:     -	F862          	EMULATOR:
   9:14414+7	F862  3E01    		LD	A,1
  10:14421+11	F864  D352    		OUT	(BANKSW),A	;TURN OFF THE ROM
  11:				;
  12:				;	CHECK TO DETERMINE WHICH CONSOLE IS ACTIVE
  13:				;
  14:14432+10	F866  21FEC2  	LOGON:	LD	HL,IOBUFF+LEN-2
  15:14442+4	F869  F3      		DI
  16:14446+17	F86A  CDD9F7  		CALL	RXBLOCK		;LISTEN FOR A MESSAGE FROM ABOVE
  17:14463+4	F86D  FB      		EI
  18:14467+7+5	F86E  30F6    		JR	NC,LOGON	;KEEP LOOPING TILL SOMETHING RECEIVED
  19:14474+16	F870  2AFEC2  		LD	HL,(IOBUFF+LEN-2)
  20:14490+10	F873  11E680  		LD	DE,80E6H
  21:14500+4	F876  B7      		OR	A
  22:14504+15	F877  ED52    		SBC	HL,DE
  23:14519+10	F879  CAF5F3  		JP	Z,MINIMON	;GOTO MONITOR IF 9600 BAUD <CR>
  24:				;
  25:				;	ENTER ATARI DISK EMULATOR MODE
  26:				;
  27:14529+7	F87C  3E03    		LD	A,3
  28:     -	F87E          	SalyLOGN1:
  29:14536+13	F87E  3233FF  		LD	(RWMAX),A	;DO LESS RETRIES IN ATARI MODE
  30:     -	F881          	SalyLOGN2:
  31:14549+7	F881  3E38    		LD	A,38H		;LOAD ACC WITH 'JR C,XX' OPCODE
  32:14556+13	F883  3288F1  		LD	(KLUDGE),A	;CRIPPLE READY ERROR FROM 'SELECT'
  33:14569+11	F886  DB50    		IN	A,(SERIN)
  34:14580+8	F888  CB5F    		BIT	3,A
  35:14588+7+5	F88A  2005    		JR	NZ,HAS850	;JUMP IF 850 JUMPER PRESENT
  36:				
  37:14595+7	F88C  3EFF    		LD	A,255
  38:14602+13	F88E  3223F9  		LD	(PTRID),A	;ELSE ZAP PRINTER ID IN TABLE
  39:				
  40:14615+10	F891  21E1F8  	HAS850:	LD	HL,DUMMY
  41:14625+16	F894  2219F0  		LD	(RENEW+1),HL	;MAKE DUMMY CONSOLE RE-INIT VECTOR
  42:14641+20	F897  ED5B1930		LD	DE,(RENEW+1-0C000H)
  43:14661+4	F89B  B7      		OR	A
  44:14665+15	F89C  ED52    		SBC	HL,DE
  45:14680+7+5	F89E  280C    		JR	Z,MAIN		;JUMP IF 16K MEMORY SIZE MACHINE
  46:				
  47:     -	0001          	IF SALLYBUILD
  48:14687+10	F8A0  210022  		LD	HL, 02200h	;was 0000h, now 0800h+26*256 track buffer = 2200h
  49:14697+16	F8A3  224BFF  		LD	(PBASE),HL	;ELSE SETUP FOR 39.5K PRINTER BUFFER
  50:14713+10	F8A6  21FF9D  		LD	HL,09DFFH	;bfffh - 2200h = 9dffh	
  51:				ELSE
  55:				ENDIF	;SALLYBUILD
  56:14723+16	F8A9  224DFF  		LD	(PSIZE),HL
  57:				
  58:14739+17	F8AC  CDD1F9  	MAIN:	CALL	SPOOLER		;KEEP BACKGROUND PRINTING GOING
  59:14756+16	F8AF  2A3AFF  		LD	HL,(FSMVEC)
  60:14772+17	F8B2  CDBDF8  		CALL	CALLHL		;DO ATARI TASK ROUTINE
  61:14789+16	F8B5  2A3CFF  		LD	HL,(EXTVEC)
  62:14805+17	F8B8  CDBDF8  		CALL	CALLHL		;DO EXTRA TASK ROUTINE
  63:14822+12	F8BB  18EF    		JR	MAIN
  64:				;
  65:				;
  66:14834+4	F8BD  E9      	CALLHL:	JP	(HL)
  67:				;
  68:				;
  69:				;
  70:     -	F8BE          	PWRWAIT:
  71:14838+11	F8BE  DB70    		IN	A,(ATARI)
  72:14849+7	F8C0  E68A    		AND	10001010B	;MASK TO DATA/POWER/COMMAND BITS
  73:14856+7	F8C2  FE8A    		CP	10001010B
  74:14863+5+6	F8C4  C0      		RET	NZ
  75:				
  76:14868+4	F8C5  F3      		DI
  77:14872+4	F8C6  AF      		XOR	A
  78:14876+13	F8C7  3255FF  		LD	(CMDFLG),A	;RESET COMMAND FRAME FLAG
  79:14889+11	F8CA  D357    		OUT	(CDMUX),A	;SET MUX TO GATE COMMAND LINE TO CTC0
  80:14900+7	F8CC  3ED7    		LD	A,CTC_D7_INT_EN + CTC_D6_MODE_CNT + CTC_D4_RISEEDGE + CTC_D2_TCNEXT + CTC_D1_SW_RST + CTC_D0_CONTROL	; Set up values for CTC0
  81:14907+11	F8CE  D380    		OUT	(CTC0),A	;RESET CTC AND ARM FOR HIGH->LOW IRQ
  82:14918+7	F8D0  3E01    		LD	A,1			;TIME CONSTANT OF 1
  83:14925+11	F8D2  D380    		OUT	(CTC0),A	;WRITE TIME CONSTANT
  84:14936+10	F8D4  2199F7  		LD	HL,CSTART
  85:14946+16	F8D7  2210FF  		LD	(CTCVEC),HL	;STORE INTERRUPT VECTOR
  86:14962+4	F8DA  FB      		EI
  87:14966+10	F8DB  21E2F8  		LD	HL,CMDWAIT
  88:14976+16	F8DE  223AFF  		LD	(FSMVEC),HL	;SET FSM VECTOR TO 'CMDHIGH' STATE
  89:14992+10	F8E1  C9      	DUMMY:	RET
  90:				;
  91:				;
  92:				;
  93:     -	F8E2          	CMDWAIT:
  94:15002+13	F8E2  3A55FF  		LD	A,(CMDFLG)
  95:15015+4	F8E5  B7      		OR	A			;SEE IF COMMAND FRAME HAS ARRIVED
  96:15019+5+6	F8E6  C8      		RET	Z			;EXIT IF NOTHING HAS HAPPENED
  97:				
  98:15024+7	F8E7  FE01    		CP	1
  99:15031+7+5	F8E9  2808    		JR	Z,CMDL4		;PROCESS COMMAND IF GOOD FRAME RECVD
 100:				
 101:15038+4	F8EB  F3      		DI				;ELSE RESET INTERRUPT AND START AGAIN
 102:15042+7	F8EC  3E03    		LD	A, CTC_D1_SW_RST + CTC_D0_CONTROL	; SOFTWARE RESET CTC0
 103:15049+11	F8EE  D380    		OUT	(CTC0),A	;PERFORM THE RESET
 104:15060+4	F8F0  FB      		EI
 105:15064+12	F8F1  1816    		JR	CMDL5		;GO SET FSM VECTOR
 106:				;
 107:				;
 108:     -	C2FB          	CFRAME	EQU	IOBUFF+LEN-5	;COMMAND FRAME IS LAST 5 BYTES OF BUFF
 109:				;
 110:15076+13	F8F3  3AFBC2  	CMDL4:	LD	A,(CFRAME)
 111:15089+16	F8F6  2A38FF  		LD	HL,(IDPTR)	;GET POINTER TO ID CODE TABLE
 112:15105+17	F8F9  CD10F9  		CALL	SCAN		;SCAN TABLE FOR MATCHING UNIT ID CODE
 113:15122+7+5	F8FC  200B    		JR	NZ,CMDL5	;EXIT IF COMMAND IS NOT FOR US
 114:				
 115:15129+13	F8FE  3AFCC2  		LD	A,(CFRAME+1)
 116:15142+17	F901  CD10F9  		CALL	SCAN		;SCAN FOR COMMAND CODE IN TABLE
 117:15159+7+5	F904  2003    		JR	NZ,CMDL5	;ERROR IF NO MATCH FOUND
 118:				
 119:15166+17	F906  CDBDF8  		CALL	CALLHL		;GO TO COMMAND PROCESSOR @HL
 120:				;
 121:15183+10	F909  21BEF8  	CMDL5:	LD	HL,PWRWAIT
 122:15193+16	F90C  223AFF  		LD	(FSMVEC),HL	;SET FSM VECTOR BACK TO IDLE STATE
 123:15209+10	F90F  C9      		RET
 124:				;
 125:				;
 126:				;
 127:				;
 128:     -	F910          	SCAN:
 129:15219+7	F910  4E      		LD	C,(HL)		;LOAD BC WITH TABLE LENGTH @HL
 130:15226+6	F911  23      		INC	HL
 131:15232+7	F912  46      		LD	B,(HL)
 132:15239+6	F913  23      		INC	HL
 133:15245+16+5	F914  EDB1    		CPIR			;SCAN STRING @HL FOR MATCH WITH ACC
 134:15261+5+6	F916  C0      		RET	NZ		;EXIT IF NO MATCH
 135:				
 136:15266+11	F917  F5      		PUSH	AF
 137:15277+11	F918  09      		ADD	HL,BC		;ELSE ADD RESIDUE FROM CPIR TO HL
 138:15288+11	F919  09      		ADD	HL,BC		; THREE TIMES TO POINT TO ADDRESS
 139:15299+11	F91A  09      		ADD	HL,BC		; CORRESPONDING TO MATCHED VALUE
 140:15310+7	F91B  7E      		LD	A,(HL)
 141:15317+6	F91C  23      		INC	HL
 142:15323+7	F91D  66      		LD	H,(HL)
 143:15330+4	F91E  6F      		LD	L,A
 144:15334+10	F91F  F1      		POP	AF
 145:15344+10	F920  C9      		RET			;RETURN TABLE ENTRY IN HL
 146:				;
 147:				;
 148:				;
 149:				;	... DEVICE ID TABLE FOR DISK/PRINTER/RS232 COMBO BOX ...
 150:				;
 151:     -	F921          	IDTAB:
 152:     -	F921  0600    		DEFW	IDMAX
 153:				
 154:     -	F923  40      	PTRID:	DEFB	'@'		;PRINTER CONTROLLER ID CODE
 155:     -	F924  31      		DEFB	'1'		;DISK UNIT #1 ID CODE
 156:     -	F925  32      		DEFB	'2'		;DISK #2
 157:     -	F926  33      		DEFB	'3'		;DISK #3
 158:     -	F927  34      		DEFB	'4'		;DISK #4
 159:     -	F928  5A      		DEFB	'Z'		;Z80 LOAD/DUMP/GOTO
 160:				
 161:     -	F929  54F9    		DEFW	Z80TAB
 162:     -	F92B          	SalyDISKID:
 163:     -	F92B  3DF9    		DEFW	DISKTAB
 164:     -	F92D  3DF9    		DEFW	DISKTAB
 165:     -	F92F  3DF9    		DEFW	DISKTAB
 166:     -	F931  3DF9    		DEFW	DISKTAB
 167:     -	F933  35F9    		DEFW	PTRTAB
 168:     -	0006          	IDMAX	EQU	($-IDTAB)/3
 169:				;
 170:				;
 171:				;
 172:     -	F935          	PTRTAB:				;PRINTER COMMANDS
 173:     -	F935  0200    		DEFW	PTRMAX
 174:				
 175:     -	F937  53      		DEFB	'S'		;PRINTER STATUS
 176:     -	F938  57      		DEFB	'W'		;PRINTER OUTPUT
 177:				
 178:     -	F939  78F9    		DEFW	PTRWRITE
 179:     -	F93B  62F9    		DEFW	PTRSTAT
 180:     -	0002          	PTRMAX	EQU	($-(PTRTAB+2))/3
 181:				;
 182:				;
 183:				;
 184:     -	F93D          	DISKTAB:			;DISK COMMANDS
 185:     -	F93D  0700    		DEFW	DISKMAX
 186:				
 187:     -	F93F  52      		DEFB	'R'		;DISK READ
 188:     -	F940  53      		DEFB	'S'		;DISK STATUS
 189:     -	F941  57      		DEFB	'W'		;DISK WRITE
 190:     -	F942  50      		DEFB	'P'		;DISK PUT
 191:     -	F943  4E      		DEFB	'N'		;GET PARAMETERS
 192:     -	F944  4F      		DEFB	'O'		;PUT PARAMETERS
 193:     -	F945  21      		DEFB	'!'		;FORMAT DISK
 194:				
 195:     -	F946  38FC    		DEFW	DISKINIT
 196:     -	F948  05FD    		DEFW	PUTPARAMS
 197:     -	F94A  E7FC    		DEFW	GETPARAMS
 198:     -	F94C  05FA    		DEFW	DISKPUT
 199:     -	F94E  08FA    		DEFW	DISKWRITE
 200:     -	F950  DBFB    		DEFW	DISKSTAT
 201:     -	F952  8CFA    		DEFW	DISKREAD
 202:     -	0007          	DISKMAX	EQU	($-(DISKTAB+2))/3
 203:				;
 204:				;
 205:				;
 206:     -	F954          	Z80TAB:				;Z80 COMMANDS
 207:     -	F954  0400    		DEFW	Z80MAX
 208:				
 209:     -	F956  52      		DEFB	'R'		;MEMORY READ
 210:     -	F957  57      		DEFB	'W'		;MEMORY WRITE
 211:     -	F958  53      		DEFB	'S'		;SET ADDRESS
 212:     -	F959  47      		DEFB	'G'		;GOTO ADDRESS
 213:				
 214:     -	F95A  B4FD    		DEFW	Z80GOTO
 215:     -	F95C  A6FD    		DEFW	Z80SET
 216:     -	F95E  7BFD    		DEFW	Z80WRITE
 217:     -	F960  5FFD    		DEFW	Z80READ
 218:     -	0004          	Z80MAX	EQU	($-(Z80TAB+2))/3
 219:				;
 220:				;
 221:				;
 223:				;
 224:				;
 225:				;	... PRINTER STATUS COMMAND PROCESSOR ...
 226:				;
 227:     -	F962          	PTRSTAT:
 228:15354+17	F962  CD4AFD  		CALL	SENDACK
 229:15371+10	F965  2143FF  		LD	HL,PSMSG
 230:15381+10	F968  11FCC2  		LD	DE,IOBUFF+LEN-4
 231:15391+11	F96B  D5      		PUSH	DE
 232:15402+10	F96C  010400  		LD	BC,4
 233:15412+16+5	F96F  EDB0    		LDIR			;COPY PRINTER STATUS FRAME FROM RAM
 234:15428+10	F971  E1      		POP	HL
 235:15438+10	F972  114300  		LD	DE,'C'		;SEND PRINTER STATUS UN-INVERTED
 236:15448+10	F975  C36CF7  		JP	SENDBUFF
 237:				;	ret
 238:				;
 239:				;
 240:				;	... PRINTER WRITE COMMAND PROCESSOR ...
 241:				;
 242:     -	F978          	PTRWRITE:
 243:15458+17	F978  CD4AFD  		CALL	SENDACK		;SEND 'ACK' FOR COMMAND FRAME
 244:15475+17	F97B  CDB9F7  		CALL	RECVBUFF	;GET PRINT DATA FROM SERIAL BUS
 245:15492+5+6	F97E  C0      		RET	NZ		;EXIT IF ERROR OR TIMEOUT
 246:				
 247:15497+10	F97F  112800  		LD	DE,40
 248:15507+4	F982  B7      		OR	A
 249:15511+15	F983  ED52    		SBC	HL,DE
 250:15526+5+6	F985  C0      		RET	NZ		;ERROR IF RX BLOCK LENGTH <> 40 BYTES
 251:				
 252:15531+17	F986  CD4AFD  		CALL	SENDACK		;ELSE SEND 'ACK'
 253:15548+10	F989  2100C1  		LD	HL,IOBUFF
 254:15558+7	F98C  0628    		LD	B,40
 255:15565+7	F98E  7E      	PWRIT3:	LD	A,(HL)
 256:15572+7	F98F  FE9B    		CP	9BH		;CHECK FOR 'ATASCII' CARRIAGE RETURN
 257:15579+7+5	F991  2005    		JR	NZ,PWRT3A
 258:				
 259:15586+10	F993  213EFF  		LD	HL,NEWLIN
 260:15596+7	F996  46      		LD	B,(HL)		;OUTPUT PRINTER'S NEWLINE CHARACTER(S)
 261:15603+6	F997  23      		INC	HL
 262:				
 263:15609+11	F998  E5      	PWRT3A:	PUSH	HL
 264:15620+16	F999  2A4FFF  		LD	HL,(PCOUNT)
 265:15636+20	F99C  ED5B4DFF		LD	DE,(PSIZE)
 266:15656+4	F9A0  B7      		OR	A
 267:15660+15	F9A1  ED52    		SBC	HL,DE		;TEST IF PRINTER BUFFER IS FULL
 268:15675+10	F9A3  E1      		POP	HL
 269:15685+7+5	F9A4  380E    		JR	C,PWRIT4	;STORE ANOTHER CHARACTER IF NOT FULL
 270:				
 271:15692+11	F9A6  E5      		PUSH	HL
 272:15703+11	F9A7  C5      		PUSH	BC
 273:15714+17	F9A8  CDD1F9  		CALL	SPOOLER		;TRY TO CLEAR OUT BUFFER
 274:15731+10	F9AB  C1      		POP	BC
 275:15741+10	F9AC  E1      		POP	HL
 276:15751+11	F9AD  DB70    		IN	A,(ATARI)
 277:15762+7	F9AF  E602    		AND	00000010B	;TEST ATARI COMMAND LINE AND
 278:15769+7+5	F9B1  20E5    		JR	NZ,PWRT3A	;STAY IN LOOP IF INACTIVE
 279:				
 280:15776+10	F9B3  C9      		RET			;ELSE ABORT PRINTING AND RETURN
 281:				;
 282:15786+7	F9B4  7E      	PWRIT4:	LD	A,(HL)
 283:15793+6	F9B5  23      		INC	HL
 284:15799+11	F9B6  E5      		PUSH	HL
 285:15810+11	F9B7  C5      		PUSH	BC
 286:15821+16	F9B8  2A51FF  		LD	HL,(PINP)
 287:15837+17	F9BB  CDF1F9  		CALL	INDEX		;GET INDEX TO FIFO INPUT PLACE
 288:15854+20	F9BE  ED5351FF		LD	(PINP),DE	;STORE UPDATED INPUT OFFSET
 289:15874+7	F9C2  77      		LD	(HL),A		;STORE CHARACTER IN QUEUE
 290:15881+16	F9C3  2A4FFF  		LD	HL,(PCOUNT)
 291:15897+6	F9C6  23      		INC	HL		;BUMP FIFO CHARACTER COUNTER
 292:15903+16	F9C7  224FFF  		LD	(PCOUNT),HL
 293:15919+10	F9CA  C1      		POP	BC
 294:15929+10	F9CB  E1      		POP	HL
 295:15939+8+5	F9CC  10C0    		DJNZ	PWRIT3		;REPEAT TO END OF STRING
 296:				
 297:15947+10	F9CE  C354FD  		JP	SENDCOMP	;SEND 'COMPLETE' TO ATARI
 298:				;	ret
 299:				;
 300:				;
 301:				;
 302:     -	F9D1          	SPOOLER:
 303:15957+16	F9D1  2A4FFF  		LD	HL,(PCOUNT)
 304:15973+4	F9D4  7C      		LD	A,H
 305:15977+4	F9D5  B5      		OR	L
 306:15981+5+6	F9D6  C8      		RET	Z		;EXIT IF NO DATA IN FIFO TO PRINT
 307:				
 308:15986+17	F9D7  CD15F0  		CALL	LISTV+3
 309:16003+5+6	F9DA  C0      		RET	NZ		;EXIT IF PRINTER BUSY
 310:				
 311:16008+16	F9DB  2A53FF  		LD	HL,(POUT)
 312:16024+17	F9DE  CDF1F9  		CALL	INDEX		;GET POINTER WITH AUTO-INCREMENT
 313:16041+20	F9E1  ED5353FF		LD	(POUT),DE
 314:16061+7	F9E5  4E      		LD	C,(HL)
 315:16068+17	F9E6  CD12F0  		CALL	LISTV		;PRINT CHARACTER AND EXIT
 316:16085+16	F9E9  2A4FFF  		LD	HL,(PCOUNT)
 317:16101+6	F9EC  2B      		DEC	HL		;DIMINISH BUFFER COUNT BY ONE
 318:16107+16	F9ED  224FFF  		LD	(PCOUNT),HL
 319:16123+10	F9F0  C9      		RET
 320:				;
 321:				;
 322:				;
 323:				;
 324:     -	F9F1          	INDEX:
 325:16133+4	F9F1  EB      		EX	DE,HL
 326:16137+16	F9F2  2A4BFF  		LD	HL,(PBASE)
 327:16153+11	F9F5  19      		ADD	HL,DE		;ADD OFFSET TO FIFO BASE ADDRESS
 328:16164+11	F9F6  E5      		PUSH	HL
 329:16175+6	F9F7  13      		INC	DE		;BUMP OFFSET NOW IN DE
 330:16181+16	F9F8  2A4DFF  		LD	HL,(PSIZE)
 331:16197+4	F9FB  B7      		OR	A
 332:16201+15	F9FC  ED52    		SBC	HL,DE		;COMPARE TO MAX OFFSET VALUE
 333:16216+7+5	F9FE  3003    		JR	NC,INDEX2
 334:16223+10	FA00  110000  		LD	DE,0		;SET OFFSET TO ZERO IF ROLL-OVER
 335:16233+10	FA03  E1      	INDEX2:	POP	HL
 336:16243+10	FA04  C9      		RET			;RETURN DE=OFFSET AND HL=POINTER
 337:				;
 338:				;
 339:				;
 340:				;	... DISK WRITE COMMAND PROCESSOR ...
 341:				;
 342:     -	FA05          	DISKPUT:
 343:16253+4	FA05  AF      		XOR	A
 344:16257+12	FA06  1802    		JR	DWRT0
 345:				;
 346:     -	FA08          	DISKWRITE:
 347:16269+7	FA08  3E01    		LD	A,1
 348:16276+13	FA0A  32B5FF  	DWRT0:	LD	(VFLAG),A
 349:16289+17	FA0D  CD28FD  		CALL	DRVINDEX	;INDEX TO GET DRIVE PARAMETER POINTER
 350:16306+5+6	FA10  D8      		RET	C		;EXIT IF NOT A DRIVE IN OUR BOX
 351:				
 352:16311+17	FA11  CD4AFD  		CALL	SENDACK
 353:16328+17	FA14  CDB9F7  		CALL	RECVBUFF	;ELSE GO QUICK TO READ DATA FRAME
 354:16345+5+6	FA17  C0      		RET	NZ		;EXIT IF BAD CHECKSUM
 355:     -	FA18          	SalyDISKWRT1:
 356:16350+16	FA18  22A9FF  		LD	(LOGSIZ),HL	;SAVE DATA BLOCK LENGTH
 357:     -	FA1B          	SalyDISKWRT2:
 358:16366+10	FA1B  118000  		LD	DE,128
 359:16376+4	FA1E  B7      		OR	A
 360:16380+15	FA1F  ED52    		SBC	HL,DE		;TEST FOR 128 BYTE FRAME
 361:16395+7+5	FA21  2804    		JR	Z,DWRT1
 362:16402+4	FA23  B7      		OR	A
 363:16406+15	FA24  ED52    		SBC	HL,DE		;TEST FOR 256 BYTE FRAME
 364:16421+5+6	FA26  C0      		RET	NZ
 365:				
 366:16426+17	FA27  CD4AFD  	DWRT1:	CALL	SENDACK		;SEND 'ACK' IF BLOCKSIZE IS 128 OR 256
 367:16443+17	FA2A  CD10FB  		CALL	SECTRAN		;SET DISK PARAMETERS FOR WRITE
 368:16460+7+5	FA2D  204E    		JR	NZ,DWRT4	;JUMP IF ERROR FROM 'SECTRAN'
 369:				
 370:16467+10	FA2F  2100C1  		LD	HL,IOBUFF
 371:16477+16	FA32  229CFF  		LD	(DKIOCB+DSKPTR),HL
 372:16493+13	FA35  3AA9FF  		LD	A,(LOGSIZ)
 373:16506+4	FA38  47      		LD	B,A		;PREPARE TO COMPLIMENT DISK DATA BLOCK
 374:16510+7	FA39  7E      	DWRT2:	LD	A,(HL)
 375:16517+4	FA3A  2F      		CPL
 376:16521+7	FA3B  77      		LD	(HL),A		;COMPLIMENT DISK DATA BLOCK
 377:16528+6	FA3C  23      		INC	HL
 378:16534+8+5	FA3D  10FA    		DJNZ	DWRT2		;REPEAT TO END OF BLOCK
 379:16542+7	FA3F  3E02    		LD	A,PUTSEC
 380:16549+13	FA41  3298FF  		LD	(DKIOCB+DSKOP),A
 381:16562+14	FA44  DD2198FF		LD	IX,DKIOCB
 382:     -	FA48          	SalyDISKWRT3:
 383:16576+17	FA48  CD0FF0  		CALL	DISKV		;CALL PHYSICAL DISK DRIVER
 384:16593+13	FA4B  3AA0FF  		LD	A,(DKIOCB+DSKSTS)
 385:16606+4	FA4E  B7      		OR	A
 386:16610+7+5	FA4F  202C    		JR	NZ,DWRT4	;BOMB OUT NOW IF DISK ERROR
 387:				
 388:16617+13	FA51  3AB5FF  		LD	A,(VFLAG)
 389:16630+4	FA54  B7      		OR	A
 390:16634+7+5	FA55  2826    		JR	Z,DWRT4		;EXIT OK IF NOT WRITE WITH VERIFY
 391:				
 392:16641+7	FA57  3E01    		LD	A,GETSEC
 393:16648+13	FA59  3298FF  		LD	(DKIOCB+DSKOP),A
 394:16661+10	FA5C  2100C3  		LD	HL,IOBUFF+LEN
 395:16671+16	FA5F  229CFF  		LD	(DKIOCB+DSKPTR),HL
 396:16687+17	FA62  CD0FF0  		CALL	DISKV		;ELSE READ SECTOR BACK FOR VERIFY
 397:16704+13	FA65  3AA0FF  		LD	A,(DKIOCB+DSKSTS)
 398:16717+4	FA68  B7      		OR	A
 399:16721+7+5	FA69  2012    		JR	NZ,DWRT4	;BOMB AGAIN IF READ ERROR
 400:				
 401:16728+10	FA6B  2100C1  		LD	HL,IOBUFF
 402:16738+10	FA6E  1100C3  		LD	DE,IOBUFF+LEN
 403:16748+13	FA71  3A9EFF  		LD	A,(DKIOCB+DSKAUX)
 404:16761+4	FA74  47      		LD	B,A		;PREPARE TO COMPARE 128 OR 256 BYTES
 405:16765+7	FA75  1A      	DWRT3:	LD	A,(DE)
 406:16772+7	FA76  AE      		XOR	(HL)
 407:16779+7+5	FA77  200B    		JR	NZ,DWRT5
 408:16786+6	FA79  23      		INC	HL
 409:16792+6	FA7A  13      		INC	DE
 410:16798+8+5	FA7B  10F8    		djnz	DWRT3		;fall through last time with acc=0
 411:				
 412:16806+17	FA7D  CDE3FA  	DWRT4:	CALL	SETSTAT		;DO STATUS SETTING STUFF
 413:16823+4	FA80  7B      		LD	A,E
 414:16827+10	FA81  C356FD  		JP	SENDCHAR	;SEND 'COMPLETE' OR 'ERROR' TO ATARI
 415:				;	ret
 416:				;
 417:16837+4	FA84  AF      	DWRT5:	XOR	A
 418:16841+17	FA85  CD06FB  		CALL	ssts4		;set hardware status=0 but set bad r/w
 419:16858+4	FA88  7B      		LD	a,e
 420:16862+10	FA89  C356FD  		JP	sendchar
 421:				;	ret
 422:				;
 423:				;
 424:				;
 425:				;	... DISK READ COMMAND PROCESSOR ...
 426:				;
 427:     -	FA8C          	DISKREAD:
 428:16872+17	FA8C  CD28FD  		CALL	DRVINDEX	;POINT IY TO DRIVE'S DATA AREA
 429:16889+5+6	FA8F  D8      		RET	C		;EXIT IF NOT A DRIVE IN OUR BOX
 430:				
 431:16894+17	FA90  CD4AFD  		CALL	SENDACK
 432:     -	FA93          	SalyDISKRD1:
 433:16911+17	FA93  CD10FB  		CALL	SECTRAN		;SET PARAMETERS FOR DISK OPERATION
 434:     -	FA96          	SalyDISKRD2:
 435:16928+11	FA96  F5      		PUSH	AF		;SAVE ERROR STATUS FROM 'SECTRAN'
 436:16939+7+5	FA97  280F    		JR	Z,DRD2		;JUMP IF PARAMS SET OK
 437:				
 438:16946+19	FA99  FD5606  		LD	D,(IY+SECLEN)
 439:16965+19	FA9C  FD5E07  		LD	E,(IY+SECLEN+1)	;LOAD DE WITH SECTOR LEN FROM 'DMATRIX'
 440:16984+4	FA9F  7A      		LD	A,D
 441:16988+4	FAA0  B3      		OR	E
 442:16992+7+5	FAA1  2009    		JR	NZ,DRD2A	;JUMP IF LENGTH <> 0
 443:				
 444:16999+10	FAA3  118000  		LD	DE,128		;ELSE REVERT TO 128 BYTES
 445:17009+12	FAA6  1804    		JR	DRD2A
 446:				;
 447:17021+20	FAA8  ED5B9EFF	DRD2:	LD	DE,(DKIOCB+DSKAUX) ;LOAD DE WITH PHYSICAL SECTOR LENGTH
 448:17041+16	FAAC  2AFDC2  	DRD2A:	LD	HL,(CFRAME+2)
 449:17057+10	FAAF  010400  		LD	BC,4
 450:17067+4	FAB2  B7      		OR	A
 451:17071+15	FAB3  ED42    		SBC	HL,BC		;TEST IF ACCESSING SECTOR# 1,2 OR 3
 452:17086+7+5	FAB5  3003    		JR	NC,DRD3		;JUMP IF NOT ACCESSING A BOOT SECTOR
 453:17093+10	FAB7  118000  		LD	DE,128
 454:17103+20	FABA  ED53A9FF	DRD3:	LD	(LOGSIZ),DE
 455:17123+10	FABE  2100C3  		LD	HL,IOBUFF+LEN
 456:17133+4	FAC1  B7      		OR	A
 457:17137+15	FAC2  ED52    		SBC	HL,DE		;COMPUTE STARTING PLACE IN BUFFER
 458:17152+10	FAC4  F1      		POP	AF
 459:17162+7+5	FAC5  2014    		JR	NZ,DRD4		;JUMP IF ERROR FROM 'SECTRAN' ABOVE
 460:				
 461:17169+16	FAC7  229CFF  		LD	(DKIOCB+DSKPTR),HL
 462:17185+7	FACA  3E01    		LD	A,GETSEC
 463:17192+13	FACC  3298FF  		LD	(DKIOCB+DSKOP),A
 464:17205+14	FACF  DD2198FF		LD	IX,DKIOCB
 465:17219+11	FAD3  E5      		PUSH	HL
 466:     -	FAD4          	SalyDISKRD3:
 467:17230+17	FAD4  CD0FF0  		CALL	DISKV		;CALL DISK I/O HANDLER
 468:17247+10	FAD7  E1      		POP	HL
 469:17257+13	FAD8  3AA0FF  		LD	A,(DKIOCB+DSKSTS)
 470:				
 471:17270+17	FADB  CDE3FA  	DRD4:	CALL	SETSTAT		;TEST AND STORE STATUS STUFF
 472:17287+7	FADE  16FF    		LD	D,255		;SET MASK TO INVERT DISK DATA
 473:17294+10	FAE0  C36CF7  		JP	SENDBUFF	;SEND RESPONSE TO ATARI
 474:				;	ret
 475:				;
 476:				;
 477:				;
 478:				;	ROUTINE TO CHECK STATUS AFTER READ/WRITE
 479:				;
 480:     -	FAE3          	SETSTAT:
 481:17304+4	FAE3  B7      		OR	A
 482:17308+7+5	FAE4  200A    		JR	NZ,SSTS1	;JUMP IF SOME DISK ERROR INDICATED
 483:				
 484:17315+19	FAE6  FD770D  		LD	(IY+HDWSTS),A	;ELSE STORE ZEROS IN HARDWARE STATUS
 485:17334+7	FAE9  1E43    		LD	E,'C'		;LOAD E WITH 'COMPLETE' CHARACTER
 486:17341+23	FAEB  FDCB0C96		RES	BADRW,(IY+CMDSTS)
 487:17364+10	FAEF  C9      		RET
 488:				;
 489:				;	ACC HOLDS NON-ZERO VALUE INDICATING A DISK ERROR
 490:				;
 491:17374+8	FAF0  CB77    	SSTS1:	BIT	6,A		;BIT HOLDS WPROT STATUS AFTER WRITE
 492:17382+7+5	FAF2  2802    		JR	Z,SSTS2
 493:				
 494:17389+7	FAF4  E69F    		AND	10011111B
 495:				
 496:17396+8	FAF6  CB6F    	SSTS2:	BIT	5,A		;HOLDS DD MARK STATUS AFTER READ
 497:17404+7+5	FAF8  2802    		JR	Z,SSTS3
 498:				
 499:17411+7	FAFA  F660    		OR	01100000B	;CREATE 1771 DD ADDRESS MARK STATUS
 500:				
 501:17418+4	FAFC  4F      	SSTS3:	LD	C,A
 502:17422+7	FAFD  E681    		AND	10000001B	;TEST FOR 'READY' OR 'BUSY' BITS SET
 503:17429+4	FAFF  79      		LD	A,C
 504:17433+7+5	FB00  2804    		JR	Z,SSTS4		;JUMP IF NOT READY/BUSY LOCK UP
 505:				
 506:17440+7	FB02  E67E    		AND	01111110B	;ELSE CLEAR BOTH BITS AND REPLACE
 507:17447+7	FB04  F610    		OR	00010000B	; WITH 'RNF' ERROR BIT INSTEAD
 508:				
 509:17454+19	FB06  FD770D  	SSTS4:	LD	(IY+HDWSTS),A	;STORE HARDWARE STATUS FOR ATARI
 510:17473+7	FB09  1E45    		LD	E,'E'		;LOAD E WITH 'ERROR' CHARACTER
 511:17480+23	FB0B  FDCB0CD6		SET	BADRW,(IY+CMDSTS)
 512:17503+10	FB0F  C9      		RET
 513:				;
 514:				;
 515:				;
 516:				;
 517:				;
 518:				;
 519:     -	FB10          	SECTRAN:
 520:				;	BIT	CONFIG,(IY+FLAGS)
 521:				;	JP	NZ,STRAN3	;SKIP IF DRIVE HAS BEEN CONFIGURED
 522:				
 523:17513+13	FB10  3A2EFF  		LD	A,(DRVOFF)
 524:17526+4	FB13  B7      		OR	A
 525:17530+7+5	FB14  2811    		JR	Z,STRAN2	;JUMP IF DRIVES HAVE NOT BEEN STOPPED
 526:				
 527:17537+4	FB16  AF      		XOR	A
 528:17541+13	FB17  322EFF  		LD	(DRVOFF),A	;CLEAR DRIVES-STOPPED FLAGS
 529:17554+10	FB1A  2164FF  		LD	HL,DMATRIX+FLAGS
 530:17564+10	FB1D  111000  		LD	DE,16
 531:17574+7	FB20  0604    		LD	B,4
 532:17581+15	FB22  CB86    	STRAN1:	RES	FIRST,(HL)	;ZIP THRU ARRAY RESETING 'FIRST' FLAGS
 533:17596+11	FB24  19      		ADD	HL,DE		; TO FORCE MEDIA TO BE EXAMINED ANEW
 534:17607+8+5	FB25  10FB    		DJNZ	STRAN1
 535:				
 536:17615+20	FB27  FDCB0E46	STRAN2:	BIT	FIRST,(IY+FLAGS)
 537:17635+7+5	FB2B  206D    		JR	NZ,STRAN3	;SKIP MEDIA CHECK IF DRIVE IS ACTIVE
 538:				
 539:17642+7	FB2D  3E03    		LD	A,GETID
 540:17649+13	FB2F  3298FF  		LD	(DKIOCB+DSKOP),A
 541:17662+13	FB32  3A99FF  		LD	A,(DKIOCB+DSKDRV)
 542:17675+10	FB35  2120FF  		LD	HL,DRVTAB
 543:17685+4	FB38  85      		ADD	A,L
 544:17689+4	FB39  6F      		LD	L,A		;POINT TO HEAD POSITION FOR DRIVE#
 545:17693+7	FB3A  7E      		LD	A,(HL)
 546:17700+7	FB3B  FE50    		CP	80
 547:17707+7+5	FB3D  3801    		JR	C,STR20		;JUMP IF TRACK# IN VALID RANGE
 548:17714+4	FB3F  AF      		XOR	A		;ELSE GOTO TRACK ZERO
 549:17718+13	FB40  329AFF  	STR20:	LD	(DKIOCB+DSKTRK),A
 550:17731+10	FB43  21ABFF  		LD	HL,IDBUF
 551:17741+16	FB46  229CFF  		LD	(DKIOCB+DSKPTR),HL
 552:17757+14	FB49  DD2198FF		LD	IX,DKIOCB
 553:17771+17	FB4D  CD0FF0  		CALL	DISKV		;READ AN ID MARK FROM CURRENT TRACK
 554:17788+13	FB50  3AA0FF  		LD	A,(DKIOCB+DSKSTS)
 555:17801+4	FB53  B7      		OR	A
 556:17805+5+6	FB54  C0      		RET	NZ		;EXIT IF DISK ERROR ON READ-ID
 557:				;
 558:				;	ARRIVE HERE TO SET DISK PARAMS IMPLICITLY
 559:				;
 560:17810+13	FB55  3AAEFF  		LD	A,(IDBUF+3)	;GET SECTOR LENGTH BYTE FROM ID
 561:17823+17	FB58  CDCDFB  		call	getsize		;compute sector length in bytes
 562:17840+19	FB5B  FD7006  		ld	(iy+seclen),b
 563:17859+19	FB5E  FD7107  		ld	(iy+seclen+1),c	;store result in 'seclen' param slot
 564:17878+13	FB61  3A9EFF  		LD	A,(DKIOCB+DSKAUX)
 565:17891+4	FB64  07      		RLCA
 566:17895+4	FB65  07      		RLCA
 567:17899+4	FB66  07      		RLCA
 568:17903+4	FB67  2F      		CPL
 569:17907+7	FB68  E606    		AND	00000110B	;MAKE PERCOM DENSITY/SIZE BITS
 570:17914+19	FB6A  FD7705  		LD	(IY+MEDIA),A
 571:17933+8	FB6D  CB4F    		BIT	SIZE,A
 572:17941+7+5	FB6F  2807    		JR	Z,STR25		;JUMP IF FIVE INCH DISK SELECTED
 573:				
 574:17948+7	FB71  3E4D    		LD	A,77
 575:17955+10	FB73  211A00  		LD	HL,26
 576:17965+12	FB76  1805    		JR	STR26
 577:				;
 578:17977+7	FB78  3E28    	STR25:	LD	A,40
 579:17984+10	FB7A  211200  		LD	HL,18
 580:17994+19	FB7D  FDBE00  	str26:	cp	(iy+ntrks)
 581:18013+7+5	FB80  3803    		jr	c,str27		;skip if ntrks has been set > default
 582:18020+19	FB82  FD7700  		ld	(iy+ntrks),a	;else set param to default value
 583:18039+19	FB85  FD7402  	STR27:	LD	(IY+NSECS),H
 584:18058+19	FB88  FD7503  		LD	(IY+NSECS+1),L	;STORE SECTORS PER TRACK PARAM
 585:				
 586:18077+23	FB8B  FDCB0EC6		SET	FIRST,(IY+FLAGS)
 587:18100+16	FB8F  2A96FF  		LD	HL,(OLDPTR)
 588:18116+4	FB92  7C      		LD	A,H
 589:18120+4	FB93  B5      		OR	L
 590:18124+7+5	FB94  2004    		JR	NZ,STRAN3	;JUMP IF NOT THE FIRST-EVER DISKOP
 591:				
 592:18131+20	FB96  FD2296FF		LD	(OLDPTR),IY	;ELSE SET POINTER TO THIS GUYS STUFF
 593:				;
 594:				;	ARRIVE HERE TO COMPUTE TRACK/SECTOR AND SET DISK BYTECOUNT
 595:				;
 596:18151+16	FB9A  2AFDC2  	STRAN3:	LD	HL,(CFRAME+2)
 597:18167+6	FB9D  2B      		DEC	HL		;REMOVE +1 BIAS FROM SECTOR NUMBER
 598:18173+7	FB9E  1600    		LD	D,0
 599:18180+19	FBA0  FD5E03  		LD	E,(IY+NSECS+1)
 600:18199+7	FBA3  3EFF    		LD	A,-1
 601:18206+4	FBA5  3C      	STRAN4:	INC	A
 602:18210+4	FBA6  B7      		OR	A
 603:18214+15	FBA7  ED52    		SBC	HL,DE
 604:18229+7+5	FBA9  30FA    		JR	NC,STRAN4	;DIVIDE ABSOLUTE SECTOR NUMBER BY SPT
 605:18236+11	FBAB  19      		ADD	HL,DE
 606:18247+6	FBAC  23      		INC	HL		;RESTORE +1 BIAS TO SECTOR NUMBER
 607:18253+4	FBAD  4D      		LD	C,L
 608:18257+10	FBAE  219BFF  		LD	HL,DKIOCB+DSKSEC
 609:18267+7	FBB1  71      		LD	(HL),C		;STORE PHYSICAL SECTOR#
 610:				
 611:18274+19	FBB2  FDBE00  		CP	(IY+NTRKS)	;COMPARE RESULT FROM TRACK# COMPUTATION
 612:18293+7+5	FBB5  3808    		JR	C,STRAN5	; TO 'NTRKS' PARAM AND JUMP IF LESS
 613:				
 614:18300+19	FBB7  FD9600  		SUB	(IY+NTRKS)	;ELSE SUBTRACT EXTRA AND SELECT SIDE# 1
 615:18319+10	FBBA  2199FF  		LD	HL,DKIOCB+DSKDRV
 616:18329+15	FBBD  CBFE    		SET	7,(HL)
 617:				
 618:18344+13	FBBF  329AFF  	STRAN5:	LD	(DKIOCB+DSKTRK),A  ;STORE PHYSICAL TRACK#
 619:18357+19	FBC2  FD6606  		LD	H,(IY+SECLEN)
 620:18376+19	FBC5  FD6E07  		LD	L,(IY+SECLEN+1)
 621:18395+16	FBC8  229EFF  		LD	(DKIOCB+DSKAUX),HL  ;STORE PHYSICAL SECTOR SIZE FOR I/O
 622:18411+4	FBCB  AF      		XOR	A
 623:18415+10	FBCC  C9      		RET
 624:				;
 625:				;
 626:				;
 627:     -	FBCD          	getsize:
 628:18425+10	FBCD  018000  		ld	bc,128
 629:18435+7	FBD0  E603    		and	00000011b
 630:18442+5+6	FBD2  C8      		ret	z		;sector length code=0 means 128 bytes
 631:				
 632:18447+8	FBD3  CB21    	getsz2:	sla	c
 633:18455+8	FBD5  CB10    		rl	b		;else multiply 128 by 2,4 or 8
 634:18463+4	FBD7  3D      		dec	a
 635:18467+7+5	FBD8  20F9    		jr	nz,getsz2
 636:18474+10	FBDA  C9      		ret
 637:				;
 638:				;
 639:				;
 640:				;
 641:				;
 642:				;	... DISK STATUS COMMAND PROCESSOR ...
 643:				;
 644:     -	FBDB          	DISKSTAT:
 645:18484+17	FBDB  CD28FD  		CALL	DRVINDEX	;POINT IY TO DRIVE'S DATA AREA
 646:18501+5+6	FBDE  D8      		RET	C		;EXIT IF NOT A DRIVE IN OUR BOX
 647:				
 648:18506+17	FBDF  CD4AFD  		CALL	SENDACK		;SEND 'ACK' FOR COMMAND FRAME
 649:18523+17	FBE2  CDD3FC  		CALL	HASPARMS	;CHECK IF HAS NEVER BEEN ACCESSED
 650:18540+13	FBE5  3AC9FF  		LD	A,(DRVTMR)
 651:18553+11	FBE8  F5      		PUSH	AF		;SAVE DRIVE TIMER VALUE RIGHT NOW
 652:18564+7	FBE9  3E00    		LD	A,TSTRDY
 653:18571+13	FBEB  3298FF  		LD	(DKIOCB+DSKOP),A
 654:18584+14	FBEE  DD2198FF		LD	IX,DKIOCB
 655:18598+17	FBF2  CD0FF0  		CALL	DISKV		;CALL DISK HANDLER TO GET TYPE 1 STATUS
 656:				
 657:18615+19	FBF5  FD4E0C  		LD	C,(IY+CMDSTS)	;PREPARE TO DERRIVE REST OF 'CMDSTS'
 658:18634+19	FBF8  FD360C00		LD	(IY+CMDSTS),0	; AND RESET OLD STATUS BITS
 659:18653+10	FBFC  F1      		POP	AF
 660:18663+4	FBFD  B7      		OR	A
 661:18667+7+5	FBFE  2804    		JR	Z,DSTAT1	;JUMP IF DRIVES WERE PREVIOUSLY STOPPED
 662:				
 663:18674+8	FC00  CBE1    		SET	ACTIVE,C
 664:18682+12	FC02  1802    		JR	DSTAT2
 665:				;
 666:18694+8	FC04  CBA1    	DSTAT1:	RES	ACTIVE,C
 667:18702+20	FC06  FDCB0556	DSTAT2:	BIT	DENSTY,(IY+MEDIA)
 668:18722+7+5	FC0A  2804    		JR	Z,DSTAT3	;JUMP IF DRIVE SET FOR SINGLE DENSITY
 669:				
 670:18729+8	FC0C  CBE9    		SET	SEC256,C
 671:18737+12	FC0E  1802    		JR	DSTAT4
 672:				;
 673:18749+8	FC10  CBA9    	DSTAT3:	RES	SEC256,C
 674:18757+20	FC12  DDCB0876	DSTAT4:	BIT	6,(IX+DSKSTS)
 675:18777+7+5	FC16  2804    		JR	Z,DSTAT5	;JUMP IF DRIVE IS NOT WRITE PROTECTED
 676:				
 677:18784+8	FC18  CBD9    		SET	WRPROT,C
 678:18792+12	FC1A  1802    		JR	DSTAT6
 679:				;
 680:18804+8	FC1C  CB99    	DSTAT5:	RES	WRPROT,C
 681:18812+10	FC1E  21FCC2  	DSTAT6:	LD	HL,IOBUFF+LEN-4
 682:18822+11	FC21  E5      		PUSH	HL
 683:18833+7	FC22  71      		LD	(HL),C		;STORE DRIVE COMMAND STATUS IN BUFFER
 684:18840+6	FC23  23      		INC	HL
 685:18846+19	FC24  FD7E0D  		LD	A,(IY+HDWSTS)
 686:18865+4	FC27  2F      		CPL
 687:18869+7	FC28  77      		LD	(HL),A		;STORE HARDWARE POOP NEXT
 688:18876+6	FC29  23      		INC	HL
 689:18882+10	FC2A  36E0    		LD	(HL),224	;STORE MAX TIMEOUT AFTER THAT
 690:18892+6	FC2C  23      		INC	HL
 691:18898+13	FC2D  3A2DFF  		LD	A,(TRACK)
 692:18911+7	FC30  77      		LD	(HL),A		;STORE TRACK# AS FOURTH BYTE
 693:18918+10	FC31  E1      		POP	HL
 694:18928+10	FC32  114300  		LD	DE,'C'		;SEND DISK STATUS W/O COMPLIMENT
 695:18938+10	FC35  C36CF7  		JP	SENDBUFF
 696:				;	ret
 697:				;
 698:				;
 699:				;
 700:				;	... DISK FORMAT COMMAND PROCESSOR ...
 701:				;
 702:     -	FC38          	DISKINIT:
 703:18948+17	FC38  CD28FD  		CALL	DRVINDEX	;POINT IY TO DRIVE'S DATA AREA
 704:18965+5+6	FC3B  D8      		RET	C		;EXIT IF NOT A DRIVE IN OUR BOX
 705:				
 706:18970+16	FC3C  2A4FFF  		LD	HL,(PCOUNT)
 707:18986+4	FC3F  7C      		LD	A,H
 708:18990+4	FC40  B5      		OR	L
 709:18994+5+6	FC41  C0      		RET	NZ		;REFUSE TO FORMAT IF SPOOLER ACTIVE
 710:				
 711:18999+17	FC42  CDD3FC  		CALL	HASPARMS
 712:19016+5+6	FC45  C8      		RET	Z		;REFUSE TO FORMAT IF PARAMS NOT SET
 713:				
 714:19021+17	FC46  CD4AFD  		CALL	SENDACK
 715:19038+7	FC49  3E00    		LD	A,TSTRDY
 716:19045+13	FC4B  3298FF  		LD	(DKIOCB+DSKOP),A
 717:19058+14	FC4E  DD2198FF		LD	IX,DKIOCB
 718:19072+17	FC52  CD0FF0  		CALL	DISKV		;CALL DRIVER TO TEST READY/WRITE PROT
 719:19089+17	FC55  CDCBF3  		CALL	STOPTMR		;THEN KILL CTC3 TO STOP DISK TIMER
 720:19106+13	FC58  3A2FFF  		LD	A,(OUTCPY)
 721:19119+20	FC5B  FDCB0556		BIT	DENSTY,(IY+MEDIA)
 722:19139+7+5	FC5F  2807    		JR	Z,DINIT2
 723:				
 724:19146+8	FC61  CBBF    		RES	7,A		;RESET DENSITY BIT OF CONTROL BYTE
 725:19154+10	FC63  2100C2  		LD	HL,IOBUFF+LEN-256
 726:19164+12	FC66  1805    		JR	DINIT3
 727:				;
 728:19176+8	FC68  CBFF    	DINIT2:	SET	7,A		;SET SD/DD BIT IF SINGLE DENSITY
 729:19184+10	FC6A  2180C2  		LD	HL,IOBUFF+LEN-128
 730:     -	FC6D          	DINIT3:	;CALL	HDDISK		;set B\S 16/8Mhz 
 731:19194+13	FC6D  322FFF  		LD	(OUTCPY),A
 732:19207+11	FC70  D330    		OUT	(LATCH),A
 733:19218+11	FC72  E5      		PUSH	HL
 734:19229+16	FC73  22C1FF  		LD	(SEQPTR),HL	;STORE POINTER FOR BAD SECTOR LIST
 735:19245+10	FC76  210100  		LD	HL,1
 736:19255+16	FC79  22BFFF  		LD	(SEQNUM),HL	;RESET BAD SECTOR COUNTER
 737:19271+16	FC7C  2A49FF  		LD	HL,(FMTPTR)
 738:19287+10	FC7F  11B6FF  		LD	DE,FMTSTUFF
 739:19297+10	FC82  010700  		LD	BC,FMTLEN
 740:19307+4	FC85  07      		RLCA
 741:19311+4	FC86  07      		RLCA
 742:19315+7	FC87  E603    		AND	00000011B
 743:19322+7+5	FC89  2804    		JR	Z,SFMT3
 744:19329+11	FC8B  09      	SFMT2:	ADD	HL,BC
 745:19340+4	FC8C  3D      		DEC	A
 746:19344+7+5	FC8D  20FC    		JR	NZ,SFMT2	;INDEX TO PROPER PARAMS FOR DISK TYPE
 747:19351+16+5	FC8F  EDB0    	SFMT3:	LDIR			;THEN COPY PARAMS TO 'FMTSTUFF'
 748:19367+13	FC91  3AA0FF  		LD	A,(DKIOCB+DSKSTS)
 749:19380+7	FC94  E6C0    		AND	11000000B
 750:19387+7+5	FC96  2013    		JR	NZ,DINIT6	;ERROR IF NOT READY OR WRITE PROTECTED
 751:				
 752:19394+19	FC98  FD7E04  		ld	a,(iy+nsides)	;set for SS/DS init
 753:19413+13	FC9B  32BDFF  		ld	(sides),a
 754:19426+19	FC9E  FD7E00  		ld	a,(iy+ntrks)	;set for number of tracks
 755:19445+13	FCA1  32BEFF  		ld	(tracks),a
 756:19458+15	FCA4  FDE5    		PUSH	IY
 757:19473+17	FCA6  CDBEFD  		CALL	FORMAT		;CALL FORMAT SUBROUTINE
 758:19490+14	FCA9  FDE1    		POP	IY
 759:				
 760:19504+10	FCAB  E1      	DINIT6:	POP	HL
 761:19514+17	FCAC  CDE3FA  		CALL	SETSTAT		;UPDATE STATUS AS SPECIFIED BY ACC
 762:19531+7	FCAF  1600    		LD	D,0
 763:19538+17	FCB1  CD6CF7  		CALL	SENDBUFF	;SEND BAD SECTOR DATA FRAME
 764:19555+10	FCB4  C33CF0  		JP	ACTIVON		;THEN RESTART THE DISK TIMER
 765:				;	ret
 766:				;
 767:				;
 768:				;
 769:				;
 770:				;
 771:     -	FCB7          	FMTS:
 772:     -	FCB7  9FFF    		DEFW	DD8N26		;DOUBLE DENSITY 8 INCH
 773:     -	FCB9  E2FF    		DEFW	SKEW17
 774:     -	FCBB  1A      		DEFB	26
 775:     -	FCBC  B028    		DEFW	10416
 776:				
 777:     -	FCBE  35FF    		DEFW	DD5N18		;DOUBLE DENSITY 5 INCH
 778:     -	FCC0  68FF    		DEFW	SKEWDD
 779:     -	FCC2  12      		DEFB	18
 780:     -	FCC3  6A18    		DEFW	6250
 781:				
 782:     -	FCC5  7AFF    		DEFW	SD8N26		;SINGLE DENSITY 8 INCH
 783:     -	FCC7  C8FF    		DEFW	SKEW13
 784:     -	FCC9  1A      		DEFB	26
 785:     -	FCCA  5814    		DEFW	5208
 786:				
 787:     -	FCCC  16FF    		DEFW	SD5N18		;SINGLE DENSITY 5 INCH
 788:     -	FCCE  56FF    		DEFW	SKEWSD
 789:     -	FCD0  12      		DEFB	18
 790:     -	FCD1  350C    		DEFW	3125
 791:				;
 792:				;
 793:				;
 794:				;
 795:     -	FCD3          	HASPARMS:
 796:19565+19	FCD3  FD7E00  		LD	A,(IY+NTRKS)
 797:19584+4	FCD6  B7      		OR	A
 798:19588+5+6	FCD7  C0      		RET	NZ		;EXIT IF PARAMS HAVE BEEN SET
 799:				
 800:19593+16	FCD8  2A96FF  		LD	HL,(OLDPTR)
 801:19609+4	FCDB  7C      		LD	A,H		;IF POINTER IS ZERO THEN NO DRIVE
 802:19613+4	FCDC  B5      		OR	L		; PARAMS HAVE EVER BEEN SET
 803:19617+5+6	FCDD  C8      		RET	Z
 804:				
 805:19622+15	FCDE  FDE5    		PUSH	IY
 806:19637+10	FCE0  D1      		POP	DE
 807:19647+10	FCE1  010C00  		LD	BC,12
 808:19657+16+5	FCE4  EDB0    		LDIR			;COPY BOOT DISK'S PARAMS TO THIS GUY
 809:19673+10	FCE6  C9      		RET
 810:				;
 811:				;
 812:				;
 813:				;
 814:				;	... PERCOM 'N' COMMAND PROCESSOR ...
 815:				;
 816:     -	FCE7          	GETPARAMS:
 817:19683+17	FCE7  CD28FD  		CALL	DRVINDEX	;POINT IY TO DRIVE'S DATA AREA
 818:19700+5+6	FCEA  D8      		RET	C		;EXIT IF NOT A DRIVE IN OUR BOX
 819:				
 820:19705+17	FCEB  CDD3FC  		CALL	HASPARMS
 821:19722+5+6	FCEE  C8      		RET	Z		;EXIT IF DISK PARAMS NOT KNOWN
 822:				
 823:19727+17	FCEF  CD4AFD  		CALL	SENDACK		;SEND 'ACK' FOR COMMAND FRAME
 824:				;	SET	CONFIG,(IY+FLAGS)
 825:19744+15	FCF2  FDE5    		PUSH	IY
 826:19759+10	FCF4  E1      		POP	HL
 827:19769+10	FCF5  11F4C2  		LD	DE,IOBUFF+LEN-12
 828:19779+11	FCF8  D5      		PUSH	DE
 829:19790+10	FCF9  010C00  		LD	BC,12
 830:19800+16+5	FCFC  EDB0    		LDIR			;COPY PARAMS TO OUTPUT BUFFER
 831:19816+10	FCFE  E1      		POP	HL
 832:19826+10	FCFF  114300  		LD	DE,'C'
 833:19836+10	FD02  C36CF7  		JP	SENDBUFF	;SEND 'C' AND PARAMS DATA FRAME
 834:				;	ret
 835:				;
 836:				;
 837:				;
 838:				;	... PERCOM 'O' COMMAND PROCESSOR ...
 839:				;
 840:     -	FD05          	PUTPARAMS:
 841:19846+17	FD05  CD28FD  		CALL	DRVINDEX	;POINT IY TO DRIVE'S DATA AREA
 842:19863+5+6	FD08  D8      		RET	C		;EXIT IF NOT A DRIVE IN OUR BOX
 843:				
 844:19868+17	FD09  CD4AFD  		CALL	SENDACK
 845:19885+17	FD0C  CDB9F7  		CALL	RECVBUFF	;ATTEMPT TO READ DATA FRAME FROM ATARI
 846:19902+5+6	FD0F  C0      		RET	NZ
 847:				
 848:19907+10	FD10  110C00  		LD	DE,12
 849:19917+4	FD13  B7      		OR	A
 850:19921+15	FD14  ED52    		SBC	HL,DE
 851:19936+5+6	FD16  C0      		RET	NZ		;ERROR IF DATA FRAME NOT 12 BYTES
 852:				
 853:19941+17	FD17  CD4AFD  		CALL	SENDACK		;ELSE SEND 'ACK' FOR DATA FRAME
 854:				;	SET	CONFIG,(IY+FLAGS)  ;INDICATE DRIVE IS NOW CONFIGURED
 855:19958+10	FD1A  2100C1  		LD	HL,IOBUFF
 856:19968+15	FD1D  FDE5    		PUSH	IY
 857:19983+10	FD1F  D1      		POP	DE		;POINT DE TO PARAMETERS FOR DRIVE(N)
 858:19993+10	FD20  010C00  		LD	BC,12
 859:20003+16+5	FD23  EDB0    		LDIR			;COPY NEW STUFF IN THE PLACE
 860:20019+10	FD25  C354FD  		JP	SENDCOMP	;SEND 'COMPLETE' BACK TO ATARI
 861:				;	ret
 862:				;
 863:				;
 864:				;
 865:				;	... DATA STRUCTURE FOR DRIVE PARAMETER BLOCKS ...
 866:				;
 867:     -	0000          	NTRKS	EQU	0		;NUMBER OF TRACKS
 868:     -	0001          	STEPRT	EQU	1		;STEP RATE
 869:     -	0002          	NSECS	EQU	2		;SECTORS PER TRACK (HI/LOW)
 870:     -	0004          	NSIDES	EQU	4		;NUMBER OF SIDES
 871:     -	0005          	MEDIA	EQU	5		;MEDIA SIZE AND FORMAT BITS
 872:     -	0006          	SECLEN	EQU	6		;SECTOR LENGTH (HI/LOW)
 873:     -	0008          	DSKBITS	EQU	8		;MISC NAUGHTY BITS
 874:     -	0009          	SPARE0	EQU	9
 875:     -	000A          	SPARE1	EQU	10
 876:     -	000B          	SPARE2	EQU	11
 877:				
 878:     -	000C          	CMDSTS	EQU	12		;COMMAND STATUS
 879:     -	000D          	HDWSTS	EQU	13		;HARDWARE STATUS
 880:				
 881:     -	000E          	FLAGS	EQU	14		;FLAGS BYTE FOR DISK OPERATION
 882:     -	000F          	SPARE3	EQU	15
 883:				;
 884:				;
 885:				;	EQUATES FOR BITS IN 'MEDIA' BYTE
 886:				;
 887:     -	0001          	SIZE	EQU	1		;DISK SIZE (1=EIGHT, 0=FIVE)
 888:     -	0002          	DENSTY	EQU	2		;DENSITY (1=DOUBLE, 0=SINGLE)
 889:				;
 890:				;
 891:				;	EQUATES FOR BITS IN 'DSKBITS' BYTE
 892:				;
 893:     -	0006          	PRESENT	EQU	6		;DRIVE PRESENT (1=PRESENT)
 894:				;
 895:				;
 896:				;	EQUATES FOR BITS IN 'CMDSTS' BYTE
 897:				;
 898:     -	0000          	BADCMD	EQU	0		;BAD COMMAND FRAME BIT
 899:     -	0001          	BADDAT	EQU	1		;BAD DATA FRAME BIT
 900:     -	0002          	BADRW	EQU	2		;BAD READ/WRITE OPERATION BIT
 901:     -	0003          	WRPROT	EQU	3		;WRITE PROTECTED BIT
 902:     -	0004          	ACTIVE	EQU	4		;DRIVE READY INDICATOR BIT
 903:     -	0005          	SEC256	EQU	5		;LONG/SHORT SECTOR BIT
 904:				;
 905:				;
 906:				;	EQUATES FOR BITS IN 'FLAGS' BYTE
 907:				;
 908:     -	0000          	FIRST	EQU	0		;FIRST ACCESS FLAG (0=NOT ACCESSED)
 909:     -	0001          	CONFIG	EQU	1		;DRIVE CONFIGURED BIT (0=UNCONFIGED)
 910:				;
 911:				;
 912:				;
 913:				;
 914:				;
 915:     -	FD28          	DRVINDEX:
 916:20029+13	FD28  3AFBC2  		LD	A,(CFRAME)	;GET DRIVE# FROM COMAND FRAME
 917:20042+7	FD2B  D631    		SUB	'1'
 918:20049+7	FD2D  FE04    		CP	4
 919:20056+4	FD2F  3F      		CCF
 920:20060+5+6	FD30  D8      		RET	C		;EXIT IF NOT DRIVE 1,2,3 OR 4
 921:				
 922:20065+7	FD31  2600    		LD	H,0
 923:20072+4	FD33  6F      		LD	L,A
 924:20076+11	FD34  29      		ADD	HL,HL
 925:20087+11	FD35  29      		ADD	HL,HL
 926:20098+11	FD36  29      		ADD	HL,HL
 927:20109+11	FD37  29      		ADD	HL,HL		;MULTIPLY DRIVE INDEX BY 16
 928:20120+10	FD38  0156FF  		LD	BC,DMATRIX
 929:20130+11	FD3B  09      		ADD	HL,BC		;INDEX TO DRIVE'S PARAMETERS
 930:20141+11	FD3C  E5      		PUSH	HL
 931:20152+14	FD3D  FDE1    		POP	IY		;GET POINTER INTO IY FOR RETURN
 932:20166+20	FD3F  FDCB0876		BIT	PRESENT,(IY+DSKBITS)
 933:20186+4	FD43  37      		SCF
 934:20190+5+6	FD44  C8      		RET	Z		;EXIT IT DRIVE NOT PRESENT
 935:				
 936:20195+13	FD45  3299FF  		LD	(DKIOCB+DSKDRV),A
 937:20208+4	FD48  AF      		XOR	A
 938:20212+10	FD49  C9      		RET
 939:				;
 940:				;
 941:				;
 942:				;
 943:     -	FD4A          	SENDACK:
 944:20222+11	FD4A  DB70    		IN	A,(ATARI)
 945:20233+8	FD4C  CB4F    		BIT	1,A
 946:20241+7+5	FD4E  28FA    		JR	Z,SENDACK
 947:				
 948:20248+7	FD50  3E41    		LD	A,'A'
 949:20255+12	FD52  1802    		JR	SENDCHAR
 950:				;
 951:     -	FD54          	SENDCOMP:
 952:20267+7	FD54  3E43    		LD	A,'C'
 953:     -	FD56          	SENDCHAR:
 954:20274+10	FD56  2101C3  		LD	HL,IOBUFF+LEN+1
 955:20284+7	FD59  77      		LD	(HL),A
 956:20291+7	FD5A  1600    		LD	D,0		;SET FOR TRUE DATA
 957:20298+10	FD5C  C384F7  		JP	XMITBUF		;SEND 1 BYTE BLOCK TO ATARI
 958:				;	ret
 959:				;
 960:				;
 961:				;
 962:				;
 963:				;	... Z80 MEMORY READ COMMAND PROCESSOR ...
 964:				;
 965:     -	FD5F          	Z80READ:
 966:20308+17	FD5F  CD4AFD  		CALL	SENDACK		;SEND 'ACK' FOR COMMAND
 967:20325+17	FD62  CD9CFD  		CALL	ZLENGTH		;GET ZCMD BYTECOUNT INTO BC
 968:20342+10	FD65  2100C3  		LD	HL,IOBUFF+LEN
 969:20352+4	FD68  B7      		OR	A
 970:20356+15	FD69  ED42    		SBC	HL,BC
 971:20371+11	FD6B  E5      		PUSH	HL
 972:20382+4	FD6C  EB      		EX	DE,HL
 973:20386+16	FD6D  2AB2FD  		LD	HL,(MEMPTR)
 974:20402+4	FD70  F3      		DI
 975:20406+16+5	FD71  EDB0    		LDIR			;DO BLOCK MOVE INTO BUFFER
 976:20422+4	FD73  FB      		EI
 977:20426+10	FD74  E1      		POP	HL
 978:20436+10	FD75  114300  		LD	DE,'C'		;SEND DATA W/O INVERSION
 979:20446+10	FD78  C36CF7  		JP	SENDBUFF
 980:				;	ret
 981:				;
 982:				;
 983:				;
 984:				;	... Z80 MEMORY WRITE COMMAND PROCESSOR ...
 985:				;
 986:     -	FD7B          	Z80WRITE:
 987:20456+17	FD7B  CD4AFD  		CALL	SENDACK		;SEND 'ACK' FOR COMMAND FRAME
 988:20473+17	FD7E  CDB9F7  		CALL	RECVBUFF	;ATTEMPT TO READ DATA FRAME FROM ATARI
 989:20490+5+6	FD81  C0      		RET	NZ
 990:				
 991:20495+17	FD82  CD9CFD  		CALL	ZLENGTH		;GET BYTECOUNT FROM CMD FRAME
 992:20512+4	FD85  B7      		OR	A
 993:20516+15	FD86  ED42    		SBC	HL,BC
 994:20531+5+6	FD88  C0      		RET	NZ		;ERROR IF DATA FRAME LENGTH NOT SAME
 995:				
 996:20536+11	FD89  C5      		PUSH	BC
 997:20547+17	FD8A  CD4AFD  		CALL	SENDACK		;ELSE SEND 'ACK' FOR DATA FRAME
 998:20564+10	FD8D  C1      		POP	BC
 999:20574+10	FD8E  2100C1  		LD	HL,IOBUFF
1000:20584+20	FD91  ED5BB2FD		LD	DE,(MEMPTR)
1001:20604+4	FD95  F3      		DI
1002:20608+16+5	FD96  EDB0    		LDIR			;DO BLOCK MOVE INTO BUFFER
1003:20624+4	FD98  FB      		EI
1004:20628+10	FD99  C354FD  		JP	SENDCOMP	;SEND 'COMPLETE' BACK TO ATARI
1005:				;	ret
1006:				;
1007:				;
1008:				;
1009:     -	FD9C          	ZLENGTH:
1010:20638+13	FD9C  3AFDC2  		LD	A,(CFRAME+2)	;GET BYTECOUNT FROM COMMAND FRAME
1011:20651+4	FD9F  4F      		LD	C,A
1012:20655+7	FDA0  0600    		LD	B,0		;LOAD BC WITH BYTECOUNT
1013:20662+4	FDA2  B7      		OR	A
1014:20666+5+6	FDA3  C0      		RET	NZ		;EXIT IF BYTECOUNT NOT=0
1015:				
1016:20671+4	FDA4  04      		INC	B		;ELSE MAKE BC=256
1017:20675+10	FDA5  C9      		RET
1018:				;
1019:				;
1020:				;	... Z80 SET MEMORY POINTER COMMAND PROCESSOR ...
1021:				;
1022:     -	FDA6          	Z80SET:
1023:20685+17	FDA6  CD4AFD  		CALL	SENDACK
1024:20702+16	FDA9  2AFDC2  		LD	HL,(CFRAME+2)	;SET MEMORY POINTER FROM COMMAND
1025:20718+16	FDAC  22B2FD  		LD	(MEMPTR),HL
1026:20734+10	FDAF  C354FD  		JP	SENDCOMP
1027:				;	ret
1028:				;
1029:				;
1030:     -	FDB2  0000    	MEMPTR:	DEFW	0		;POINTER FOR MEMORY READ/WRITE
1031:				;
1032:				;
1033:				;	... Z80 GOTO MEMORY LOCATION COMMAND PROCESSOR ...
1034:				;
1035:     -	FDB4          	Z80GOTO:
1036:20744+17	FDB4  CD4AFD  		CALL	SENDACK
1037:20761+17	FDB7  CD54FD  		CALL	SENDCOMP
1038:20778+16	FDBA  2AFDC2  		LD	HL,(CFRAME+2)
1039:20794+4	FDBD  E9      		jp	(hl)		;execute routine @hl
1040:				;
1041:				;
1042:				;
1043:				;
**** ..\src\ROM.MAC ****
  49:					INCLUDE	FORMAT.MAC
**** ..\src\FORMAT.MAC ****
   1:					;PAGE
   2:				;****************************************************************
   3:				;*								*
   4:				;*								*
   5:				;****************************************************************
   6:				;
   7:				;	... DISKETTE INITIALIZATION ROUTINE ...
   8:				;
   9:				;	'IOBUFF' UTILIZATION IN FORMAT FUNCTION:
  10:				;
  11:				;	|---------------|  IOBUFF
  12:				;	|		|
  13:				;	| BAD SEC NUMS	|	STARTS @ LEN-(128+1) OR LEN-(256+1)
  14:				;	|		|
  15:				;	|---------------|  +LEN
  16:				;	|		|
  17:				;	|  WRTTRK CODE  |	VARIABLE LENGTH HALT/NMI/OUTI ROUTINE
  18:				;	|		|
  19:				;	|---------------|  +N
  20:				;	|		|
  21:				;	|  TRACK IMAGE  |	POINTED TO BY 'TRKPTR'
  22:				;	|		|
  23:				;	|		|  +10200
  24:				;
  25:				;
  26:				;
  27:     -	FDBE          	FORMAT:
  28:20798+4	FDBE  AF      		XOR	A
  29:20802+11	FDBF  D356    		OUT	(INDXSET),A	;SET FLIPFLOP FOR NORMAL INDEX PULSES
  30:20813+4	FDC1  3C      		INC	A
  31:20817+11	FDC2  D354    		OUT	(INDXCLR),A
  32:20828+7	FDC4  3E0B    		LD	A,RSTCMD+HLOAD+STEPRATE
  33:20835+17	FDC6  CD6BF3  		CALL	TYP1CMD		;ISSUE SLOW RESTORE COMMAND
  34:20852+7	FDC9  EE04    		XOR	00000100B	;FLIP TK0 STATUS BIT
  35:20859+7	FDCB  E684    		AND	10000100B
  36:20866+10	FDCD  C29AFE  		JP	NZ,FORMX	;EXIT IF TRACK ZERO NOT INDICATED
  37:				
  38:20876+10	FDD0  2100C3  		LD	HL,IOBUFF+LEN	;PREP TO BUILD IN-LINE CODE FOR FORMAT
  39:20886+13	FDD3  3ABCFF  		LD	A,(TRKSIZ+1)
  40:20899+4	FDD6  3C      		INC	A
  41:20903+4	FDD7  47      		LD	B,A		;LOAD B WITH # OF PAGES/TRACK PLUS ONE
  42:20907+10	FDD8  3676    	FORM2:	LD	(HL),076H	;STORE 'HALT' OPCODE
  43:20917+6	FDDA  23      		INC	HL
  44:20923+10	FDDB  36ED    		LD	(HL),0EDH	;STORE 'OUTI' OPCODE BYTE #1
  45:20933+6	FDDD  23      		INC	HL
  46:20939+10	FDDE  36A3    		LD	(HL),0A3H	;STORE 'OUTI' OPCODE BYTE #2
  47:20949+6	FDE0  23      		INC	HL
  48:20955+10	FDE1  3620    		LD	(HL),020H	;STORE 'JRNZ' OPCODE BYTE
  49:20965+6	FDE3  23      		INC	HL
  50:20971+10	FDE4  36FB    		LD	(HL),-5		;STORE JUMP OFFSET FOR LOOP
  51:20981+6	FDE6  23      		INC	HL
  52:20987+8+5	FDE7  10EF    		DJNZ	FORM2
  53:20995+7	FDE9  3EC9    		LD	A,0C9H
  54:21002+7	FDEB  77      		LD	(HL),A		;STORE 'RET' OPCODE AT END
  55:21009+13	FDEC  326600  		LD	(0066H),A	;ALSO PLUNK ONE DOWN AT NMI VECTOR
  56:21022+6	FDEF  23      		INC	HL
  57:21028+16	FDF0  22C3FF  		LD	(TRKPTR),HL	;SAVE ADDRESS TO BEGIN TRACK IMAGE
  58:				
  59:21044+4	FDF3  AF      		XOR	A
  60:21048+13	FDF4  322DFF  	FORM3:	LD	(TRACK),A	;A HOLDS NEXT TRACK NUMBER
  61:21061+4	FDF7  B7      		OR	A
  62:21065+7+5	FDF8  2805    		JR	Z,FORM3A	;SKIP STEP-IN IF ON TRACK ZERO
  63:21072+7	FDFA  3E4B    		LD	A,STEPIN+HLOAD+STEPRATE
  64:21079+17	FDFC  CD6BF3  		CALL	TYP1CMD		;STEP TO NEXT TRACK
  65:21096+20	FDFF  DD2AB6FF	FORM3A:	LD	IX,(FRMPTR)	;GET SELECTED FORMAT DATA POINTER
  66:21116+20	FE03  FD2AB8FF		LD	IY,(SKWPTR)	;GET SELECTED SKEW TABLE POINTER
  67:21136+13	FE07  3ABDFF  		ld	a,(sides)
  68:21149+4	FE0A  1F      		rra
  69:21153+13	FE0B  3A2FFF  		ld	a,(outcpy)
  70:21166+7+5	FE0E  3007    		jr	nc,form3b	;jump if not formatting both sides
  71:21173+7	FE10  EE20    		xor	00100000b
  72:21180+13	FE12  322FFF  		ld	(outcpy),a	;else flip side select bit in latch
  73:21193+11	FE15  D330    		out	(latch),a
  74:21204+17	FE17  CDA4FE  	form3b:	call	build
  75:21221+13	FE1A  3A2DFF  		LD	A,(TRACK)
  76:21234+11	FE1D  D341    		OUT	(TRKREG),A
  77:21245+16	FE1F  2AC3FF  		LD	HL,(TRKPTR)	;POINT TO START OF TRACK IMAGE
  78:21261+4	FE22  F3      		DI
  79:21265+7	FE23  3EF4    		LD	A,WRTKDLY	;write track + 30ms settle delay
  80:21272+17	FE25  CD89F3  		CALL	CMDOUT		;ISSUE WRITE TRACK COMMAND
  81:21289+13	FE28  3ABBFF  		LD	A,(TRKSIZ)
  82:21302+4	FE2B  47      		LD	B,A		;LOAD B WITH TRACK SIZE MOD 256
  83:21306+7	FE2C  0E43    		LD	C,DATREG
  84:21313+17	FE2E  CD00C3  		CALL	IOBUFF+LEN	;EXECUTE WRITE TRACK FROM BUFFER
  85:21330+4	FE31  FB      		EI
  86:21334+11	FE32  DB40    	FORM4:	IN	A,(STSREG)
  87:21345+8	FE34  CB47    		BIT	0,A
  88:21353+7+5	FE36  20FA    		JR	NZ,FORM4
  89:21360+20	FE38  ED5BBFFF		LD	DE,(SEQNUM)	;LOAD DE WITH SEQUENCE NUMBER
  90:21380+16	FE3C  2AC1FF  		LD	HL,(SEQPTR)	; AND HL WITH CACA TABLE POINTER
  91:21396+13	FE3F  3ABAFF  		LD	A,(NSECTS)
  92:21409+4	FE42  47      		LD	B,A
  93:21413+20	FE43  DD2AB8FF		LD	IX,(SKWPTR)	;POINT TO SECTOR TABLE
  94:21433+19	FE47  DD7E00  	FORM5:	LD	A,(IX)
  95:21452+10	FE4A  DD23    		INC	IX
  96:21462+11	FE4C  D342    		OUT	(SECREG),A
  97:21473+13	FE4E  3A2FFF  		LD	A,(OUTCPY)
  98:21486+7	FE51  E620    		AND	00100000b
  99:21493+7	FE53  3E88    		LD	A,RDCMD		;determine if reading side 0 or 1
 100:21500+7+5	FE55  2802    		JR	Z,FORM51
 101:21507+8	FE57  CBCF    		SET	1,A		;WD1772 no side-no in cmd (I leave it there, doesn't seem to matter)
 102:21515+17	FE59  CD62F3  	FORM51:	CALL	TYP2CMD		;read sector discarding the data
 103:21532+7	FE5C  E698    		AND	10011000B	;TEST FOR READY/RNF/CRC ERROR INDICATION
 104:21539+7+5	FE5E  2814    		JR	Z,FORM6		;JUMP IF SECTOR READ OK
 105:				
 106:21546+7	FE60  E680    		AND	10000000B
 107:21553+7+5	FE62  2036    		JR	NZ,FORMX	;QUIT TRYING IF NOT-READY ERROR
 108:21560+11	FE64  E5      		PUSH	HL
 109:21571+11	FE65  C5      		PUSH	BC
 110:21582+10	FE66  01FDC2  		LD	BC,IOBUFF+LEN-3
 111:21592+4	FE69  B7      		OR	A
 112:21596+15	FE6A  ED42    		SBC	HL,BC		;TEST IF CA-CA SECTOR LIST IS FULL
 113:21611+10	FE6C  C1      		POP	BC
 114:21621+10	FE6D  E1      		POP	HL
 115:21631+7+5	FE6E  3004    		JR	NC,FORM6	;SKIP IF NO MORE ROOM
 116:21638+7	FE70  73      		LD	(HL),E
 117:21645+6	FE71  23      		INC	HL
 118:21651+7	FE72  72      		LD	(HL),D
 119:21658+6	FE73  23      		INC	HL		;STORE BAD SECTOR NUMBER
 120:21664+6	FE74  13      	FORM6:	INC	DE
 121:21670+8+5	FE75  10D0    		DJNZ	FORM5
 122:21678+20	FE77  ED53BFFF		LD	(SEQNUM),DE	;STORE UPDATED ERROR TRACE STUFF
 123:21698+16	FE7B  22C1FF  		LD	(SEQPTR),HL
 124:21714+13	FE7E  3A2FFF  		ld	a,(outcpy)
 125:21727+7	FE81  E620    		and	00100000b
 126:21734+10	FE83  C2FFFD  		jp	nz,form3a	;go back and do side 0 if on side 1 now
 127:21744+13	FE86  3A2DFF  		LD	A,(TRACK)
 128:21757+4	FE89  3C      		INC	A
 129:21761+10	FE8A  21BEFF  		ld	hl,tracks
 130:21771+7	FE8D  BE      		CP	(HL)
 131:21778+10	FE8E  DAF4FD  		JP	C,FORM3		;FORMAT UP TO LAST TRACK ON DISK
 132:				
 133:21788+16	FE91  2AC1FF  		LD	HL,(SEQPTR)
 134:21804+10	FE94  36FF    		LD	(HL),255	;STORE TERMINATOR ON CA-CA BUFFER
 135:21814+6	FE96  23      		INC	HL
 136:21820+10	FE97  36FF    		LD	(HL),255
 137:21830+4	FE99  AF      		XOR	A		;INDICATE FORMAT COMPLETED
 138:21834+11	FE9A  F5      	FORMX:	PUSH	AF
 139:21845+7	FE9B  3EFF    		LD	A,255
 140:21852+13	FE9D  322DFF  		LD	(TRACK),A
 141:21865+11	FEA0  D341    		OUT	(TRKREG),A	;FORCE DISK HANDLER TO RECALIBRATE
 142:21876+10	FEA2  F1      		POP	AF
 143:21886+10	FEA3  C9      		RET			;RETURN COMPLETION STATUS IN A
 144:				;
 145:				;
 146:				;
 147:				;
 148:				;	... SUBROUTINE TO BUILD IMAGE OF FORMATTED TRACK ...
 149:				;
 150:				;	PARAMETERS ARE:  IX ....... (POINTER TO FORMAT PARAMETERS)
 151:				;			 IY ....... (TABLE OF SECTOR NUMBERS)
 152:				;			 TRKPTR ... (POINTER TO TRACK DATA BUFFER)
 153:				;			 TRACK .... (TRACK NUMBER)
 154:				;			 NSECTS ... (NUMBER OF SECTORS)
 155:				;			 sides .... (copy of 'nsides' param)
 156:				;
 157:     -	FEA4          	BUILD:
 158:21896+13	FEA4  3ABAFF  		LD	A,(NSECTS)
 159:21909+4	FEA7  4F      		LD	C,A
 160:21913+15	FEA8  DDE5    		PUSH	IX
 161:21928+10	FEAA  E1      		POP	HL
 162:21938+7	FEAB  46      		LD	B,(HL)		;LOAD B WITH # OF FIELDS IN PREAMBLE
 163:21945+6	FEAC  23      		INC	HL
 164:21951+20	FEAD  ED5BC3FF		LD	DE,(TRKPTR)
 165:21971+17	FEB1  CD0BFF  	BUILD1:	CALL	INSERT		;INSERT FIELDS OF PREAMBLE
 166:21988+8+5	FEB4  10FB    		DJNZ	BUILD1
 167:				
 168:21996+7	FEB6  46      		LD	B,(HL)		;LOAD B WITH NUMBER OF ITEMS IN SECTOR
 169:22003+6	FEB7  23      		INC	HL
 170:22009+11	FEB8  E5      		PUSH	HL
 171:22020+14	FEB9  DDE1    		POP	IX		;IX POINTS TO START OF SECTOR POOP
 172:22034+13	FEBB  3A2DFF  	BUILD3:	LD	A,(TRACK)
 173:22047+19	FEBE  DD7707  		LD	(IX+7),A	;STORE TRACK# FOR TRACK BEING FORMATTED
 174:22066+13	FEC1  3A2FFF  		ld	a,(outcpy)
 175:22079+7	FEC4  E620    		and	00100000b
 176:22086+7	FEC6  3E00    		ld	a,0
 177:22093+7+5	FEC8  2801    		jr	z,bild31	;jump if formatting side 0
 178:22100+4	FECA  3C      		inc	a
 179:22104+19	FECB  DD7709  	bild31:	ld	(ix+9),a	;store side# in id
 180:22123+19	FECE  FD7E00  		LD	A,(IY)
 181:22142+10	FED1  FD23    		INC	IY
 182:22152+19	FED3  DD770B  		LD	(IX+11),A	;STORE SECTOR# INTO FORMAT CONSTANTS
 183:				
 184:22171+15	FED6  DDE5    		PUSH	IX
 185:22186+10	FED8  E1      		POP	HL		;POINT HL TO SECTOR POOP
 186:22196+11	FED9  C5      		PUSH	BC
 187:22207+17	FEDA  CD0BFF  	BUILD4:	CALL	INSERT
 188:22224+8+5	FEDD  10FB    		DJNZ	BUILD4		;INSERT ITEMS UP TO SECTOR DATA FIELD
 189:				
 190:22232+19	FEDF  DD7E0D  		LD	A,(IX+13)
 191:22251+17	FEE2  CDCDFB  		call	getsize		;compute sector size in bytes
 192:22268+7	FEE5  3EFF    	build6:	ld	a,0ffh
 193:22275+7	FEE7  12      		ld	(de),a		;fill sector data with ff's
 194:22282+6	FEE8  13      		INC	DE
 195:22288+6	FEE9  0B      		DEC	BC		;REPEAT TILL SECTOR IMAGE IS FILLED
 196:22294+4	FEEA  78      		LD	A,B
 197:22298+4	FEEB  B1      		OR	C
 198:22302+7+5	FEEC  20F7    		JR	NZ,BUILD6
 199:				
 200:22309+7	FEEE  46      		LD	B,(HL)		;GET #FIELDS IN POST-SECTOR STUFF
 201:22316+6	FEEF  23      		INC	HL
 202:22322+17	FEF0  CD0BFF  	BUILD7:	CALL	INSERT		;INSERT FIELDS UP TO GAP 3
 203:22339+8+5	FEF3  10FB    		DJNZ	BUILD7
 204:22347+10	FEF5  C1      		POP	BC
 205:				
 206:22357+4	FEF6  0D      		DEC	C
 207:22361+7+5	FEF7  20C2    		JR	NZ,BUILD3
 208:				
 209:22368+16	FEF9  2AC3FF  		LD	HL,(TRKPTR)
 210:22384+10	FEFC  01D827  		LD	BC,10200
 211:22394+11	FEFF  09      		ADD	HL,BC		;COMPUTE END OF LONGEST TRACK IMAGE
 212:22405+15	FF00  ED52    		SBC	HL,DE		;COMPUTE BYTES NECESSARY TO GET THERE
 213:22420+4	FF02  44      		LD	B,H
 214:22424+4	FF03  4D      		LD	C,L
 215:22428+4	FF04  62      		LD	H,D
 216:22432+4	FF05  6B      		LD	L,E
 217:22436+6	FF06  13      		INC	DE
 218:22442+7	FF07  77      		LD	(HL),A
 219:22449+16+5	FF08  EDB0    		LDIR			;FILL REST OF BUFFER
 220:22465+10	FF0A  C9      		RET
 221:				;
 222:				;
 223:				;
 224:22475+11	FF0B  C5      	INSERT:	PUSH	BC
 225:22486+7	FF0C  46      		LD	B,(HL)
 226:22493+6	FF0D  23      		INC	HL
 227:22499+7	FF0E  7E      		LD	A,(HL)
 228:22506+6	FF0F  23      		INC	HL
 229:22512+7	FF10  12      	INS2:	LD	(DE),A
 230:22519+6	FF11  13      		INC	DE
 231:22525+8+5	FF12  10FC    		DJNZ	INS2
 232:22533+10	FF14  C1      		POP	BC
 233:22543+10	FF15  C9      		RET
 234:				;
 235:				;
 236:				;
 237:				;
 238:				;	... DISK FORMAT DATA TABLES FOR 5/8 DD/SD STANDARDS ...
 239:				;
 240:				;
 241:     -	FF16  01      	SD5N18:	DEFB	1
 242:     -	FF17  10FF    		DEFB	16,0FFH
 243:				
 244:     -	FF19  0B      		DEFB	11
 245:     -	FF1A  0300    		DEFB	3,00H		;GAP 3 (DONE AS 2 FIELDS TO MAKE
 246:     -	FF1C  0300    		DEFB	3,00H		; ID FIELD COME OUT IN RIGHT LOCATION)
 247:     -	FF1E  01FE    		DEFB	1,0FEH		;ID ADDRESS MARK
 248:     -	FF20  0100    		DEFB	1,00H		;TRACK
 249:     -	FF22  0100    		DEFB	1,00H		;SIDE
 250:     -	FF24  0100    		DEFB	1,00H		;SECTOR
 251:     -	FF26  0100    		DEFB	1,00H		;LENGTH
 252:     -	FF28  01F7    		DEFB	1,0F7H		;GENERATE CRC
 253:     -	FF2A  0BFF    		DEFB	11,0FFH		;GAP2
 254:     -	FF2C  0600    		DEFB	6,00H		;GAP2
 255:     -	FF2E  01FB    		DEFB	1,0FBH		;DATA ADDRESS MARK
 256:				
 257:     -	FF30  02      		DEFB	2
 258:     -	FF31  01F7    		DEFB	1,0F7H		;GENERATE CRC BYTES
 259:     -	FF33  09FF    		DEFB	9,0FFH		;GAP 3
 260:				;
 261:				;
 262:				;
 263:				;
 264:				;
 265:     -	FF35  01      	DD5N18:	DEFB	1
 266:     -	FF36  204E    		DEFB	32,4EH		;GAP 1
 267:				
 268:     -	FF38  0C      		DEFB	12
 269:     -	FF39  0C00    		DEFB	12,00H		;SECOND PART OF GAP 3
 270:     -	FF3B  03F5    		DEFB	3,0F5H		;GENERATE SYNC=A1 HEX
 271:     -	FF3D  01FE    		DEFB	1,0FEH		;GENERATE ID ADDRESS MARK
 272:     -	FF3F  0100    		DEFB	1,0		;TRACK#
 273:     -	FF41  0100    		DEFB	1,00000000B	;SIDE
 274:     -	FF43  0100    		DEFB	1,0		;SECTOR#
 275:     -	FF45  0101    		DEFB	1,00000001B	;LENGTH
 276:     -	FF47  01F7    		DEFB	1,0F7H		;GENERATE CRC
 277:     -	FF49  164E    		DEFB	22,4EH		;FIRST PART OF GAP 2
 278:     -	FF4B  0C00    		DEFB	12,00H		;SECOND PART OF GAP 2
 279:     -	FF4D  03F5    		DEFB	3,0F5H		;GENERATE SYNC=A1 HEX
 280:     -	FF4F  01FB    		DEFB	1,0FBH		;GENERATE DATA ADDRESS MARK
 281:				
 282:     -	FF51  02      		DEFB	2
 283:     -	FF52  01F7    		DEFB	1,0F7H		;GENERATE CRC BYTES
 284:     -	FF54  104E    		DEFB	16,4EH		;FIRST PART OF GAP 3
 285:				;
 286:				;
 287:				;
 288:     -	FF56  12100E0C	SKEWSD:	DEFB	18,16,14,12,10,8,6,4,2
	              0A080604
	              02
 289:     -	FF5F  110F0D0B		DEFB	17,15,13,11,9,7,5,3,1
	              09070503
	              01
 290:				;
 291:     -	FF68  01070D  	SKEWDD:	DEFB	1,7,13
 292:     -	FF6B  060C12  		DEFB	6,12,18
 293:     -	FF6E  050B11  		DEFB	5,11,17
 294:     -	FF71  040A10  		DEFB	4,10,16
 295:     -	FF74  03090F  		DEFB	3,9,15
 296:     -	FF77  02080E  		DEFB	2,8,14
 297:				;
 298:				;
 299:				;
 300:     -	FF7A  04      	SD8N26:	DEFB	4		;PREAMBLE FIELD
 301:     -	FF7B  28FF    		DEFB	40,0FFH		;GAP 4
 302:     -	FF7D  0600    		DEFB	6,00
 303:     -	FF7F  01FC    		DEFB	1,0FCH		;INDEX ADDRESS MARK
 304:     -	FF81  1AFF    		DEFB	26,0FFH
 305:				
 306:     -	FF83  0B      		DEFB	11
 307:     -	FF84  0300    		DEFB	3,00H		;GAP 3 (DONE AS 2 FIELDS)
 308:     -	FF86  0300    		DEFB	3,00H		;
 309:     -	FF88  01FE    		DEFB	1,0FEH		;ID ADDRESS MARK
 310:     -	FF8A  0100    		DEFB	1,00H		;TRACK
 311:     -	FF8C  0100    		DEFB	1,00H		;SIDE
 312:     -	FF8E  0100    		DEFB	1,00H		;SECTOR
 313:     -	FF90  0100    		DEFB	1,00H		;LENGTH
 314:     -	FF92  01F7    		DEFB	1,0F7H		;GENERATE CRC
 315:     -	FF94  0BFF    		DEFB	11,0FFH		;GAP2
 316:     -	FF96  0600    		DEFB	6,00H		;GAP2
 317:     -	FF98  01FB    		DEFB	1,0FBH		;DATA ADDRESS MARK
 318:				
 319:     -	FF9A  02      		DEFB	2
 320:     -	FF9B  01F7    		DEFB	1,0F7H		;GENERATE CRC BYTES
 321:     -	FF9D  1BFF    		DEFB	27,0FFH		;GAP 3
 322:				;
 323:				;
 324:				;
 325:     -	FF9F  05      	DD8N26:	DEFB	5
 326:     -	FFA0  504E    		DEFB	80,4EH		;POST-INDEX GAP
 327:     -	FFA2  0C00    		DEFB	12,00H		;INDEX SYNC
 328:     -	FFA4  03F6    		DEFB	3,0F6H		;GENERATE SYNC=C1 HEX
 329:     -	FFA6  01FC    		DEFB	1,0FCH		;GENERATE INDEX ADDRESS MARK
 330:     -	FFA8  324E    		DEFB	50,4EH		;GAP 1
 331:				
 332:     -	FFAA  0C      		DEFB	12
 333:     -	FFAB  0C00    		DEFB	12,00H		;SECOND PART OF GAP 3
 334:     -	FFAD  03F5    		DEFB	3,0F5H		;GENERATE SYNC=A1 HEX
 335:     -	FFAF  01FE    		DEFB	1,0FEH		;GENERATE ID ADDRESS MARK
 336:     -	FFB1  0100    		DEFB	1,0		;TRACK#
 337:     -	FFB3  0100    		DEFB	1,00000000B	;SIDE
 338:     -	FFB5  0100    		DEFB	1,0		;SECTOR#
 339:     -	FFB7  0101    		DEFB	1,00000001B	;LENGTH
 340:     -	FFB9  01F7    		DEFB	1,0F7H		;GENERATE CRC
 341:     -	FFBB  164E    		DEFB	22,4EH		;FIRST PART OF GAP 2
 342:     -	FFBD  0C00    		DEFB	12,00H		;SECOND PART OF GAP 2
 343:     -	FFBF  03F5    		DEFB	3,0F5H		;GENERATE SYNC=A1 HEX
 344:     -	FFC1  01FB    		DEFB	1,0FBH		;GENERATE DATA ADDRESS MARK
 345:				
 346:     -	FFC3  02      		DEFB	2
 347:     -	FFC4  01F7    		DEFB	1,0F7H		;GENERATE CRC BYTES
 348:     -	FFC6  354E    		DEFB	53,4EH		;FIRST PART OF GAP 3
 349:				;
 350:				;
 351:				;
 352:     -	FFC8  010E0310	SKEW13:	DEFB	1,14,3,16,5,18,7,20,9,22,11,24,13,26
	              05120714
	              09160B18
	              0D1A
 353:     -	FFD6  020F0411		DEFB	2,15,4,17,6,19,8,21,10,23,12,25
	              06130815
	              0A170C19
 354:				;
 355:				;
 356:     -	FFE2  0112091A	SKEW17:	DEFB	1,18,9,26,17,8,25,16,7,24,15,6,23
	              11081910
	              07180F06
	              17
 357:     -	FFEF  0E05160D		DEFB	14,5,22,13,4,21,12,3,20,11,2,19,10
	              04150C03
	              140B0213
	              0A
 358:				;
 359:				;
**** ..\src\ROM.MAC ****
  50:				;
  51:				;
  52:				;
  53:     -	148F          		.DEPHASE
  54:     -	0FFC          	MONSIZE	EQU	$-MONCOPY
  55:				;
  56:				;
  57:     -	148F          	varcopy	equ	$
  58:     -	FF20          		.phase	0ff00h+32
  59:     -	FF00          	ram	equ	$-32		;put ram on start of 256 byte page
  60:     -	FF00          	keybuf	equ	ram		;16 byte keyboard input fifo
  61:     -	FF10          	ctcvec	equ	ram+16	;8 word interrupt vector table
  62:					INCLUDE	GLOBAL.MAC	;PUT GLOBAL VARIABLES AT TOP OF RAM
**** ..\src\GLOBAL.MAC ****
   1:				;********************************************************
   2:				;*							*
   3:				;*	GLOBAL VARIABLES FOR ATARI Z80 ROM		*
   4:				;*							*
   5:				;********************************************************
   6:				;
   7:     -	FF20          	glbvars	equ	$
   8:				;
   9:				;	... GLOBAL VARIABLES FOR PHYSICAL DISK HANDLER ...
  10:				;
  11:     -	FF20  FFFFFFFF	DRVTAB:	DEFB	255,255,255,255	;HEAD POSITIONS FOR 4 DRIVES
  12:     -	FF24  00000000		DEFB	0,0,0,0		;DENSITY/TYPE/SELECT BITS FOR 4 DRIVES
  13:     -	FF28  10101010	RATES:	DEFB	16,16,16,16	;SETTLING DELAYS / STEP RATES TABLE
  14:     -	FF2C  00      	UNIT:	DEFB	0		;CURRENTLY SELECTED DISK#
  15:     -	FF2D  FF      	TRACK:	DEFB	255		;TRACK POSITION OF SELECTED DRIVE
  16:     -	FF2E  01      	DRVOFF:	DEFB	1		;DRIVES-OFF FLAG FROM DISK TIMER IRQ
  17:     -	FF2F  00      	OUTCPY:	DEFB	00000000B	;COPY OF DISK CONTROL LATCH
  18:     -	FF30  0000    	PERIOD:	DEFW	0		;DISK SPIN PERIOD
  19:     -	FF32  32      	HLDTIM:	DEFB	50		;HEAD LOAD DELAY
  20:     -	FF33  0A      	RWMAX:	DEFB	10		;MAX NUMBER OF READ/WRITE RETRIES
  21:     -	FF34  00000000		DEFB	0,0,0,0		;ROOM FOR EXPANSION
  22:				;
  23:				;
  24:				;	... GLOBAL VARIABLES FOR ATARI HANDLER ...
  25:				;
  26:     -	FF38  21F9    	IDPTR:	DEFW	IDTAB		;POINTER TO DEVICE ID TABLE
  27:     -	FF3A  BEF8    	FSMVEC:	DEFW	PWRWAIT		;POINTER FOR ATARI TASK STATE MACHINE
  28:     -	FF3C  E1F8    	EXTVEC:	DEFW	DUMMY		;POINTER FOR EXTRA TASK PROCESSOR
  29:     -	FF3E  020D0A00	NEWLIN:	DEFB	2,CR,LF,0,0	;PRINTER NEWLINE CHARACTERS
	              00
  30:     -	FF43  00003C00	PSMSG:	DEFB	0,0,60,0	;PRINTER STATUS FRAME
  31:     -	FF47  80      	PMASKS:	DEFB	10000000B	;MASK ALL BITS BUT 'BUSY'
  32:     -	FF48  00      		DEFB	00000000B		;COMPARE TO ZERO FOR READY
  33:     -	FF49  B7FC    	FMTPTR:	DEFW	FMTS		;POINTER TO STANDARD FORMAT TABLES
  34:     -	FF4B  00C5    	PBASE:	DEFW	IOBUFF+(2*LEN)	;PUT PRINT BUFFER AFTER HERE
  35:     -	FF4D  FF0F    	PSIZE:	DEFW	4095		;MAX BUFFER INDEX OFFSET
  36:				
  37:     -	002F          	glbsize	equ	$-glbvars		;length of initialized variables
  38:     -	FF4F  73      	        DEFB    73h			; **** Exists in original ROM? ****
  39:				;
  40:				;
  41:				;	*** UNINITIALIZED SCRATCH VARIABLES COME AFTER HERE ***
  42:				;
  43:     -	FF4F          	PCOUNT:	EQU $-1				;BYTECOUNT FOR BUFFER
  44:     -	FF51          	PINP:	EQU PCOUNT+2		;INPUT OFFSET
  45:     -	FF53          	POUT:	EQU PINP+2			;OUTPUT OFFSET
  46:     -	FF55          	CMDFLG:	EQU POUT+2			;COMMAND FRAME READY FLAG FROM IRQ
  47:     -	FF56          	DMATRIX: EQU CMDFLG+1    	;DRIVE POOP TABLES
  48:     -	FF96          	OLDPTR:	EQU DMATRIX+64		;POINTER TO FIRST DRIVE ACCESSED
  49:     -	FF98          	DKIOCB:	EQU OLDPTR+2		;DISK I/O COMMAND BLOCK
  50:     -	FFA8          	DRWCMD:	EQU DKIOCB+16		;R/W COMMAND FROM ATARI TO 'DISKIO'
  51:     -	FFA9          	LOGSIZ:	EQU DRWCMD+1		;LOGICAL SECTOR LENGTH FOR XFER
  52:     -	FFAB          	IDBUF:	EQU	LOGSIZ+2		;BUFFER FOR ID MARK READS
  53:     -	FFB3          	IOPTR:	EQU IDBUF+8			;ATARI BLOCK INPUT POINTER
  54:     -	FFB5          	VFLAG:	EQU IOPTR+2			;VERIFY FLAG FOR DISK WRITES
  55:				
  56:				;
  57:				;
  58:				;	... VARIABLES FOR DISK FORMAT FUNCTION ...
  59:				;
  60:     -	FFB6          	FMTSTUFF	EQU	VFLAG+1
  61:     -	FFB6          	FRMPTR:	EQU VFLAG+1			;POINTER TO FORMAT DATA TABLE
  62:     -	FFB8          	SKWPTR:	EQU FRMPTR+2		;POINTER TO SKEW TABLE
  63:     -	FFBA          	NSECTS:	EQU SKWPTR+2		;NUMBER OF SECTORS
  64:     -	FFBB          	TRKSIZ:	EQU NSECTS+1		;TRACK LENGTH IN BYTES
  65:     -	0007          	FMTLEN	EQU	(TRKSIZ+2)-FMTSTUFF
  66:				
  67:     -	FFBD          	sides:	EQU TRKSIZ+2		;copy of 'nsides' for drive#
  68:     -	FFBE          	tracks:	EQU sides+1			;copy of 'ntrks' for drive#
  69:     -	FFBF          	SEQNUM:	EQU tracks+1		;TEMP SECTOR SEQUENCE NUMBER
  70:     -	FFC1          	SEQPTR:	EQU SEQNUM+2		;TEMP ERROR LOG TABLE POINTER
  71:     -	FFC3          	TRKPTR:	EQU SEQPTR+2		;POINTER TO START OF TRACK IMAGE
  72:				
  73:				;
  74:				;	... LOCAL VARIABLES FOR DISK HANDLER ...
  75:				;
  76:     -	FFC5          	CMDBYT:	EQU TRKPTR+2		;COMMAND BYTE FOR READS/WRITES
  77:     -	FFC6          	RWTRY:	EQU	CMDBYT+1		;READ/WRITE RETRY COUNT
  78:     -	FFC7          	TICKS:	EQU	RWTRY+1			;FREE RUNNING MILISECOND COUNTER
  79:     -	FFC9          	DRVTMR:	EQU TICKS+2			;DISK ACTIVITY TIMER
  80:				;
  81:				;
  82:				;
  83:				;
  84:     -	C100          	IOBUFF	EQU	0C100H		;ATARI I/O BUFFER
  85:     -	0200          	LEN	EQU	512
  86:				;
  87:     -	C300          	TRKBUF	EQU	IOBUFF+LEN	;TRACK BUFFER FOR READS
  88:				;
**** ..\src\ROM.MAC ****
  63:				;
  64:     -	14BF          		.DEPHASE
  65:				;
  66:				;
  67:     -	14BF          	LAST	EQU	$
  68:				
  69:     -	0000          		IF SALLYBUILD = 0
  77:					ENDIF
  78:				
  79:     -	14BF          	END



Statistics:

     5	passes
     0	jr promotions
   537	symbols
  5311	bytes



Symbol Table:

ACTIVE         =04        4
ACTIVON         F03C      61500
ACTIVTY         F050      61520
ACTV2           F064      61540
ASCHEX          F49A      62618
ATARI          =70        112
ATROUT         =50        80
BADCMD         =00        0
BADDAT         =01        1
BADRW          =02        2
BANKSW         =52        82
BOOT            F476      62582
BOOTCB          F491      62609
BUILD1          FEB1      65201
BUILD3          FEBB      65211
BUILD4          FEDA      65242
BUILD7          FEF0      65264
CALLHL          F8BD      63677
CDMUX          =57        87
CENT2           F4FC      62716
CENTOUT         F4F3      62707
CENTRDY         F502      62722
CFRAME         =C2FB      49915
CINIT2          F715      63253
CINIT3          F71A      63258
CINIT4          F71C      63260
CIV             F009      61449
CMDBYT         =FFC5      65477
CMDFLG         =FF55      65365
CMDL4           F8F3      63731
CMDL5           F909      63753
CMDOUT          F389      62345
CMDREG         =40        64
CMDSTS         =0C        12
CMDT1           F38B      62347
CMDT2           F38D      62349
CMDT3            437      1079
CMDWAIT         F8E2      63714
CONFIG         =01        1
CONIN           F740      63296
CONINIT         F6FC      63228
CONOUT          F750      63312
CONPAGE        =F600      62976
CONST           F735      63285
COUT2           F75F      63327
COV             F00C      61452
CR             =0D        13
CRLF            F4EC      62700
CSTART          F799      63385
CSTRT1          F7B4      63412
CSV             F006      61446
CTC0           =80        128
CTC1           =81        129
CTC2           =82        130
CTC3           =83        131
CTCVEC         =FF10      65296
CTC_D0_CONTROL =01        1
CTC_D0_VECTOR  =00        0
CTC_D1_SW_RST  =02        2
CTC_D2_TCNEXT  =04        4
CTC_D3_AUTOTRG =00        0
CTC_D3_CLKTRG  =08        8
CTC_D4_FALLEDGE=00        0
CTC_D4_RISEEDGE=10        16
CTC_D5_PRESC256=20        32
CTC_D5_PRESC_16=00        0
CTC_D6_MODE_CNT=40        64
CTC_D6_MODE_TIM=00        0
CTC_D7_INT_DIS =00        0
CTC_D7_INT_EN  =80        128
DATB2           F839      63545
DATBIT          F82C      63532
DATREG         =43        67
DD5N18          FF35      65333
DD8N26          FF9F      65439
DENSTY         =02        2
DINIT2          FC68      64616
DINIT3          FC6D      64621
DINIT6          FCAB      64683
DISK            F0B3      61619
DISK2           F0CA      61642
DISK3           F0CF      61647
DISK4           F0EE      61678
DISK4a          F100      61696
DISK5           F10F      61711
DISKDVR         F022      61474
DISKINIT        FC38      64568
DISKMAX        =07        7
DISKPUT         FA05      64005
DISKREAD        FA8C      64140
DISKSTAT        FBDB      64475
DISKTAB         F93D      63805
DISKV           F00F      61455
DISKWRITE       FA08      64008
DISKX           F110      61712
DKIOCB         =FF98      65432
DMATRIX        =FF56      65366
DRD2            FAA8      64168
DRD2A           FAAC      64172
DRD3            FABA      64186
DRD4            FADB      64219
DRVINDEX        FD28      64808
DRVOFF          FF2E      65326
DRVSEL1        =01        1
DRVSEL2        =02        2
DRVSEL3        =04        4
DRVSEL4        =08        8
DRVTAB          FF20      65312
DRVTMR         =FFC9      65481
DRWCMD         =FFA8      65448
DSKAUX         =06        6
DSKBITS        =08        8
DSKDRV         =01        1
DSKOP          =00        0
DSKPTR         =04        4
DSKSEC         =03        3
DSKSTS         =08        8
DSKTRK         =02        2
DSTAT1          FC04      64516
DSTAT2          FC06      64518
DSTAT3          FC10      64528
DSTAT4          FC12      64530
DSTAT5          FC1C      64540
DSTAT6          FC1E      64542
DTR            =55        85
DUMMY           F8E1      63713
DUMMYSYMBOL     01        1 (command line -D)
DWRT0           FA0A      64010
DWRT1           FA27      64039
DWRT2           FA39      64057
DWRT3           FA75      64117
DWRT4           FA7D      64125
DWRT5           FA84      64132
ECHO            F4C9      62665
EDGE            F1E3      61923
EDGE2           F1F4      61940
EMULATOR        F862      63586
ENDBIT          F855      63573
EXTVEC          FF3C      65340
FBS            =40        64
FDCRESET       =10        16
FDCSIDE        =20        32
FDENSITY       =80        128
FINCMD         =D0        208
FIRST          =00        0
FLAGS          =0E        14
FMTLEN         =07        7
FMTPTR          FF49      65353
FMTS            FCB7      64695
FMTSTUFF       =FFB6      65462
FORCE           F391      62353
FORM2           FDD8      64984
FORM3           FDF4      65012
FORM3A          FDFF      65023
FORM4           FE32      65074
FORM5           FE47      65095
FORM51          FE59      65113
FORM6           FE74      65140
FORMAT          FDBE      64958
FORMX           FE9A      65178
FRMPTR         =FFB6      65462
FSMVEC          FF3A      65338
GETID          =03        3
GETPARAMS       FCE7      64743
GETSEC         =01        1
GOTO            F475      62581
HAS850          F891      63633
HASPARMS        FCD3      64723
HDDISK          F3DE      62430
HDDISK1         F3E9      62441
HDWSTS         =0D        13
HLDTIM          FF32      65330
HLDWAIT         F399      62361
HLOAD          =08        8
IDBUF          =FFAB      65451
IDMAX          =06        6
IDPTR           FF38      65336
IDTAB           F921      63777
INDEX           F9F1      63985
INDEX2          FA03      64003
INDXCLR        =54        84
INDXSET        =56        86
INIT            00        0
INIT1           02        2
INIT2           0A        10
INITAB           43E      1086
INS2            FF10      65296
INSERT          FF0B      65291
IOBUFF         =C100      49408
IOPTR          =FFB3      65459
ITBLEN         =16        22
KEYBUF         =FF00      65280
KLUDGE          F188      61832
LAST           =14BF      5311
LATCH          =30        48
LEN            = 200      512
LF             =0A        10
LISTV           F012      61458
LOGON           F866      63590
LOGSIZ         =FFA9      65449
MAIN            F8AC      63660
MEDIA          =05        5
MEMPTR          FDB2      64946
MINIMON         F3F5      62453
MONCOPY        = 493      1171
MONITOR        =F000      61440
MONSIZE        = FFC      4092
NEWLIN          FF3E      65342
NMIVEC         =66        102
NOHIGHSPEEDSIO =00        0
NOWAITMTR      =08        8
NSECS          =02        2
NSECTS         =FFBA      65466
NULL           =00        0
OLDPTR         =FF96      65430
OUTCPY          FF2F      65327
OUTPUT          F4D5      62677
PBASE           FF4B      65355
PCOUNT         =FF4F      65359
PERIOD          FF30      65328
PINP           =FF51      65361
PMASKS          FF47      65351
PNEXT           F4E0      62688
PNXT1           F4E1      62689
POUT           =FF53      65363
PRESENT        =06        6
PRINTER        =20        32
PROM1           F41E      62494
PROM2           F430      62512
PROM3           F437      62519
PROMPT          F408      62472
PSIZE           FF4D      65357
PSMSG           FF43      65347
PTRID           F923      63779
PTRMAX         =02        2
PTRSTAT         F962      63842
PTRTAB          F935      63797
PTRWRITE        F978      63864
PUT2HS          F4AF      62639
PUT2HX          F4B6      62646
PUT4HS          F4AA      62634
PUTNIB          F4BF      62655
PUTPARAMS       FD05      64773
PUTSEC         =02        2
PWRIT3          F98E      63886
PWRIT4          F9B4      63924
PWRT3A          F998      63896
PWRWAIT         F8BE      63678
RAM            =FF00      65280
RAMTST          10        16
RATES           FF28      65320
RBUFF2          F7D0      63440
RCOV2A          F332      62258
RCOV2B          F334      62260
RCOV4A          F359      62297
RCOV4B          F35B      62299
RDCMD          =88        136
RDTKDLY        =E4        228
RDTRK          =E0        224
READID          F097      61591
RECOV1          F31B      62235
RECOV2          F31F      62239
RECOV3          F342      62274
RECOVER         F30E      62222
RECVBUFF        F7B9      63417
RENEW           F018      61464
REST            52        82
REST1           59        89
REST2           62        98
REST3           6E        110
REST3A          80        128
REST4           93        147
REST4A          99        153
RESTART         F01B      61467
RESTORE         F237      62007
RETI1           F6F9      63225
RIDCMD         =C0        192
RSTCMD         =00        0
RTST1           15        21
RTST2           17        23
RTST3           21        33
RW1024          F2EC      62188
RW2             F2C5      62149
RW256           F2F5      62197
RW512           F2F2      62194
RWBUSY          F2F8      62200
RWDISK          F2B5      62133
RWEXIT          F303      62211
RWMAX           FF33      65331
RWTRY          =FFC6      65478
RXB1            F7E1      63457
RXB2            F7EC      63468
RXB3            F7F1      63473
RXB35           F804      63492
RXB4            F80E      63502
RXBAUD         =F606      62982
RXBLOCK         F7D9      63449
RXDAT2          F610      62992
RXDATA          F617      62999
RXINP          =F621      63009
RXOUT           F733      63283
RXSTART         F600      62976
RXSTOP          F62C      63020
RXTEMP         =F61C      63004
SALLYBUILD     =01        1
SALLYDEBUG     =00        0
SCAN            F910      63760
SD5N18          FF16      65302
SD8N26          FF7A      65402
SEC256         =05        5
SECLEN         =06        6
SECREG         =42        66
SECTRAN         FB10      64272
SEEK            F257      62039
SEEK1           F204      61956
SEEK2           F211      61969
SEEKTRK         F1F8      61944
SEEKX           F22E      61998
SEL4            F167      61799
SEL5            F16A      61802
SEL5A           F174      61812
SEL5B           F17E      61822
SELECT          F11A      61722
SELTAB          F198      61848
SELX            F18E      61838
SENDACK         FD4A      64842
SENDBUFF        F76C      63340
SENDCHAR        FD56      64854
SENDCOMP        FD54      64852
SEQNUM         =FFBF      65471
SEQPTR         =FFC1      65473
SERIN          =50        80
SEROUT         =51        81
SERPAGE        =F819      63513
SETSSO          F0AB      61611
SETSTAT         FAE3      64227
SETTLE         =04        4
SFMT2           FC8B      64651
SFMT3           FC8F      64655
SIDECMP        =02        2
SIDESEL        =08        8
SIOFAST        =08        8
SIONORMAL      =28        40
SIZE           =01        1
SKCMD          =10        16
SKEW13          FFC8      65480
SKEW17          FFE2      65506
SKEWDD          FF68      65384
SKEWSD          FF56      65366
SKWPTR         =FFB8      65464
SPARE0         =09        9
SPARE1         =0A        10
SPARE2         =0B        11
SPARE3         =0F        15
SPIN            F19C      61852
SPIN2           F1B9      61881
SPIN3           F1CF      61903
SPIN4           F1DF      61919
SPINWAIT       =00        0
SPOOLER         F9D1      63953
SSTS1           FAF0      64240
SSTS2           FAF6      64246
SSTS3           FAFC      64252
STARBIT         F819      63513
STARTMR         F3BA      62394
STEP            F275      62069
STEPIN         =40        64
STEPOUT        =60        96
STEPRATE       =03        3
STEPRATE0      =00        0
STEPRATE1      =01        1
STEPRATE2      =02        2
STEPRATE3      =03        3
STEPRT         =01        1
STOP1A          F84E      63566
STOPB1          F83B      63547
STOPTMR         F3CB      62411
STR20           FB40      64320
STR25           FB78      64376
STR26           FB7D      64381
STRAN1          FB22      64290
STRAN2          FB27      64295
STRAN3          FB9A      64410
STRAN4          FBA5      64421
STRAN5          FBBF      64447
STROBE         =53        83
STSREG         =40        64
SalyCMDOUT       430      1072
SalyDISK3       F0D5      61653
SalyDISKID      F92B      63787
SalyDISKRD1     FA93      64147
SalyDISKRD2     FA96      64150
SalyDISKRD3     FAD4      64212
SalyDISKWRT1    FA18      64024
SalyDISKWRT2    FA1B      64027
SalyDISKWRT3    FA48      64072
SalyLOGN1       F87E      63614
SalyLOGN2       F881      63617
SalyLogon        149      329
SalyRXBLOCK     F7DC      63452
SalyResetFDC    F237      62007
SalySEL4         15A      346
SalySEL4A        189      393
SalySEL4ex       1A2      418
SalyXMITBUF     F788      63368
TDRV2           F084      61572
TESTDRV         F078      61560
TICKS          =FFC7      65479
TMRIRQ          F3D2      62418
TPCMD2          F372      62322
TPCMD3          F382      62338
TRACK           FF2D      65325
TRKBUF         =C300      49920
TRKBUFFER      = 800      2048
TRKPTR         =FFC3      65475
TRKREG         =41        65
TRKSIZ         =FFBB      65467
TSTRDY         =00        0
TXDAT0          F654      63060
TXDAT1          F666      63078
TXDAT2          F678      63096
TXDAT3          F68A      63114
TXDAT4          F69C      63132
TXDAT5          F6AE      63150
TXDAT6          F6C0      63168
TXDAT7          F6D2      63186
TXEXIT          F6EE      63214
TXSTART         F647      63047
TXSTOP          F6E0      63200
TXTMP0         =F656      63062
TXTMP1         =F668      63080
TXTMP2         =F67A      63098
TXTMP3         =F68C      63116
TXTMP4         =F69E      63134
TXTMP5         =F6B0      63152
TXTMP6         =F6C2      63170
TXTMP7         =F6D4      63188
TYP1CMD         F36B      62315
TYP2CMD         F362      62306
UNIT            FF2C      65324
VARCOPY        =148F      5263
VERIFY          F295      62101
VFLAG          =FFB5      65461
VIEW            F447      62535
VIEW4           F46D      62573
VIEW5           F46F      62575
WAIT            F39E      62366
WAIT2           F39F      62367
WATCHDOG        F3A8      62376
WD1772         =00        0
WD179X         =40        64
WRPCOMP        =02        2
WRPROT         =03        3
WRTCMD         =A8        168
WRTKDLY        =F4        244
WRTRK          =F0        240
XMITBUF         F784      63364
Z80GOTO         FDB4      64948
Z80MAX         =04        4
Z80READ         FD5F      64863
Z80SET          FDA6      64934
Z80TAB          F954      63828
Z80WRITE        FD7B      64891
ZEROS           45        69
ZLENGTH         FD9C      64924
bild31          FECB      65227
build           FEA4      65188
build6          FEE5      65253
checktrack       349      841
cmdwaitfn        369      873
code0000        C0        192
code8000        AE        174
compbufadr       32C      812
compbufadr1      347      839
compbufadr2      343      835
dcb              484      1156
direct           476      1142
drive            478      1144
dsector          474      1140
dskrd1           1A8      424
dskrd2           1BA      442
dskreadfn        28D      653
dsktb            454      1108
dskwrite         275      629
dskwrite1        28A      650
dwrt             213      531
dwrta            222      546
dwrtb            24B      587
dwrtc            238      568
dwrtd            23E      574
fastrecv         3F4      1012
fastrecv1        407      1031
fastrecv2        417      1047
fastrecv2a       419      1049
fastsend         3B9      953
fastsend1        3C5      965
form3b          FE17      65047
getsize         FBCD      64461
getspeed         356      854
getsz2          FBD3      64467
glbsize        =2F        47
glbvars        =FF20      65312
id               48D      1165
irq4ms           3EF      1007
irq4ms1          3F1      1009
match            30C      780
match1           323      803
match2           326      806
nsides         =04        4
ntrks          =00        0
pokeydiv         477      1143
readtrack        2E2      738
readtrack1       2DF      735
readtrack2       2CF      719
readtrack3       2B5      693
readtrack4       2FE      766
readtrack5       30A      778
readtrack6       308      776
rxblck           3D8      984
rxblck1          3E9      1001
sec2track        1DE      478
sec2track1       1E7      487
secptr           47A      1146
shutdown        F068      61544
sides          =FFBD      65469
skewtab          47C      1148
slyCMDT1         432      1074
slyCMDT2         434      1076
ssts4           FB06      64262
str27           FB85      64389
thetrack         479      1145
togglebaud       37C      892
togglebaud1      387      903
tracks         =FFBE      65470
xmitbuffn        38D      909
xmitfast         39B      923
xmitfast1        3A3      931
